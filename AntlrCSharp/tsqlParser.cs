//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Kevin Johnson/source/repos/TSQLParser/AntlrCSharp/tsql.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class tsqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HADR_options=1, ADD=2, ALL=3, ALTER=4, AND=5, ANY=6, AS=7, ASC=8, AUTHORIZATION=9, 
		BACKUP=10, BEGIN=11, BETWEEN=12, BREAK=13, BROWSE=14, BULK=15, BY=16, 
		CALLED=17, CASCADE=18, CASE=19, CHANGETABLE=20, CHANGES=21, CHECK=22, 
		CHECKPOINT=23, CLOSE=24, CLUSTERED=25, COALESCE=26, COLLATE=27, COLUMN=28, 
		COMMIT=29, COMPUTE=30, CONSTRAINT=31, CONTAINMENT=32, CONTAINS=33, CONTAINSTABLE=34, 
		CONTINUE=35, CONVERT=36, CREATE=37, CROSS=38, CURRENT=39, CURRENT_DATE=40, 
		CURRENT_TIME=41, CURRENT_TIMESTAMP=42, CURRENT_USER=43, CURSOR=44, DATABASE=45, 
		DBCC=46, DEALLOCATE=47, DECLARE=48, DEFAULT=49, DELETE=50, DENY=51, DESC=52, 
		DISK=53, DISTINCT=54, DISTRIBUTED=55, DOUBLE=56, DROP=57, DUMP=58, ELSE=59, 
		END=60, ERRLVL=61, ESCAPE=62, EXCEPT=63, EXECUTE=64, EXISTS=65, EXIT=66, 
		EXTERNAL=67, FETCH=68, FILE=69, FILENAME=70, FILLFACTOR=71, FOR=72, FORCESEEK=73, 
		FOREIGN=74, FREETEXT=75, FREETEXTTABLE=76, FROM=77, FULL=78, FUNCTION=79, 
		GOTO=80, GRANT=81, GROUP=82, HAVING=83, IDENTITY=84, IDENTITYCOL=85, IDENTITY_INSERT=86, 
		IIF=87, IF=88, IN=89, INDEX=90, INNER=91, INSERT=92, INTERSECT=93, INTO=94, 
		IS=95, JOIN=96, KEY=97, KILL=98, LEFT=99, LIKE=100, LINENO=101, LOAD=102, 
		LOG=103, MERGE=104, NATIONAL=105, NEXT=106, NOCHECK=107, NONCLUSTERED=108, 
		NONE=109, NOT=110, NULL=111, NULLIF=112, NUMERIC=113, OF=114, OFF=115, 
		OFFSETS=116, ON=117, OPEN=118, OPENDATASOURCE=119, OPENQUERY=120, OPENROWSET=121, 
		OPENXML=122, OPTION=123, OR=124, ORDER=125, OUTER=126, OVER=127, PARTIAL=128, 
		PERCENT=129, PIVOT=130, PLAN=131, PRECISION=132, PRIMARY=133, PRINT=134, 
		PROC=135, PROCEDURE=136, PUBLIC=137, RAISERROR=138, READ=139, READTEXT=140, 
		RECONFIGURE=141, REFERENCES=142, REPLICATION=143, RESTORE=144, RESTRICT=145, 
		RETURN=146, RETURNS=147, REVERT=148, REVOKE=149, RIGHT=150, ROLLBACK=151, 
		ROWCOUNT=152, ROWGUIDCOL=153, RULE=154, SAVE=155, SCHEMA=156, SECURITYAUDIT=157, 
		SELECT=158, SEMANTICKEYPHRASETABLE=159, SEMANTICSIMILARITYDETAILSTABLE=160, 
		SEMANTICSIMILARITYTABLE=161, SESSION_USER=162, SET=163, SETUSER=164, SHUTDOWN=165, 
		SOME=166, STATISTICS=167, SYSTEM=168, SYSTEM_USER=169, TABLE=170, TABLESAMPLE=171, 
		TEXTSIZE=172, THEN=173, TO=174, TOP=175, TRAN=176, TRANSACTION=177, TRIGGER=178, 
		TRUNCATE=179, TRY_CAST=180, TRY_CONVERT=181, TRY_PARSE=182, TSEQUAL=183, 
		UNION=184, UNIQUE=185, UNPIVOT=186, UPDATE=187, UPDATETEXT=188, USE=189, 
		USER=190, VALUES=191, VALUE=192, VARYING=193, VIEW=194, WAITFOR=195, WHEN=196, 
		WHERE=197, WHILE=198, WITH=199, WITHIN=200, WRITETEXT=201, ABSOLUTE=202, 
		AFTER=203, ALLOWED=204, ALLOW_SNAPSHOT_ISOLATION=205, ANSI_NULLS=206, 
		ANSI_NULL_DEFAULT=207, ANSI_PADDING=208, ANSI_WARNINGS=209, APPLY=210, 
		ARITHABORT=211, AT=212, AUTO=213, AUTO_CLEANUP=214, AUTO_CLOSE=215, AUTO_CREATE_STATISTICS=216, 
		AUTO_SHRINK=217, AUTO_UPDATE_STATISTICS=218, AUTO_UPDATE_STATISTICS_ASYNC=219, 
		AVG=220, BASE64=221, BIGINT=222, BINARY_CHECKSUM=223, BULK_LOGGED=224, 
		CALLER=225, CAST=226, CATCH=227, CHANGE_RETENTION=228, CHANGE_TRACKING=229, 
		CHECKSUM=230, CHECKSUM_AGG=231, COMMITTED=232, COMPATIBILITY_LEVEL=233, 
		CONCAT=234, CONCAT_NULL_YIELDS_NULL=235, CONTROL=236, COOKIE=237, COUNT=238, 
		COUNT_BIG=239, CUBE=240, CURSOR_CLOSE_ON_COMMIT=241, CURSOR_DEFAULT=242, 
		DATE=243, DATEADD=244, DATEDIFF=245, DATENAME=246, DATEPART=247, DATETIME2=248, 
		DATETIMEOFFSETFROMPARTS=249, DATE_CORRELATION_OPTIMIZATION=250, DAYS=251, 
		DB_CHAINING=252, DEFAULT_FULLTEXT_LANGUAGE=253, DEFAULT_LANGUAGE=254, 
		DELAY=255, DELAYED_DURABILITY=256, DELETED=257, DENSE_RANK=258, DIRECTORY_NAME=259, 
		DISABLE=260, DISABLED=261, DISABLE_BROKER=262, DYNAMIC=263, EMERGENCY=264, 
		ENABLE_BROKER=265, ENCRYPTION=266, ERROR_BROKER_CONVERSATIONS=267, EXPAND=268, 
		FAST=269, FAST_FORWARD=270, FILEGROUP=271, FILEGROWTH=272, FILESTREAM=273, 
		FIRST=274, FIRST_VALUE=275, FOLLOWING=276, FORCE=277, FORCED=278, FORWARD_ONLY=279, 
		FULLSCAN=280, GB=281, GLOBAL=282, GO=283, GROUPING=284, GROUPING_ID=285, 
		HADR=286, HASH=287, HONOR_BROKER_PRIORITY=288, HOURS=289, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=290, 
		IMMEDIATE=291, IMPERSONATE=292, INCREMENTAL=293, INPUT=294, INT=295, INSENSITIVE=296, 
		INSERTED=297, ISOLATION=298, IO=299, KB=300, KEEP=301, KEEPFIXED=302, 
		KEYSET=303, LAG=304, LAST=305, LAST_VALUE=306, LEAD=307, LEVEL=308, LOCAL=309, 
		LOCK_ESCALATION=310, LOGIN=311, LOOP=312, MARK=313, MAX=314, MAXDOP=315, 
		MAXRECURSION=316, MAXSIZE=317, MB=318, MEMORY_OPTIMIZED_DATA=319, MIN=320, 
		MINUTES=321, MIN_ACTIVE_ROWVERSION=322, MIXED_PAGE_ALLOCATION=323, MODIFY=324, 
		MULTI_USER=325, NAME=326, NESTED_TRIGGERS=327, NEW_BROKER=328, NOCOUNT=329, 
		NOEXPAND=330, NON_TRANSACTED_ACCESS=331, NORECOMPUTE=332, NO_WAIT=333, 
		NTILE=334, NUMBER=335, NUMERIC_ROUNDABORT=336, OFFLINE=337, OFFSET=338, 
		ONLINE=339, ONLY=340, OPTIMISTIC=341, OPTIMIZE=342, OUT=343, OUTPUT=344, 
		OWNER=345, PAGE_VERIFY=346, PARAMETERIZATION=347, PARSE=348, PARTITION=349, 
		PATH=350, PERCENTILE_CONT=351, PRECEDING=352, PRIOR=353, PRIVILEGES=354, 
		QUOTED_IDENTIFIER=355, RANGE=356, RANK=357, READONLY=358, READ_COMMITTED_SNAPSHOT=359, 
		READ_ONLY=360, READ_WRITE=361, RECOMPILE=362, RECOVERY=363, RECURSIVE_TRIGGERS=364, 
		RELATIVE=365, REMOTE=366, REPEATABLE=367, RESTRICTED_USER=368, ROBUST=369, 
		ROLLUP=370, ROOT=371, ROW=372, ROWGUID=373, ROWS=374, ROW_NUMBER=375, 
		SAMPLE=376, SCHEMABINDING=377, SCROLL=378, SCROLL_LOCKS=379, SECONDS=380, 
		SELF=381, SERIALIZABLE=382, SETS=383, SHOWPLAN=384, SIMPLE=385, SINGLE_USER=386, 
		SIZE=387, SMALLINT=388, SNAPSHOT=389, SPATIAL_WINDOW_MAX_CELLS=390, STATIC=391, 
		STATS_STREAM=392, STDEV=393, STDEVP=394, STRING_AGG=395, STRING_SPLIT=396, 
		SUM=397, TAKE=398, TARGET_RECOVERY_TIME=399, TB=400, TEXTIMAGE_ON=401, 
		THROW=402, TIES=403, TIME=404, TINYINT=405, TORN_PAGE_DETECTION=406, TRANSFORM_NOISE_WORDS=407, 
		TRUSTWORTHY=408, TRY=409, TWO_DIGIT_YEAR_CUTOFF=410, TYPE=411, TYPE_WARNING=412, 
		UNBOUNDED=413, UNCOMMITTED=414, UNKNOWN=415, UNLIMITED=416, USING=417, 
		VAR=418, VARP=419, VIEWS=420, VIEW_METADATA=421, WORK=422, XML=423, XMLNAMESPACES=424, 
		ZONE=425, DOLLAR_ACTION=426, SPACE=427, COMMENT=428, LINE_COMMENT=429, 
		DOUBLE_QUOTE_ID=430, SQUARE_BRACKET_ID=431, LOCAL_ID=432, DECIMAL=433, 
		ID=434, STRING=435, BINARY=436, FLOAT=437, REAL=438, EQUAL=439, GREATER=440, 
		LESS=441, EXCLAMATION=442, PLUS_ASSIGN=443, MINUS_ASSIGN=444, MULT_ASSIGN=445, 
		DIV_ASSIGN=446, MOD_ASSIGN=447, AND_ASSIGN=448, XOR_ASSIGN=449, OR_ASSIGN=450, 
		DOT=451, UNDERLINE=452, AT_SIGN=453, SHARP=454, DOLLAR=455, LR_BRACKET=456, 
		RR_BRACKET=457, COMMA=458, SEMI=459, COLON=460, STAR=461, DIVIDE=462, 
		MODULE=463, PLUS=464, MINUS=465, BIT_NOT=466, BIT_OR=467, BIT_AND=468, 
		BIT_XOR=469;
	public const int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_sql_clauses = 2, RULE_sql_clause = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_cfl_statement = 6, RULE_another_statement = 7, 
		RULE_delete_statement = 8, RULE_delete_statement_from = 9, RULE_insert_statement = 10, 
		RULE_insert_statement_value = 11, RULE_select_statement = 12, RULE_update_statement = 13, 
		RULE_where_clause_dml = 14, RULE_output_clause = 15, RULE_output_dml_list_elem = 16, 
		RULE_output_column_name = 17, RULE_create_database = 18, RULE_create_index = 19, 
		RULE_create_statistics = 20, RULE_create_table = 21, RULE_create_view = 22, 
		RULE_view_attribute = 23, RULE_alter_table = 24, RULE_alter_database = 25, 
		RULE_database_optionspec = 26, RULE_auto_option = 27, RULE_change_tracking_option = 28, 
		RULE_change_tracking_option_list = 29, RULE_containment_option = 30, RULE_cursor_option = 31, 
		RULE_date_correlation_optimization_option = 32, RULE_db_encryption_option = 33, 
		RULE_db_state_option = 34, RULE_db_update_option = 35, RULE_db_user_access_option = 36, 
		RULE_delayed_durability_option = 37, RULE_external_access_option = 38, 
		RULE_mixed_page_allocation_option = 39, RULE_parameterization_option = 40, 
		RULE_recovery_option = 41, RULE_service_broker_option = 42, RULE_snapshot_option = 43, 
		RULE_sql_option = 44, RULE_target_recovery_time_option = 45, RULE_termination = 46, 
		RULE_drop_index = 47, RULE_drop_procedure = 48, RULE_drop_statistics = 49, 
		RULE_drop_table = 50, RULE_drop_view = 51, RULE_create_type = 52, RULE_drop_type = 53, 
		RULE_rowset_function_limited = 54, RULE_openquery = 55, RULE_opendatasource = 56, 
		RULE_declare_statement = 57, RULE_cursor_statement = 58, RULE_execute_statement = 59, 
		RULE_execute_statement_arg = 60, RULE_execute_var_string = 61, RULE_security_statement = 62, 
		RULE_grant_permission = 63, RULE_set_statement = 64, RULE_transaction_statement = 65, 
		RULE_go_statement = 66, RULE_use_statement = 67, RULE_execute_clause = 68, 
		RULE_declare_local = 69, RULE_table_type_definition = 70, RULE_column_def_table_constraints = 71, 
		RULE_column_def_table_constraint = 72, RULE_column_definition = 73, RULE_column_constraint = 74, 
		RULE_table_constraint = 75, RULE_index_options = 76, RULE_index_option = 77, 
		RULE_declare_cursor = 78, RULE_declare_set_cursor_common = 79, RULE_fetch_cursor = 80, 
		RULE_set_special = 81, RULE_constant_LOCAL_ID = 82, RULE_expression = 83, 
		RULE_constant_expression = 84, RULE_subquery = 85, RULE_with_expression = 86, 
		RULE_common_table_expression = 87, RULE_update_elem = 88, RULE_search_condition_list = 89, 
		RULE_search_condition = 90, RULE_predicate = 91, RULE_query_expression = 92, 
		RULE_union_op = 93, RULE_query_specification = 94, RULE_group_by_grouping_sets = 95, 
		RULE_grouping_set = 96, RULE_top_clause = 97, RULE_top_clause_dm = 98, 
		RULE_order_by_clause = 99, RULE_fetch_expression = 100, RULE_for_clause = 101, 
		RULE_xml_common_directives = 102, RULE_order_by_expression = 103, RULE_group_by_item = 104, 
		RULE_option_clause = 105, RULE_option = 106, RULE_optimize_for_arg = 107, 
		RULE_select_list = 108, RULE_select_list_elem = 109, RULE_table_sources = 110, 
		RULE_table_source = 111, RULE_table_source_item = 112, RULE_tablesample_clause = 113, 
		RULE_sample_number = 114, RULE_repeat_seed = 115, RULE_table_alias = 116, 
		RULE_change_table = 117, RULE_join_type = 118, RULE_table_name_with_hint = 119, 
		RULE_rowset_function = 120, RULE_bulk_option = 121, RULE_derived_table = 122, 
		RULE_function_call = 123, RULE_switch_section = 124, RULE_switch_search_condition_section = 125, 
		RULE_with_table_hints = 126, RULE_insert_with_table_hints = 127, RULE_table_hint = 128, 
		RULE_index_value = 129, RULE_column_alias_list = 130, RULE_column_alias = 131, 
		RULE_a_star = 132, RULE_table_value_constructor = 133, RULE_expression_list = 134, 
		RULE_value_list = 135, RULE_next_value_for = 136, RULE_next_value_for_function = 137, 
		RULE_ranking_windowed_function = 138, RULE_aggregate_windowed_function = 139, 
		RULE_all_distinct = 140, RULE_over_clause = 141, RULE_row_or_range_clause = 142, 
		RULE_window_frame_extent = 143, RULE_window_frame_bound = 144, RULE_window_frame_preceding = 145, 
		RULE_window_frame_following = 146, RULE_create_database_option = 147, 
		RULE_database_filestream_option = 148, RULE_database_file_spec = 149, 
		RULE_file_group = 150, RULE_file_spec = 151, RULE_full_table_name = 152, 
		RULE_table_name = 153, RULE_simple_name = 154, RULE_func_proc_name = 155, 
		RULE_ddl_object = 156, RULE_full_column_name = 157, RULE_column_name_list = 158, 
		RULE_cursor_name = 159, RULE_on_off = 160, RULE_clustered = 161, RULE_null_notnull = 162, 
		RULE_scalar_function_name = 163, RULE_default_value = 164, RULE_constant = 165, 
		RULE_sign = 166, RULE_r_id = 167, RULE_simple_id = 168, RULE_comparison_operator = 169, 
		RULE_assignment_operator = 170, RULE_file_size = 171, RULE_create_or_alter_procedure = 172, 
		RULE_create_or_alter_function = 173, RULE_func_body_returns_select = 174, 
		RULE_func_body_returns_table = 175, RULE_func_body_returns_scalar = 176, 
		RULE_procedure_param = 177, RULE_procedure_option = 178, RULE_function_option = 179, 
		RULE_percentile_cont = 180, RULE_string_agg = 181, RULE_data_type = 182;
	public static readonly string[] ruleNames = {
		"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
		"cfl_statement", "another_statement", "delete_statement", "delete_statement_from", 
		"insert_statement", "insert_statement_value", "select_statement", "update_statement", 
		"where_clause_dml", "output_clause", "output_dml_list_elem", "output_column_name", 
		"create_database", "create_index", "create_statistics", "create_table", 
		"create_view", "view_attribute", "alter_table", "alter_database", "database_optionspec", 
		"auto_option", "change_tracking_option", "change_tracking_option_list", 
		"containment_option", "cursor_option", "date_correlation_optimization_option", 
		"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
		"delayed_durability_option", "external_access_option", "mixed_page_allocation_option", 
		"parameterization_option", "recovery_option", "service_broker_option", 
		"snapshot_option", "sql_option", "target_recovery_time_option", "termination", 
		"drop_index", "drop_procedure", "drop_statistics", "drop_table", "drop_view", 
		"create_type", "drop_type", "rowset_function_limited", "openquery", "opendatasource", 
		"declare_statement", "cursor_statement", "execute_statement", "execute_statement_arg", 
		"execute_var_string", "security_statement", "grant_permission", "set_statement", 
		"transaction_statement", "go_statement", "use_statement", "execute_clause", 
		"declare_local", "table_type_definition", "column_def_table_constraints", 
		"column_def_table_constraint", "column_definition", "column_constraint", 
		"table_constraint", "index_options", "index_option", "declare_cursor", 
		"declare_set_cursor_common", "fetch_cursor", "set_special", "constant_LOCAL_ID", 
		"expression", "constant_expression", "subquery", "with_expression", "common_table_expression", 
		"update_elem", "search_condition_list", "search_condition", "predicate", 
		"query_expression", "union_op", "query_specification", "group_by_grouping_sets", 
		"grouping_set", "top_clause", "top_clause_dm", "order_by_clause", "fetch_expression", 
		"for_clause", "xml_common_directives", "order_by_expression", "group_by_item", 
		"option_clause", "option", "optimize_for_arg", "select_list", "select_list_elem", 
		"table_sources", "table_source", "table_source_item", "tablesample_clause", 
		"sample_number", "repeat_seed", "table_alias", "change_table", "join_type", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "switch_section", "switch_search_condition_section", 
		"with_table_hints", "insert_with_table_hints", "table_hint", "index_value", 
		"column_alias_list", "column_alias", "a_star", "table_value_constructor", 
		"expression_list", "value_list", "next_value_for", "next_value_for_function", 
		"ranking_windowed_function", "aggregate_windowed_function", "all_distinct", 
		"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
		"window_frame_preceding", "window_frame_following", "create_database_option", 
		"database_filestream_option", "database_file_spec", "file_group", "file_spec", 
		"full_table_name", "table_name", "simple_name", "func_proc_name", "ddl_object", 
		"full_column_name", "column_name_list", "cursor_name", "on_off", "clustered", 
		"null_notnull", "scalar_function_name", "default_value", "constant", "sign", 
		"r_id", "simple_id", "comparison_operator", "assignment_operator", "file_size", 
		"create_or_alter_procedure", "create_or_alter_function", "func_body_returns_select", 
		"func_body_returns_table", "func_body_returns_scalar", "procedure_param", 
		"procedure_option", "function_option", "percentile_cont", "string_agg", 
		"data_type"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'='", "'>'", "'<'", "'!'", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'.'", 
		"'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HADR_options", "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", 
		"AUTHORIZATION", "BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", 
		"BY", "CALLED", "CASCADE", "CASE", "CHANGETABLE", "CHANGES", "CHECK", 
		"CHECKPOINT", "CLOSE", "CLUSTERED", "COALESCE", "COLLATE", "COLUMN", "COMMIT", 
		"COMPUTE", "CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTINUE", 
		"CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", "DBCC", "DEALLOCATE", 
		"DECLARE", "DEFAULT", "DELETE", "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
		"DOUBLE", "DROP", "DUMP", "ELSE", "END", "ERRLVL", "ESCAPE", "EXCEPT", 
		"EXECUTE", "EXISTS", "EXIT", "EXTERNAL", "FETCH", "FILE", "FILENAME", 
		"FILLFACTOR", "FOR", "FORCESEEK", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
		"FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", "HAVING", "IDENTITY", 
		"IDENTITYCOL", "IDENTITY_INSERT", "IIF", "IF", "IN", "INDEX", "INNER", 
		"INSERT", "INTERSECT", "INTO", "IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", 
		"LINENO", "LOAD", "LOG", "MERGE", "NATIONAL", "NEXT", "NOCHECK", "NONCLUSTERED", 
		"NONE", "NOT", "NULL", "NULLIF", "NUMERIC", "OF", "OFF", "OFFSETS", "ON", 
		"OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", "OPTION", 
		"OR", "ORDER", "OUTER", "OVER", "PARTIAL", "PERCENT", "PIVOT", "PLAN", 
		"PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", "PUBLIC", "RAISERROR", 
		"READ", "READTEXT", "RECONFIGURE", "REFERENCES", "REPLICATION", "RESTORE", 
		"RESTRICT", "RETURN", "RETURNS", "REVERT", "REVOKE", "RIGHT", "ROLLBACK", 
		"ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT", 
		"SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
		"SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SOME", "STATISTICS", "SYSTEM", 
		"SYSTEM_USER", "TABLE", "TABLESAMPLE", "TEXTSIZE", "THEN", "TO", "TOP", 
		"TRAN", "TRANSACTION", "TRIGGER", "TRUNCATE", "TRY_CAST", "TRY_CONVERT", 
		"TRY_PARSE", "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", 
		"USE", "USER", "VALUES", "VALUE", "VARYING", "VIEW", "WAITFOR", "WHEN", 
		"WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE", "AFTER", 
		"ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", "ANSI_NULL_DEFAULT", 
		"ANSI_PADDING", "ANSI_WARNINGS", "APPLY", "ARITHABORT", "AT", "AUTO", 
		"AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", 
		"AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", "AVG", "BASE64", 
		"BIGINT", "BINARY_CHECKSUM", "BULK_LOGGED", "CALLER", "CAST", "CATCH", 
		"CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", 
		"COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTROL", 
		"COOKIE", "COUNT", "COUNT_BIG", "CUBE", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
		"DATE", "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATETIME2", "DATETIMEOFFSETFROMPARTS", 
		"DATE_CORRELATION_OPTIMIZATION", "DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
		"DIRECTORY_NAME", "DISABLE", "DISABLED", "DISABLE_BROKER", "DYNAMIC", 
		"EMERGENCY", "ENABLE_BROKER", "ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", 
		"EXPAND", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", "FILESTREAM", 
		"FIRST", "FIRST_VALUE", "FOLLOWING", "FORCE", "FORCED", "FORWARD_ONLY", 
		"FULLSCAN", "GB", "GLOBAL", "GO", "GROUPING", "GROUPING_ID", "HADR", "HASH", 
		"HONOR_BROKER_PRIORITY", "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
		"IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INPUT", "INT", "INSENSITIVE", 
		"INSERTED", "ISOLATION", "IO", "KB", "KEEP", "KEEPFIXED", "KEYSET", "LAG", 
		"LAST", "LAST_VALUE", "LEAD", "LEVEL", "LOCAL", "LOCK_ESCALATION", "LOGIN", 
		"LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", "MB", "MEMORY_OPTIMIZED_DATA", 
		"MIN", "MINUTES", "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", "MODIFY", 
		"MULTI_USER", "NAME", "NESTED_TRIGGERS", "NEW_BROKER", "NOCOUNT", "NOEXPAND", 
		"NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NO_WAIT", "NTILE", "NUMBER", 
		"NUMERIC_ROUNDABORT", "OFFLINE", "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", 
		"OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", 
		"PARSE", "PARTITION", "PATH", "PERCENTILE_CONT", "PRECEDING", "PRIOR", 
		"PRIVILEGES", "QUOTED_IDENTIFIER", "RANGE", "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT", 
		"READ_ONLY", "READ_WRITE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", 
		"RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", "ROBUST", "ROLLUP", 
		"ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", 
		"SCROLL", "SCROLL_LOCKS", "SECONDS", "SELF", "SERIALIZABLE", "SETS", "SHOWPLAN", 
		"SIMPLE", "SINGLE_USER", "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
		"STATIC", "STATS_STREAM", "STDEV", "STDEVP", "STRING_AGG", "STRING_SPLIT", 
		"SUM", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", 
		"TIES", "TIME", "TINYINT", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
		"TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", 
		"UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", "USING", "VAR", "VARP", 
		"VIEWS", "VIEW_METADATA", "WORK", "XML", "XMLNAMESPACES", "ZONE", "DOLLAR_ACTION", 
		"SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", 
		"LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", "REAL", "EQUAL", 
		"GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOT", 
		"UNDERLINE", "AT_SIGN", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", 
		"COMMA", "SEMI", "COLON", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", 
		"BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "tsql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static tsqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public tsqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public tsqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Tsql_fileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(tsqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BatchContext[] batch() {
			return GetRuleContexts<BatchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BatchContext batch(int i) {
			return GetRuleContext<BatchContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsql_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(Context, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 145663472800114704L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 18581746794824209L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 2639109382195007505L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 6485222866395631635L) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & -6755399582093674263L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -776873741480755605L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -9223369416933306605L) != 0)) {
				{
				{
				State = 366;
				batch();
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 372;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Go_statementContext go_statement() {
			return GetRuleContext<Go_statementContext>(0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BatchContext batch() {
		BatchContext _localctx = new BatchContext(Context, State);
		EnterRule(_localctx, 2, RULE_batch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			sql_clauses();
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 375;
				go_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(tsqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(tsqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSql_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSql_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clausesContext sql_clauses() {
		Sql_clausesContext _localctx = new Sql_clausesContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 378;
					sql_clause();
					State = 380;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						State = 379;
						Match(SEMI);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSql_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSql_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clauseContext sql_clause() {
		Sql_clauseContext _localctx = new Sql_clauseContext(Context, State);
		EnterRule(_localctx, 6, RULE_sql_clause);
		try {
			State = 390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386;
				dml_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				ddl_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 388;
				cfl_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 389;
				another_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(Context, State);
		EnterRule(_localctx, 8, RULE_dml_clause);
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392;
				delete_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 393;
				insert_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 394;
				select_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 395;
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_databaseContext create_database() {
			return GetRuleContext<Create_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_or_alter_functionContext create_or_alter_function() {
			return GetRuleContext<Create_or_alter_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_or_alter_procedureContext create_or_alter_procedure() {
			return GetRuleContext<Create_or_alter_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_ddl_clause);
		try {
			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 398;
				create_database();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399;
				create_index();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 400;
				create_or_alter_function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 401;
				create_or_alter_procedure();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 402;
				create_statistics();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 403;
				create_table();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 404;
				create_type();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 405;
				create_view();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 406;
				alter_table();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 407;
				alter_database();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 408;
				drop_index();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 409;
				drop_procedure();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 410;
				drop_statistics();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 411;
				drop_table();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 412;
				drop_type();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 413;
				drop_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
	 
		public Cfl_statementContext() { }
		public virtual void CopyFrom(Cfl_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Waitfor_statementContext : Cfl_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAITFOR() { return GetToken(tsqlParser.WAITFOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY() { return GetToken(tsqlParser.DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(tsqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Waitfor_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitfor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_statementContext : Cfl_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(tsqlParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Print_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Continue_statementContext : Cfl_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(tsqlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Continue_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class If_statementContext : Cfl_statementContext {
		public Sql_clauseContext if_expr;
		public Sql_clauseContext else_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(tsqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public If_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Raiseerror_statementContext : Cfl_statementContext {
		public IToken msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISERROR() { return GetToken(tsqlParser.RAISERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_LOCAL_IDContext[] constant_LOCAL_ID() {
			return GetRuleContexts<Constant_LOCAL_IDContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return GetRuleContext<Constant_LOCAL_IDContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Raiseerror_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseerror_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Throw_statementContext : Cfl_statementContext {
		public IToken error_number;
		public IToken message;
		public IToken state;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(tsqlParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(tsqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(tsqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Throw_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Try_catch_statementContext : Cfl_statementContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BEGIN() { return GetTokens(tsqlParser.BEGIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN(int i) {
			return GetToken(tsqlParser.BEGIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TRY() { return GetTokens(tsqlParser.TRY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY(int i) {
			return GetToken(tsqlParser.TRY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] END() { return GetTokens(tsqlParser.END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END(int i) {
			return GetToken(tsqlParser.END, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(tsqlParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(tsqlParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(tsqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(tsqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext[] sql_clauses() {
			return GetRuleContexts<Sql_clausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses(int i) {
			return GetRuleContext<Sql_clausesContext>(i);
		}
		public Try_catch_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_catch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_statementContext : Cfl_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(tsqlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clauseContext sql_clause() {
			return GetRuleContext<Sql_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(tsqlParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(tsqlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public While_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Block_statementContext : Cfl_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(tsqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(tsqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(tsqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(tsqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		public Block_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Break_statementContext : Cfl_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(tsqlParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Break_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Goto_statementContext : Cfl_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(tsqlParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(tsqlParser.COLON, 0); }
		public Goto_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Return_statementContext : Cfl_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(tsqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Return_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_cfl_statement);
		int _la;
		try {
			State = 541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				_localctx = new Block_statementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 416;
				Match(BEGIN);
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 417;
					Match(SEMI);
					}
				}

				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 145663472800114704L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 18581746794824209L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 2639109382195007505L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 6485222866395631635L) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & -6755399582093674263L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -776873741480755605L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -9223369416933306605L) != 0)) {
					{
					State = 420;
					sql_clauses();
					}
				}

				State = 423;
				Match(END);
				State = 425;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 424;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Break_statementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 427;
				Match(BREAK);
				State = 429;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 428;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Continue_statementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 431;
				Match(CONTINUE);
				State = 433;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 432;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new Goto_statementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 435;
				Match(GOTO);
				State = 436;
				r_id();
				State = 438;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 437;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new Goto_statementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 440;
				r_id();
				State = 441;
				Match(COLON);
				State = 443;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 442;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new If_statementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 445;
				Match(IF);
				State = 446;
				search_condition(0);
				State = 447;
				((If_statementContext)_localctx).if_expr = sql_clause();
				State = 450;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 448;
					Match(ELSE);
					State = 449;
					((If_statementContext)_localctx).else_expr = sql_clause();
					}
					break;
				}
				State = 453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 452;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new Return_statementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 455;
				Match(RETURN);
				State = 457;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 456;
					expression(0);
					}
					break;
				}
				State = 460;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 459;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				_localctx = new Throw_statementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 462;
				Match(THROW);
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_ID || _la==DECIMAL) {
					{
					State = 463;
					((Throw_statementContext)_localctx).error_number = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
						((Throw_statementContext)_localctx).error_number = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 464;
					Match(COMMA);
					State = 465;
					((Throw_statementContext)_localctx).message = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((Throw_statementContext)_localctx).message = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 466;
					Match(COMMA);
					State = 467;
					((Throw_statementContext)_localctx).state = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
						((Throw_statementContext)_localctx).state = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 471;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 470;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new Try_catch_statementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 473;
				Match(BEGIN);
				State = 474;
				Match(TRY);
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 475;
					Match(SEMI);
					}
				}

				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 145663472800114704L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 18581746794824209L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 2639109382195007505L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 6485222866395631635L) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & -6755399582093674263L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -776873741480755605L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -9223369416933306605L) != 0)) {
					{
					State = 478;
					((Try_catch_statementContext)_localctx).try_clauses = sql_clauses();
					}
				}

				State = 481;
				Match(END);
				State = 482;
				Match(TRY);
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 483;
					Match(SEMI);
					}
				}

				State = 486;
				Match(BEGIN);
				State = 487;
				Match(CATCH);
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 488;
					Match(SEMI);
					}
				}

				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 145663472800114704L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 18581746794824209L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 2639109382195007505L) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 6485222866395631635L) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & -6755399582093674263L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -776873741480755605L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -9223369416933306605L) != 0)) {
					{
					State = 491;
					((Try_catch_statementContext)_localctx).catch_clauses = sql_clauses();
					}
				}

				State = 494;
				Match(END);
				State = 495;
				Match(CATCH);
				State = 497;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 496;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new Waitfor_statementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 499;
				Match(WAITFOR);
				State = 500;
				_la = TokenStream.LA(1);
				if ( !(_la==DELAY || _la==TIME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 501;
				expression(0);
				State = 503;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 502;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new While_statementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 505;
				Match(WHILE);
				State = 506;
				search_condition(0);
				State = 516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 507;
					sql_clause();
					}
					break;
				case 2:
					{
					State = 508;
					Match(BREAK);
					State = 510;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						State = 509;
						Match(SEMI);
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 512;
					Match(CONTINUE);
					State = 514;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						State = 513;
						Match(SEMI);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new Print_statementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 518;
				Match(PRINT);
				State = 519;
				expression(0);
				State = 521;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 520;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new Raiseerror_statementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 523;
				Match(RAISERROR);
				State = 524;
				Match(LR_BRACKET);
				State = 525;
				((Raiseerror_statementContext)_localctx).msg = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & 11L) != 0)) ) {
					((Raiseerror_statementContext)_localctx).msg = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 526;
				Match(COMMA);
				State = 527;
				((Raiseerror_statementContext)_localctx).severity = constant_LOCAL_ID();
				State = 528;
				Match(COMMA);
				State = 529;
				((Raiseerror_statementContext)_localctx).state = constant_LOCAL_ID();
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 530;
					Match(COMMA);
					State = 531;
					constant_LOCAL_ID();
					}
					}
					State = 536;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 537;
				Match(RR_BRACKET);
				State = 539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 538;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnother_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_another_statement);
		try {
			State = 550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543;
				declare_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544;
				cursor_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 545;
				execute_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 546;
				security_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 547;
				set_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 548;
				transaction_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 549;
				use_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(tsqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Delete_statement_fromContext delete_statement_from() {
			return GetRuleContext<Delete_statement_fromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_clause_dmContext top_clause_dm() {
			return GetRuleContext<Top_clause_dmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(tsqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(tsqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clause_dmlContext where_clause_dml() {
			return GetRuleContext<Where_clause_dmlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 552;
				with_expression();
				}
			}

			State = 555;
			Match(DELETE);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 556;
				top_clause_dm();
				}
			}

			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 559;
				Match(FROM);
				}
			}

			State = 562;
			delete_statement_from();
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 563;
				insert_with_table_hints();
				}
				break;
			}
			State = 567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 566;
				output_clause();
				}
				break;
			}
			State = 571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 569;
				Match(FROM);
				State = 570;
				table_sources();
				}
			}

			State = 574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 573;
				where_clause_dml();
				}
			}

			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 576;
				for_clause();
				}
			}

			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 579;
				option_clause();
				}
			}

			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 582;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statement_fromContext : ParserRuleContext {
		public IToken table_var;
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDelete_statement_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDelete_statement_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement_from(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statement_fromContext delete_statement_from() {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(Context, State);
		EnterRule(_localctx, 18, RULE_delete_statement_from);
		try {
			State = 592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585;
				r_id();
				State = 587;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 586;
					with_table_hints();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 589;
				ddl_object();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 590;
				rowset_function_limited();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 591;
				_localctx.table_var = Match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(tsqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_statement_valueContext insert_statement_value() {
			return GetRuleContext<Insert_statement_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_clause_dmContext top_clause_dm() {
			return GetRuleContext<Top_clause_dmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_insert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 594;
				with_expression();
				}
			}

			State = 597;
			Match(INSERT);
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 598;
				top_clause_dm();
				}
			}

			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 601;
				Match(INTO);
				}
			}

			State = 606;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 604;
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 605;
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 608;
				insert_with_table_hints();
				}
				break;
			}
			State = 615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 611;
				Match(LR_BRACKET);
				State = 612;
				column_name_list();
				State = 613;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTPUT) {
				{
				State = 617;
				output_clause();
				}
			}

			State = 620;
			insert_statement_value();
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 621;
				for_clause();
				}
			}

			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 624;
				option_clause();
				}
			}

			State = 628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 627;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statement_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_value_constructorContext table_value_constructor() {
			return GetRuleContext<Table_value_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(tsqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterInsert_statement_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitInsert_statement_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statement_valueContext insert_statement_value() {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(Context, State);
		EnterRule(_localctx, 22, RULE_insert_statement_value);
		try {
			State = 635;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630;
				table_value_constructor();
				}
				break;
			case SELECT:
			case WITH:
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631;
				derived_table();
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 632;
				execute_statement();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 633;
				Match(DEFAULT);
				State = 634;
				Match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 637;
				with_expression();
				}
			}

			State = 640;
			query_expression(0);
			State = 642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 641;
				order_by_clause();
				}
				break;
			}
			State = 645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 644;
				for_clause();
				}
				break;
			}
			State = 648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 647;
				option_clause();
				}
				break;
			}
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 650;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(tsqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_clause_dmContext top_clause_dm() {
			return GetRuleContext<Top_clause_dmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clause_dmlContext where_clause_dml() {
			return GetRuleContext<Where_clause_dmlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_update_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 653;
				with_expression();
				}
			}

			State = 656;
			Match(UPDATE);
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 657;
				top_clause_dm();
				}
			}

			State = 662;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 660;
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 661;
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				State = 664;
				with_table_hints();
				}
			}

			State = 667;
			Match(SET);
			State = 668;
			update_elem();
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 669;
				Match(COMMA);
				State = 670;
				update_elem();
				}
				}
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 676;
				output_clause();
				}
				break;
			}
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 679;
				Match(FROM);
				State = 680;
				table_sources();
				}
			}

			State = 684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 683;
				where_clause_dml();
				}
			}

			State = 687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 686;
				for_clause();
				}
			}

			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 689;
				option_clause();
				}
			}

			State = 693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 692;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clause_dmlContext : ParserRuleContext {
		public IToken cursor_var;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(tsqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_condition_listContext search_condition_list() {
			return GetRuleContext<Search_condition_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public Where_clause_dmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause_dml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWhere_clause_dml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWhere_clause_dml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause_dml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clause_dmlContext where_clause_dml() {
		Where_clause_dmlContext _localctx = new Where_clause_dmlContext(Context, State);
		EnterRule(_localctx, 28, RULE_where_clause_dml);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			Match(WHERE);
			State = 706;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
			case COALESCE:
			case CONVERT:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case EXISTS:
			case FORCESEEK:
			case IDENTITY:
			case IIF:
			case LEFT:
			case NEXT:
			case NOT:
			case NULL:
			case NULLIF:
			case NUMERIC:
			case OVER:
			case RIGHT:
			case SESSION_USER:
			case SYSTEM_USER:
			case TRY_CAST:
			case TRY_CONVERT:
			case TRY_PARSE:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case BINARY_CHECKSUM:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DATETIMEOFFSETFROMPARTS:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARSE:
			case PARTITION:
			case PATH:
			case PERCENTILE_CONT:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case STRING_AGG:
			case STRING_SPLIT:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case LR_BRACKET:
			case PLUS:
			case MINUS:
			case BIT_NOT:
				{
				State = 696;
				search_condition_list();
				}
				break;
			case CURRENT:
				{
				State = 697;
				Match(CURRENT);
				State = 698;
				Match(OF);
				State = 704;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 700;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
					case 1:
						{
						State = 699;
						Match(GLOBAL);
						}
						break;
					}
					State = 702;
					cursor_name();
					}
					break;
				case 2:
					{
					State = 703;
					_localctx.cursor_var = Match(LOCAL_ID);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_output_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(OUTPUT);
			State = 709;
			output_dml_list_elem();
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 710;
				Match(COMMA);
				State = 711;
				output_dml_list_elem();
				}
				}
				State = 716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 717;
				Match(INTO);
				State = 720;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LOCAL_ID:
					{
					State = 718;
					Match(LOCAL_ID);
					}
					break;
				case FORCESEEK:
				case NEXT:
				case NUMERIC:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 719;
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 726;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 722;
					Match(LR_BRACKET);
					State = 723;
					column_name_list();
					State = 724;
					Match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Output_column_nameContext output_column_name() {
			return GetRuleContext<Output_column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_dml_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(Context, State);
		EnterRule(_localctx, 32, RULE_output_dml_list_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 730;
				output_column_name();
				}
				break;
			case 2:
				{
				State = 731;
				expression(0);
				}
				break;
			}
			State = 738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 734;
					Match(AS);
					}
				}

				State = 737;
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(tsqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETED() { return GetToken(tsqlParser.DELETED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERTED() { return GetToken(tsqlParser.INSERTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(tsqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_ACTION() { return GetToken(tsqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOutput_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOutput_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_column_nameContext output_column_name() {
		Output_column_nameContext _localctx = new Output_column_nameContext(Context, State);
		EnterRule(_localctx, 34, RULE_output_column_name);
		try {
			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
				case 1:
					{
					State = 740;
					Match(DELETED);
					}
					break;
				case 2:
					{
					State = 741;
					Match(INSERTED);
					}
					break;
				case 3:
					{
					State = 742;
					table_name();
					}
					break;
				}
				State = 745;
				Match(DOT);
				State = 748;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 746;
					Match(STAR);
					}
					break;
				case FORCESEEK:
				case NEXT:
				case NUMERIC:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 747;
					r_id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				Match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_databaseContext : ParserRuleContext {
		public R_idContext database;
		public R_idContext collation_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(tsqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINMENT() { return GetToken(tsqlParser.CONTAINMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(tsqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(tsqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Database_file_specContext[] database_file_spec() {
			return GetRuleContexts<Database_file_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Database_file_specContext database_file_spec(int i) {
			return GetRuleContext<Database_file_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(tsqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_database_optionContext[] create_database_option() {
			return GetRuleContexts<Create_database_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_database_optionContext create_database_option(int i) {
			return GetRuleContext<Create_database_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(tsqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(tsqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(tsqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Create_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_databaseContext create_database() {
		Create_databaseContext _localctx = new Create_databaseContext(Context, State);
		EnterRule(_localctx, 36, RULE_create_database);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			Match(CREATE);
			State = 754;
			Match(DATABASE);
			{
			State = 755;
			_localctx.database = r_id();
			}
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINMENT) {
				{
				State = 756;
				Match(CONTAINMENT);
				State = 757;
				Match(EQUAL);
				State = 758;
				_la = TokenStream.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 761;
				Match(ON);
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY) {
					{
					State = 762;
					Match(PRIMARY);
					}
				}

				State = 765;
				database_file_spec();
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 766;
					Match(COMMA);
					State = 767;
					database_file_spec();
					}
					}
					State = 772;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOG) {
				{
				State = 775;
				Match(LOG);
				State = 776;
				Match(ON);
				State = 777;
				database_file_spec();
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 778;
					Match(COMMA);
					State = 779;
					database_file_spec();
					}
					}
					State = 784;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 787;
				Match(COLLATE);
				State = 788;
				_localctx.collation_name = r_id();
				}
			}

			State = 800;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 791;
				Match(WITH);
				State = 792;
				create_database_option();
				State = 797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 793;
					Match(COMMA);
					State = 794;
					create_database_option();
					}
					}
					State = 799;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(tsqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(tsqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(tsqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(tsqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(tsqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(tsqlParser.DESC, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(Context, State);
		EnterRule(_localctx, 38, RULE_create_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			Match(CREATE);
			State = 804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 803;
				Match(UNIQUE);
				}
			}

			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 806;
				clustered();
				}
			}

			State = 809;
			Match(INDEX);
			State = 810;
			r_id();
			State = 811;
			Match(ON);
			State = 812;
			table_name_with_hint();
			State = 813;
			Match(LR_BRACKET);
			State = 814;
			column_name_list();
			State = 816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 815;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 818;
			Match(RR_BRACKET);
			State = 820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 819;
				index_options();
				}
				break;
			}
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 822;
				Match(ON);
				State = 823;
				r_id();
				}
			}

			State = 827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 826;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(tsqlParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLSCAN() { return GetToken(tsqlParser.FULLSCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(tsqlParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_STREAM() { return GetToken(tsqlParser.STATS_STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORECOMPUTE() { return GetToken(tsqlParser.NORECOMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(tsqlParser.INCREMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(Context, State);
		EnterRule(_localctx, 40, RULE_create_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			Match(CREATE);
			State = 830;
			Match(STATISTICS);
			State = 831;
			r_id();
			State = 832;
			Match(ON);
			State = 833;
			table_name_with_hint();
			State = 834;
			Match(LR_BRACKET);
			State = 835;
			column_name_list();
			State = 836;
			Match(RR_BRACKET);
			State = 855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 837;
				Match(WITH);
				State = 843;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FULLSCAN:
					{
					State = 838;
					Match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					State = 839;
					Match(SAMPLE);
					State = 840;
					Match(DECIMAL);
					State = 841;
					_la = TokenStream.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					State = 842;
					Match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 847;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
				case 1:
					{
					State = 845;
					Match(COMMA);
					State = 846;
					Match(NORECOMPUTE);
					}
					break;
				}
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 849;
					Match(COMMA);
					State = 850;
					Match(INCREMENTAL);
					State = 851;
					Match(EQUAL);
					State = 852;
					on_off();
					}
				}

				}
				break;
			}
			State = 858;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 857;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(tsqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(tsqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(tsqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTIMAGE_ON() { return GetToken(tsqlParser.TEXTIMAGE_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 42, RULE_create_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860;
			Match(CREATE);
			State = 861;
			Match(TABLE);
			State = 862;
			table_name();
			State = 863;
			Match(LR_BRACKET);
			State = 864;
			column_def_table_constraints();
			State = 866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 865;
				Match(COMMA);
				}
			}

			State = 868;
			Match(RR_BRACKET);
			State = 872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 869;
				Match(ON);
				State = 870;
				r_id();
				}
				break;
			case 2:
				{
				State = 871;
				Match(DEFAULT);
				}
				break;
			}
			State = 877;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 874;
				Match(TEXTIMAGE_ON);
				State = 875;
				r_id();
				}
				break;
			case 2:
				{
				State = 876;
				Match(DEFAULT);
				}
				break;
			}
			State = 880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				{
				State = 879;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(tsqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(tsqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(tsqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(tsqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 44, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882;
			Match(CREATE);
			State = 883;
			Match(VIEW);
			State = 884;
			simple_name();
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 885;
				Match(LR_BRACKET);
				State = 886;
				column_name_list();
				State = 887;
				Match(RR_BRACKET);
				}
			}

			State = 900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 891;
				Match(WITH);
				State = 892;
				view_attribute();
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 893;
					Match(COMMA);
					State = 894;
					view_attribute();
					}
					}
					State = 899;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 902;
			Match(AS);
			State = 903;
			select_statement();
			State = 907;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 904;
				Match(WITH);
				State = 905;
				Match(CHECK);
				State = 906;
				Match(OPTION);
				}
				break;
			}
			State = 910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 909;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMABINDING() { return GetToken(tsqlParser.SCHEMABINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_METADATA() { return GetToken(tsqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(Context, State);
		EnterRule(_localctx, 46, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			_la = TokenStream.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public R_idContext constraint;
		public R_idContext column;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLE() { return GetTokens(tsqlParser.TABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE(int i) {
			return GetToken(tsqlParser.TABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(tsqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(tsqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_ESCALATION() { return GetToken(tsqlParser.LOCK_ESCALATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(tsqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(tsqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(tsqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintContext column_def_table_constraint() {
			return GetRuleContext<Column_def_table_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(tsqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(tsqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(tsqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(tsqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(tsqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(tsqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext[] column_name_list() {
			return GetRuleContexts<Column_name_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list(int i) {
			return GetRuleContext<Column_name_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(Context, State);
		EnterRule(_localctx, 48, RULE_alter_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			Match(ALTER);
			State = 915;
			Match(TABLE);
			State = 916;
			table_name();
			State = 950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 917;
				Match(SET);
				State = 918;
				Match(LR_BRACKET);
				State = 919;
				Match(LOCK_ESCALATION);
				State = 920;
				Match(EQUAL);
				State = 921;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 922;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 923;
				Match(ADD);
				State = 924;
				column_def_table_constraint();
				}
				break;
			case 3:
				{
				State = 925;
				Match(DROP);
				State = 926;
				Match(CONSTRAINT);
				State = 927;
				_localctx.constraint = r_id();
				}
				break;
			case 4:
				{
				State = 928;
				Match(DROP);
				State = 929;
				Match(COLUMN);
				State = 930;
				_localctx.column = r_id();
				}
				break;
			case 5:
				{
				State = 931;
				Match(WITH);
				State = 932;
				Match(CHECK);
				State = 933;
				Match(ADD);
				State = 934;
				Match(CONSTRAINT);
				State = 935;
				_localctx.constraint = r_id();
				State = 936;
				Match(FOREIGN);
				State = 937;
				Match(KEY);
				State = 938;
				Match(LR_BRACKET);
				State = 939;
				_localctx.fk = column_name_list();
				State = 940;
				Match(RR_BRACKET);
				State = 941;
				Match(REFERENCES);
				State = 942;
				table_name();
				State = 943;
				Match(LR_BRACKET);
				State = 944;
				_localctx.pk = column_name_list();
				State = 945;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				{
				State = 947;
				Match(CHECK);
				State = 948;
				Match(CONSTRAINT);
				State = 949;
				_localctx.constraint = r_id();
				}
				break;
			}
			State = 953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 952;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public R_idContext database;
		public R_idContext new_name;
		public R_idContext collation;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(tsqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(tsqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(tsqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Database_optionspecContext database_optionspec() {
			return GetRuleContext<Database_optionspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(Context, State);
		EnterRule(_localctx, 50, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			Match(ALTER);
			State = 956;
			Match(DATABASE);
			State = 959;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 957;
				_localctx.database = r_id();
				}
				break;
			case CURRENT:
				{
				State = 958;
				Match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 973;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODIFY:
				{
				State = 961;
				Match(MODIFY);
				State = 962;
				Match(NAME);
				State = 963;
				Match(EQUAL);
				State = 964;
				_localctx.new_name = r_id();
				}
				break;
			case COLLATE:
				{
				State = 965;
				Match(COLLATE);
				State = 966;
				_localctx.collation = r_id();
				}
				break;
			case SET:
				{
				State = 967;
				Match(SET);
				State = 968;
				database_optionspec();
				State = 971;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
				case 1:
					{
					State = 969;
					Match(WITH);
					State = 970;
					termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 976;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 975;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Auto_optionContext auto_option() {
			return GetRuleContext<Auto_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Change_tracking_optionContext change_tracking_option() {
			return GetRuleContext<Change_tracking_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Containment_optionContext containment_option() {
			return GetRuleContext<Containment_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_optionContext cursor_option() {
			return GetRuleContext<Cursor_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return GetRuleContext<Date_correlation_optimization_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Db_encryption_optionContext db_encryption_option() {
			return GetRuleContext<Db_encryption_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Db_state_optionContext db_state_option() {
			return GetRuleContext<Db_state_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Db_update_optionContext db_update_option() {
			return GetRuleContext<Db_update_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Db_user_access_optionContext db_user_access_option() {
			return GetRuleContext<Db_user_access_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delayed_durability_optionContext delayed_durability_option() {
			return GetRuleContext<Delayed_durability_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_access_optionContext external_access_option() {
			return GetRuleContext<External_access_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESTREAM() { return GetToken(tsqlParser.FILESTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Database_filestream_optionContext database_filestream_option() {
			return GetRuleContext<Database_filestream_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HADR_options() { return GetToken(tsqlParser.HADR_options, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return GetRuleContext<Mixed_page_allocation_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameterization_optionContext parameterization_option() {
			return GetRuleContext<Parameterization_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recovery_optionContext recovery_option() {
			return GetRuleContext<Recovery_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Service_broker_optionContext service_broker_option() {
			return GetRuleContext<Service_broker_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Snapshot_optionContext snapshot_option() {
			return GetRuleContext<Snapshot_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_optionContext sql_option() {
			return GetRuleContext<Sql_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_recovery_time_optionContext target_recovery_time_option() {
			return GetRuleContext<Target_recovery_time_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminationContext termination() {
			return GetRuleContext<TerminationContext>(0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_optionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDatabase_optionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDatabase_optionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_optionspec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionspecContext database_optionspec() {
		Database_optionspecContext _localctx = new Database_optionspecContext(Context, State);
		EnterRule(_localctx, 52, RULE_database_optionspec);
		try {
			State = 1000;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 978;
				auto_option();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 979;
				change_tracking_option();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 980;
				containment_option();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 981;
				cursor_option();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 982;
				date_correlation_optimization_option();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 983;
				db_encryption_option();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 984;
				db_state_option();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 985;
				db_update_option();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 986;
				db_user_access_option();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 987;
				delayed_durability_option();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 988;
				external_access_option();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 989;
				Match(FILESTREAM);
				State = 990;
				database_filestream_option();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 991;
				Match(HADR_options);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 992;
				mixed_page_allocation_option();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 993;
				parameterization_option();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 994;
				recovery_option();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 995;
				service_broker_option();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 996;
				snapshot_option();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 997;
				sql_option();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 998;
				target_recovery_time_option();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 999;
				termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auto_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_CLOSE() { return GetToken(tsqlParser.AUTO_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_CREATE_STATISTICS() { return GetToken(tsqlParser.AUTO_CREATE_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(tsqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(tsqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENTAL() { return GetToken(tsqlParser.INCREMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_SHRINK() { return GetToken(tsqlParser.AUTO_SHRINK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_UPDATE_STATISTICS() { return GetToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return GetToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auto_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAuto_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAuto_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuto_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Auto_optionContext auto_option() {
		Auto_optionContext _localctx = new Auto_optionContext(Context, State);
		EnterRule(_localctx, 54, RULE_auto_option);
		int _la;
		try {
			State = 1019;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO_CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1002;
				Match(AUTO_CLOSE);
				State = 1003;
				on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004;
				Match(AUTO_CREATE_STATISTICS);
				State = 1005;
				Match(OFF);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1006;
				Match(ON);
				State = 1011;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INCREMENTAL:
					{
					State = 1007;
					Match(INCREMENTAL);
					State = 1008;
					Match(EQUAL);
					State = 1009;
					Match(ON);
					}
					break;
				case OFF:
					{
					State = 1010;
					Match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1013;
				Match(AUTO_SHRINK);
				State = 1014;
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1015;
				Match(AUTO_UPDATE_STATISTICS);
				State = 1016;
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1017;
				Match(AUTO_UPDATE_STATISTICS_ASYNC);
				State = 1018;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_TRACKING() { return GetToken(tsqlParser.CHANGE_TRACKING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Change_tracking_option_listContext[] change_tracking_option_list() {
			return GetRuleContexts<Change_tracking_option_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return GetRuleContext<Change_tracking_option_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_optionContext change_tracking_option() {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(Context, State);
		EnterRule(_localctx, 56, RULE_change_tracking_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			Match(CHANGE_TRACKING);
			State = 1022;
			Match(EQUAL);
			State = 1038;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OFF:
				{
				State = 1023;
				Match(OFF);
				}
				break;
			case ON:
				{
				State = 1024;
				Match(ON);
				State = 1035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AUTO_CLEANUP || _la==CHANGE_RETENTION) {
					{
					{
					State = 1025;
					change_tracking_option_list();
					State = 1030;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1026;
						Match(COMMA);
						State = 1027;
						change_tracking_option_list();
						}
						}
						State = 1032;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 1037;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tracking_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_CLEANUP() { return GetToken(tsqlParser.AUTO_CLEANUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_RETENTION() { return GetToken(tsqlParser.CHANGE_RETENTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYS() { return GetToken(tsqlParser.DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOURS() { return GetToken(tsqlParser.HOURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(tsqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_tracking_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterChange_tracking_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitChange_tracking_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_tracking_option_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tracking_option_listContext change_tracking_option_list() {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(Context, State);
		EnterRule(_localctx, 58, RULE_change_tracking_option_list);
		int _la;
		try {
			State = 1046;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO_CLEANUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1040;
				Match(AUTO_CLEANUP);
				State = 1041;
				Match(EQUAL);
				State = 1042;
				on_off();
				}
				break;
			case CHANGE_RETENTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1043;
				Match(CHANGE_RETENTION);
				State = 1044;
				Match(EQUAL);
				State = 1045;
				_la = TokenStream.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Containment_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINMENT() { return GetToken(tsqlParser.CONTAINMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(tsqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(tsqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containment_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterContainment_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitContainment_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainment_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Containment_optionContext containment_option() {
		Containment_optionContext _localctx = new Containment_optionContext(Context, State);
		EnterRule(_localctx, 60, RULE_containment_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			Match(CONTAINMENT);
			State = 1049;
			Match(EQUAL);
			State = 1050;
			_la = TokenStream.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_CLOSE_ON_COMMIT() { return GetToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_DEFAULT() { return GetToken(tsqlParser.CURSOR_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(tsqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCursor_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCursor_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionContext cursor_option() {
		Cursor_optionContext _localctx = new Cursor_optionContext(Context, State);
		EnterRule(_localctx, 62, RULE_cursor_option);
		int _la;
		try {
			State = 1056;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1052;
				Match(CURSOR_CLOSE_ON_COMMIT);
				State = 1053;
				on_off();
				}
				break;
			case CURSOR_DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1054;
				Match(CURSOR_DEFAULT);
				State = 1055;
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_correlation_optimization_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_CORRELATION_OPTIMIZATION() { return GetToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_correlation_optimization_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDate_correlation_optimization_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDate_correlation_optimization_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_correlation_optimization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(Context, State);
		EnterRule(_localctx, 64, RULE_date_correlation_optimization_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058;
			Match(DATE_CORRELATION_OPTIMIZATION);
			State = 1059;
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_encryption_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_encryption_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDb_encryption_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDb_encryption_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_encryption_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_encryption_optionContext db_encryption_option() {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(Context, State);
		EnterRule(_localctx, 66, RULE_db_encryption_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			Match(ENCRYPTION);
			State = 1062;
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_state_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(tsqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(tsqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMERGENCY() { return GetToken(tsqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_state_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDb_state_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDb_state_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_state_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_state_optionContext db_state_option() {
		Db_state_optionContext _localctx = new Db_state_optionContext(Context, State);
		EnterRule(_localctx, 68, RULE_db_state_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064;
			_la = TokenStream.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_update_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_WRITE() { return GetToken(tsqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_update_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDb_update_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDb_update_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_update_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_update_optionContext db_update_option() {
		Db_update_optionContext _localctx = new Db_update_optionContext(Context, State);
		EnterRule(_localctx, 70, RULE_db_update_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1066;
			_la = TokenStream.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Db_user_access_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_USER() { return GetToken(tsqlParser.SINGLE_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICTED_USER() { return GetToken(tsqlParser.RESTRICTED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_USER() { return GetToken(tsqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db_user_access_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDb_user_access_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDb_user_access_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb_user_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Db_user_access_optionContext db_user_access_option() {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(Context, State);
		EnterRule(_localctx, 72, RULE_db_user_access_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & 2305851805306716161L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delayed_durability_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_DURABILITY() { return GetToken(tsqlParser.DELAYED_DURABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLED() { return GetToken(tsqlParser.DISABLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOWED() { return GetToken(tsqlParser.ALLOWED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayed_durability_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDelayed_durability_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDelayed_durability_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelayed_durability_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delayed_durability_optionContext delayed_durability_option() {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(Context, State);
		EnterRule(_localctx, 74, RULE_delayed_durability_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			Match(DELAYED_DURABILITY);
			State = 1071;
			Match(EQUAL);
			State = 1072;
			_la = TokenStream.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_access_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DB_CHAINING() { return GetToken(tsqlParser.DB_CHAINING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTWORTHY() { return GetToken(tsqlParser.TRUSTWORTHY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(tsqlParser.DEFAULT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_TRIGGERS() { return GetToken(tsqlParser.NESTED_TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_access_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExternal_access_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExternal_access_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_access_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_access_optionContext external_access_option() {
		External_access_optionContext _localctx = new External_access_optionContext(Context, State);
		EnterRule(_localctx, 76, RULE_external_access_option);
		int _la;
		try {
			State = 1099;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1074;
				Match(DB_CHAINING);
				State = 1075;
				on_off();
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1076;
				Match(TRUSTWORTHY);
				State = 1077;
				on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1078;
				Match(DEFAULT_LANGUAGE);
				State = 1079;
				Match(EQUAL);
				State = 1082;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FORCESEEK:
				case NEXT:
				case NUMERIC:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1080;
					r_id();
					}
					break;
				case STRING:
					{
					State = 1081;
					Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1084;
				Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 1085;
				Match(EQUAL);
				State = 1088;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FORCESEEK:
				case NEXT:
				case NUMERIC:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1086;
					r_id();
					}
					break;
				case STRING:
					{
					State = 1087;
					Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1090;
				Match(NESTED_TRIGGERS);
				State = 1091;
				Match(EQUAL);
				State = 1092;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1093;
				Match(TRANSFORM_NOISE_WORDS);
				State = 1094;
				Match(EQUAL);
				State = 1095;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1096;
				Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 1097;
				Match(EQUAL);
				State = 1098;
				Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mixed_page_allocation_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIXED_PAGE_ALLOCATION() { return GetToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mixed_page_allocation_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterMixed_page_allocation_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitMixed_page_allocation_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMixed_page_allocation_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(Context, State);
		EnterRule(_localctx, 78, RULE_mixed_page_allocation_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101;
			Match(MIXED_PAGE_ALLOCATION);
			State = 1102;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterization_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERIZATION() { return GetToken(tsqlParser.PARAMETERIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterization_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterParameterization_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitParameterization_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterization_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameterization_optionContext parameterization_option() {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(Context, State);
		EnterRule(_localctx, 80, RULE_parameterization_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1104;
			Match(PARAMETERIZATION);
			State = 1105;
			_la = TokenStream.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recovery_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVERY() { return GetToken(tsqlParser.RECOVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(tsqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK_LOGGED() { return GetToken(tsqlParser.BULK_LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TORN_PAGE_DETECTION() { return GetToken(tsqlParser.TORN_PAGE_DETECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_VERIFY() { return GetToken(tsqlParser.PAGE_VERIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(tsqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(tsqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recovery_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRecovery_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRecovery_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecovery_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recovery_optionContext recovery_option() {
		Recovery_optionContext _localctx = new Recovery_optionContext(Context, State);
		EnterRule(_localctx, 82, RULE_recovery_option);
		int _la;
		try {
			State = 1113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECOVERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1107;
				Match(RECOVERY);
				State = 1108;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1109;
				Match(TORN_PAGE_DETECTION);
				State = 1110;
				on_off();
				}
				break;
			case PAGE_VERIFY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1111;
				Match(PAGE_VERIFY);
				State = 1112;
				_la = TokenStream.LA(1);
				if ( !(_la==NONE || _la==CHECKSUM || _la==TORN_PAGE_DETECTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Service_broker_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_BROKER() { return GetToken(tsqlParser.ENABLE_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_BROKER() { return GetToken(tsqlParser.DISABLE_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_BROKER() { return GetToken(tsqlParser.NEW_BROKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_BROKER_CONVERSATIONS() { return GetToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HONOR_BROKER_PRIORITY() { return GetToken(tsqlParser.HONOR_BROKER_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service_broker_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterService_broker_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitService_broker_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitService_broker_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Service_broker_optionContext service_broker_option() {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(Context, State);
		EnterRule(_localctx, 84, RULE_service_broker_option);
		try {
			State = 1121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_BROKER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1115;
				Match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1116;
				Match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1117;
				Match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1118;
				Match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1119;
				Match(HONOR_BROKER_PRIORITY);
				State = 1120;
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Snapshot_optionContext : ParserRuleContext {
		public IToken MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOW_SNAPSHOT_ISOLATION() { return GetToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_COMMITTED_SNAPSHOT() { return GetToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snapshot_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSnapshot_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSnapshot_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnapshot_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Snapshot_optionContext snapshot_option() {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(Context, State);
		EnterRule(_localctx, 86, RULE_snapshot_option);
		int _la;
		try {
			State = 1128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1123;
				Match(ALLOW_SNAPSHOT_ISOLATION);
				State = 1124;
				on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1125;
				Match(READ_COMMITTED_SNAPSHOT);
				State = 1126;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case OFF:
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1127;
				_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
					_localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULL_DEFAULT() { return GetToken(tsqlParser.ANSI_NULL_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULLS() { return GetToken(tsqlParser.ANSI_NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_PADDING() { return GetToken(tsqlParser.ANSI_PADDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_WARNINGS() { return GetToken(tsqlParser.ANSI_WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITHABORT() { return GetToken(tsqlParser.ARITHABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPATIBILITY_LEVEL() { return GetToken(tsqlParser.COMPATIBILITY_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_NULL_YIELDS_NULL() { return GetToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_ROUNDABORT() { return GetToken(tsqlParser.NUMERIC_ROUNDABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(tsqlParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE_TRIGGERS() { return GetToken(tsqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSql_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSql_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_optionContext sql_option() {
		Sql_optionContext _localctx = new Sql_optionContext(Context, State);
		EnterRule(_localctx, 88, RULE_sql_option);
		try {
			State = 1151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANSI_NULL_DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1130;
				Match(ANSI_NULL_DEFAULT);
				State = 1131;
				on_off();
				}
				break;
			case ANSI_NULLS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1132;
				Match(ANSI_NULLS);
				State = 1133;
				on_off();
				}
				break;
			case ANSI_PADDING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1134;
				Match(ANSI_PADDING);
				State = 1135;
				on_off();
				}
				break;
			case ANSI_WARNINGS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1136;
				Match(ANSI_WARNINGS);
				State = 1137;
				on_off();
				}
				break;
			case ARITHABORT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1138;
				Match(ARITHABORT);
				State = 1139;
				on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1140;
				Match(COMPATIBILITY_LEVEL);
				State = 1141;
				Match(EQUAL);
				State = 1142;
				Match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1143;
				Match(CONCAT_NULL_YIELDS_NULL);
				State = 1144;
				on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1145;
				Match(NUMERIC_ROUNDABORT);
				State = 1146;
				on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1147;
				Match(QUOTED_IDENTIFIER);
				State = 1148;
				on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1149;
				Match(RECURSIVE_TRIGGERS);
				State = 1150;
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_recovery_time_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET_RECOVERY_TIME() { return GetToken(tsqlParser.TARGET_RECOVERY_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(tsqlParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(tsqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_recovery_time_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTarget_recovery_time_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTarget_recovery_time_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget_recovery_time_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target_recovery_time_optionContext target_recovery_time_option() {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(Context, State);
		EnterRule(_localctx, 90, RULE_target_recovery_time_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153;
			Match(TARGET_RECOVERY_TIME);
			State = 1154;
			Match(EQUAL);
			State = 1155;
			Match(DECIMAL);
			State = 1156;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminationContext : ParserRuleContext {
		public IToken seconds;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(tsqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(tsqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(tsqlParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT() { return GetToken(tsqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTermination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTermination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminationContext termination() {
		TerminationContext _localctx = new TerminationContext(Context, State);
		EnterRule(_localctx, 92, RULE_termination);
		try {
			State = 1164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1158;
				Match(ROLLBACK);
				State = 1159;
				Match(AFTER);
				State = 1160;
				_localctx.seconds = Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1161;
				Match(ROLLBACK);
				State = 1162;
				Match(IMMEDIATE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1163;
				Match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public R_idContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(tsqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(Context, State);
		EnterRule(_localctx, 94, RULE_drop_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			Match(DROP);
			State = 1167;
			Match(INDEX);
			State = 1170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1168;
				Match(IF);
				State = 1169;
				Match(EXISTS);
				}
			}

			State = 1172;
			_localctx.name = r_id();
			State = 1175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 1173;
				Match(ON);
				State = 1174;
				table_name();
				}
			}

			State = 1178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 1177;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(tsqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 96, RULE_drop_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			Match(DROP);
			State = 1181;
			Match(PROCEDURE);
			State = 1184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1182;
				Match(IF);
				State = 1183;
				Match(EXISTS);
				}
			}

			State = 1186;
			func_proc_name();
			State = 1188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1187;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public R_idContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(tsqlParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(tsqlParser.DOT, 0); }
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(Context, State);
		EnterRule(_localctx, 98, RULE_drop_statistics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			Match(DROP);
			State = 1191;
			Match(STATISTICS);
			State = 1195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 1192;
				table_name();
				State = 1193;
				Match(DOT);
				}
				break;
			}
			State = 1197;
			_localctx.name = r_id();
			State = 1198;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 100, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1200;
			Match(DROP);
			State = 1201;
			Match(TABLE);
			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1202;
				Match(IF);
				State = 1203;
				Match(EXISTS);
				}
			}

			State = 1206;
			table_name();
			State = 1208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1207;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(tsqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext[] simple_name() {
			return GetRuleContexts<Simple_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name(int i) {
			return GetRuleContext<Simple_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(Context, State);
		EnterRule(_localctx, 102, RULE_drop_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210;
			Match(DROP);
			State = 1211;
			Match(VIEW);
			State = 1214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1212;
				Match(IF);
				State = 1213;
				Match(EXISTS);
				}
			}

			State = 1216;
			simple_name();
			State = 1221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1217;
				Match(COMMA);
				State = 1218;
				simple_name();
				}
				}
				State = 1223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 1224;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(Context, State);
		EnterRule(_localctx, 104, RULE_create_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1227;
			Match(CREATE);
			State = 1228;
			Match(TYPE);
			State = 1229;
			_localctx.name = simple_name();
			State = 1230;
			Match(FROM);
			State = 1231;
			data_type();
			State = 1232;
			default_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public Simple_nameContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(Context, State);
		EnterRule(_localctx, 106, RULE_drop_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234;
			Match(DROP);
			State = 1235;
			Match(TYPE);
			State = 1238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1236;
				Match(IF);
				State = 1237;
				Match(EXISTS);
				}
			}

			State = 1240;
			_localctx.name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(Context, State);
		EnterRule(_localctx, 108, RULE_rowset_function_limited);
		try {
			State = 1244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENQUERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1242;
				openquery();
				}
				break;
			case OPENDATASOURCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1243;
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public R_idContext linked_server;
		public IToken query;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENQUERY() { return GetToken(tsqlParser.OPENQUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(tsqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(Context, State);
		EnterRule(_localctx, 110, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246;
			Match(OPENQUERY);
			State = 1247;
			Match(LR_BRACKET);
			State = 1248;
			_localctx.linked_server = r_id();
			State = 1249;
			Match(COMMA);
			State = 1250;
			_localctx.query = Match(STRING);
			State = 1251;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public R_idContext database;
		public R_idContext scheme;
		public R_idContext table;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENDATASOURCE() { return GetToken(tsqlParser.OPENDATASOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(tsqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(tsqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(tsqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(tsqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(tsqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpendatasource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(Context, State);
		EnterRule(_localctx, 112, RULE_opendatasource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			Match(OPENDATASOURCE);
			State = 1254;
			Match(LR_BRACKET);
			State = 1255;
			_localctx.provider = Match(STRING);
			State = 1256;
			Match(COMMA);
			State = 1257;
			_localctx.init = Match(STRING);
			State = 1258;
			Match(RR_BRACKET);
			State = 1259;
			Match(DOT);
			State = 1261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1108101562369L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9220850245999262719L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -8070459558675465653L) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & -6413215653674627739L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 41918743507263L) != 0)) {
				{
				State = 1260;
				_localctx.database = r_id();
				}
			}

			State = 1263;
			Match(DOT);
			State = 1265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1108101562369L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9220850245999262719L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -8070459558675465653L) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & -6413215653674627739L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 41918743507263L) != 0)) {
				{
				State = 1264;
				_localctx.scheme = r_id();
				}
			}

			State = 1267;
			Match(DOT);
			{
			State = 1268;
			_localctx.table = r_id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(tsqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(Context, State);
		EnterRule(_localctx, 114, RULE_declare_statement);
		int _la;
		try {
			State = 1291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1270;
				Match(DECLARE);
				State = 1271;
				Match(LOCAL_ID);
				State = 1273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1272;
					Match(AS);
					}
				}

				State = 1275;
				table_type_definition();
				State = 1277;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
				case 1:
					{
					State = 1276;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1279;
				Match(DECLARE);
				State = 1280;
				declare_local();
				State = 1285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1281;
					Match(COMMA);
					State = 1282;
					declare_local();
					}
					}
					State = 1287;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 1288;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(tsqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(tsqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(tsqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(Context, State);
		EnterRule(_localctx, 116, RULE_cursor_statement);
		try {
			State = 1319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1293;
				Match(CLOSE);
				State = 1295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
				case 1:
					{
					State = 1294;
					Match(GLOBAL);
					}
					break;
				}
				State = 1297;
				cursor_name();
				State = 1299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
				case 1:
					{
					State = 1298;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1301;
				Match(DEALLOCATE);
				State = 1303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
				case 1:
					{
					State = 1302;
					Match(GLOBAL);
					}
					break;
				}
				State = 1305;
				cursor_name();
				State = 1307;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
				case 1:
					{
					State = 1306;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1309;
				declare_cursor();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1310;
				fetch_cursor();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1311;
				Match(OPEN);
				State = 1313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
				case 1:
					{
					State = 1312;
					Match(GLOBAL);
					}
					break;
				}
				State = 1315;
				cursor_name();
				State = 1317;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
				case 1:
					{
					State = 1316;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		public IToken return_status;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(tsqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(tsqlParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(tsqlParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(tsqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(tsqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(Context, State);
		EnterRule(_localctx, 118, RULE_execute_statement);
		int _la;
		try {
			State = 1362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1321;
				Match(EXECUTE);
				State = 1324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_ID) {
					{
					State = 1322;
					_localctx.return_status = Match(LOCAL_ID);
					State = 1323;
					Match(EQUAL);
					}
				}

				State = 1326;
				func_proc_name();
				State = 1335;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1327;
					execute_statement_arg();
					State = 1332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1328;
						Match(COMMA);
						State = 1329;
						execute_statement_arg();
						}
						}
						State = 1334;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 1338;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
				case 1:
					{
					State = 1337;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1340;
				Match(EXECUTE);
				State = 1341;
				Match(LR_BRACKET);
				State = 1342;
				execute_var_string();
				State = 1347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 1343;
					Match(PLUS);
					State = 1344;
					execute_var_string();
					}
					}
					State = 1349;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1350;
				Match(RR_BRACKET);
				State = 1357;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
				case 1:
					{
					State = 1352;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1351;
						Match(AS);
						}
					}

					State = 1354;
					_la = TokenStream.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1355;
					Match(EQUAL);
					State = 1356;
					Match(STRING);
					}
					break;
				}
				State = 1360;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
				case 1:
					{
					State = 1359;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		public IToken parameter;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(tsqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(Context, State);
		EnterRule(_localctx, 120, RULE_execute_statement_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				State = 1364;
				_localctx.parameter = Match(LOCAL_ID);
				State = 1365;
				Match(EQUAL);
				}
				break;
			}
			State = 1377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				State = 1370;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 1368;
					constant_LOCAL_ID();
					}
					break;
				case FORCESEEK:
				case NEXT:
				case NUMERIC:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1369;
					r_id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1373;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
				case 1:
					{
					State = 1372;
					_la = TokenStream.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case DEFAULT:
				{
				State = 1375;
				Match(DEFAULT);
				}
				break;
			case NULL:
				{
				State = 1376;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_var_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(Context, State);
		EnterRule(_localctx, 122, RULE_execute_var_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Table_nameContext on_id;
		public R_idContext to_principal;
		public R_idContext as_principal;
		[System.Diagnostics.DebuggerNonUserCode] public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(tsqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(tsqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(tsqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grant_permissionContext grant_permission() {
			return GetRuleContext<Grant_permissionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(tsqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(tsqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERT() { return GetToken(tsqlParser.REVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COOKIE() { return GetToken(tsqlParser.COOKIE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecurity_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(Context, State);
		EnterRule(_localctx, 124, RULE_security_statement);
		int _la;
		try {
			State = 1429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1381;
				execute_clause();
				State = 1383;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
				case 1:
					{
					State = 1382;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1385;
				Match(GRANT);
				State = 1397;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL:
					{
					State = 1386;
					Match(ALL);
					State = 1388;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PRIVILEGES) {
						{
						State = 1387;
						Match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					State = 1390;
					grant_permission();
					State = 1395;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LR_BRACKET) {
						{
						State = 1391;
						Match(LR_BRACKET);
						State = 1392;
						column_name_list();
						State = 1393;
						Match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 1399;
					Match(ON);
					State = 1400;
					_localctx.on_id = table_name();
					}
				}

				State = 1403;
				Match(TO);
				{
				State = 1404;
				_localctx.to_principal = r_id();
				}
				State = 1408;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1405;
					Match(WITH);
					State = 1406;
					Match(GRANT);
					State = 1407;
					Match(OPTION);
					}
					break;
				}
				State = 1412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1410;
					Match(AS);
					State = 1411;
					_localctx.as_principal = r_id();
					}
				}

				State = 1415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1414;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case REVERT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1417;
				Match(REVERT);
				State = 1424;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1418;
					Match(LR_BRACKET);
					State = 1419;
					Match(WITH);
					State = 1420;
					Match(COOKIE);
					State = 1421;
					Match(EQUAL);
					State = 1422;
					Match(LOCAL_ID);
					State = 1423;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 1427;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1426;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_permissionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(tsqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(tsqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAKE() { return GetToken(tsqlParser.TAKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTROL() { return GetToken(tsqlParser.CONTROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOWPLAN() { return GetToken(tsqlParser.SHOWPLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPERSONATE() { return GetToken(tsqlParser.IMPERSONATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(tsqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(tsqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(tsqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(tsqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(tsqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_permission; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGrant_permission(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGrant_permission(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_permission(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_permissionContext grant_permission() {
		Grant_permissionContext _localctx = new Grant_permissionContext(Context, State);
		EnterRule(_localctx, 126, RULE_grant_permission);
		int _la;
		try {
			State = 1457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1431;
				Match(EXECUTE);
				}
				break;
			case VIEW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1432;
				Match(VIEW);
				State = 1433;
				r_id();
				}
				break;
			case TAKE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1434;
				Match(TAKE);
				State = 1435;
				r_id();
				}
				break;
			case CONTROL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1436;
				Match(CONTROL);
				State = 1438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1108101562369L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9220850245999262719L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -8070459558675465653L) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & -6413215653674627739L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 41918743507263L) != 0)) {
					{
					State = 1437;
					r_id();
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1440;
				Match(CREATE);
				State = 1441;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SHOWPLAN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1442;
				Match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1443;
				Match(IMPERSONATE);
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1444;
				Match(SELECT);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1445;
				Match(REFERENCES);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1446;
				Match(INSERT);
				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1447;
				Match(ALTER);
				State = 1455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY || _la==DATABASE || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1108101562369L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9220850245999262719L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -8070459558675465653L) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & -6413215653674627739L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 41918743507263L) != 0)) {
					{
					State = 1449;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ANY) {
						{
						State = 1448;
						Match(ANY);
						}
					}

					State = 1453;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FORCESEEK:
					case NEXT:
					case NUMERIC:
					case VALUE:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DATE:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case IO:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case ZONE:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 1451;
						r_id();
						}
						break;
					case DATABASE:
						{
						State = 1452;
						Match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public R_idContext member_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(tsqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(tsqlParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(tsqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(tsqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 128, RULE_set_statement);
		int _la;
		try {
			State = 1498;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1459;
				Match(SET);
				State = 1460;
				Match(LOCAL_ID);
				State = 1463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 1461;
					Match(DOT);
					State = 1462;
					_localctx.member_name = r_id();
					}
				}

				State = 1465;
				Match(EQUAL);
				State = 1466;
				expression(0);
				State = 1468;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 1467;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1470;
				Match(SET);
				State = 1471;
				Match(LOCAL_ID);
				State = 1472;
				assignment_operator();
				State = 1473;
				expression(0);
				State = 1475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
				case 1:
					{
					State = 1474;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1477;
				Match(SET);
				State = 1478;
				Match(LOCAL_ID);
				State = 1479;
				Match(EQUAL);
				State = 1480;
				Match(CURSOR);
				State = 1481;
				declare_set_cursor_common();
				State = 1492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 1482;
					Match(FOR);
					State = 1490;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case READ:
						{
						State = 1483;
						Match(READ);
						State = 1484;
						Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 1485;
						Match(UPDATE);
						State = 1488;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OF) {
							{
							State = 1486;
							Match(OF);
							State = 1487;
							column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 1495;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
				case 1:
					{
					State = 1494;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1497;
				set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(tsqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTRIBUTED() { return GetToken(tsqlParser.DISTRIBUTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAN() { return GetToken(tsqlParser.TRAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(tsqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MARK() { return GetToken(tsqlParser.MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(tsqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_DURABILITY() { return GetToken(tsqlParser.DELAYED_DURABILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(tsqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(tsqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(tsqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(Context, State);
		EnterRule(_localctx, 130, RULE_transaction_statement);
		int _la;
		try {
			State = 1577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1500;
				Match(BEGIN);
				State = 1501;
				Match(DISTRIBUTED);
				State = 1502;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1505;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
				case 1:
					{
					State = 1503;
					r_id();
					}
					break;
				case 2:
					{
					State = 1504;
					Match(LOCAL_ID);
					}
					break;
				}
				State = 1508;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
				case 1:
					{
					State = 1507;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1510;
				Match(BEGIN);
				State = 1511;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1521;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
				case 1:
					{
					State = 1514;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FORCESEEK:
					case NEXT:
					case NUMERIC:
					case VALUE:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DATE:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case IO:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case ZONE:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 1512;
						r_id();
						}
						break;
					case LOCAL_ID:
						{
						State = 1513;
						Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1519;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
					case 1:
						{
						State = 1516;
						Match(WITH);
						State = 1517;
						Match(MARK);
						State = 1518;
						Match(STRING);
						}
						break;
					}
					}
					break;
				}
				State = 1524;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
				case 1:
					{
					State = 1523;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1526;
				Match(COMMIT);
				State = 1527;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1540;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
				case 1:
					{
					State = 1530;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FORCESEEK:
					case NEXT:
					case NUMERIC:
					case VALUE:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DATE:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case IO:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case ZONE:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 1528;
						r_id();
						}
						break;
					case LOCAL_ID:
						{
						State = 1529;
						Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1538;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
					case 1:
						{
						State = 1532;
						Match(WITH);
						State = 1533;
						Match(LR_BRACKET);
						State = 1534;
						Match(DELAYED_DURABILITY);
						State = 1535;
						Match(EQUAL);
						State = 1536;
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1537;
						Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 1543;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
				case 1:
					{
					State = 1542;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1545;
				Match(COMMIT);
				State = 1547;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
				case 1:
					{
					State = 1546;
					Match(WORK);
					}
					break;
				}
				State = 1550;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
				case 1:
					{
					State = 1549;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1552;
				Match(ROLLBACK);
				State = 1553;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1556;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
				case 1:
					{
					State = 1554;
					r_id();
					}
					break;
				case 2:
					{
					State = 1555;
					Match(LOCAL_ID);
					}
					break;
				}
				State = 1559;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
				case 1:
					{
					State = 1558;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1561;
				Match(ROLLBACK);
				State = 1563;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
				case 1:
					{
					State = 1562;
					Match(WORK);
					}
					break;
				}
				State = 1566;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
				case 1:
					{
					State = 1565;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1568;
				Match(SAVE);
				State = 1569;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1572;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
				case 1:
					{
					State = 1570;
					r_id();
					}
					break;
				case 2:
					{
					State = 1571;
					Match(LOCAL_ID);
					}
					break;
				}
				State = 1575;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
				case 1:
					{
					State = 1574;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(tsqlParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(Context, State);
		EnterRule(_localctx, 132, RULE_go_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1579;
			Match(GO);
			State = 1581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECIMAL) {
				{
				State = 1580;
				_localctx.count = Match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public R_idContext database;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(tsqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(Context, State);
		EnterRule(_localctx, 134, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1583;
			Match(USE);
			State = 1584;
			_localctx.database = r_id();
			State = 1586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				{
				State = 1585;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(tsqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLER() { return GetToken(tsqlParser.CALLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(tsqlParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(tsqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(Context, State);
		EnterRule(_localctx, 136, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1588;
			Match(EXECUTE);
			State = 1589;
			Match(AS);
			State = 1590;
			_localctx.clause = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				_localctx.clause = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_local(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(Context, State);
		EnterRule(_localctx, 138, RULE_declare_local);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592;
			Match(LOCAL_ID);
			State = 1594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1593;
				Match(AS);
				}
			}

			State = 1596;
			data_type();
			State = 1599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 1597;
				Match(EQUAL);
				State = 1598;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintsContext column_def_table_constraints() {
			return GetRuleContext<Column_def_table_constraintsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(Context, State);
		EnterRule(_localctx, 140, RULE_table_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1601;
			Match(TABLE);
			State = 1602;
			Match(LR_BRACKET);
			State = 1603;
			column_def_table_constraints();
			State = 1604;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintsContext column_def_table_constraints() {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(Context, State);
		EnterRule(_localctx, 142, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606;
			column_def_table_constraint();
			State = 1613;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,226,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1608;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1607;
						Match(COMMA);
						}
					}

					State = 1610;
					column_def_table_constraint();
					}
					} 
				}
				State = 1615;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,226,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(Context, State);
		EnterRule(_localctx, 144, RULE_column_def_table_constraint);
		try {
			State = 1618;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1616;
				column_definition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1617;
				table_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public R_idContext constraint;
		public IToken seed;
		public IToken increment;
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWGUIDCOL() { return GetToken(tsqlParser.ROWGUIDCOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(tsqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(tsqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 146, RULE_column_definition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1620;
			r_id();
			State = 1624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE:
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case BIGINT:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DATETIME2:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TINYINT:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 1621;
				data_type();
				}
				break;
			case AS:
				{
				State = 1622;
				Match(AS);
				State = 1623;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 1626;
				Match(COLLATE);
				State = 1627;
				r_id();
				}
			}

			State = 1631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 1630;
				null_notnull();
				}
				break;
			}
			State = 1656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				{
				State = 1635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1633;
					Match(CONSTRAINT);
					State = 1634;
					_localctx.constraint = r_id();
					}
				}

				State = 1637;
				Match(DEFAULT);
				State = 1638;
				constant_expression();
				State = 1641;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
				case 1:
					{
					State = 1639;
					Match(WITH);
					State = 1640;
					Match(VALUES);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1643;
				Match(IDENTITY);
				State = 1649;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
				case 1:
					{
					State = 1644;
					Match(LR_BRACKET);
					State = 1645;
					_localctx.seed = Match(DECIMAL);
					State = 1646;
					Match(COMMA);
					State = 1647;
					_localctx.increment = Match(DECIMAL);
					State = 1648;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 1654;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
				case 1:
					{
					State = 1651;
					Match(NOT);
					State = 1652;
					Match(FOR);
					State = 1653;
					Match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			State = 1659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				State = 1658;
				Match(ROWGUIDCOL);
				}
			}

			State = 1664;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1661;
					column_constraint();
					}
					} 
				}
				State = 1666;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(tsqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(tsqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(tsqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 148, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 1667;
				Match(CONSTRAINT);
				State = 1668;
				r_id();
				}
			}

			State = 1672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT || _la==NULL) {
				{
				State = 1671;
				null_notnull();
				}
			}

			State = 1695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 1677;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 1674;
					Match(PRIMARY);
					State = 1675;
					Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 1676;
					Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1679;
					clustered();
					}
				}

				State = 1683;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
				case 1:
					{
					State = 1682;
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				State = 1685;
				Match(CHECK);
				State = 1689;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1686;
					Match(NOT);
					State = 1687;
					Match(FOR);
					State = 1688;
					Match(REPLICATION);
					}
				}

				State = 1691;
				Match(LR_BRACKET);
				State = 1692;
				search_condition(0);
				State = 1693;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(tsqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(tsqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(tsqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(tsqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(tsqlParser.DESC, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 150, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 1697;
				Match(CONSTRAINT);
				State = 1698;
				r_id();
				}
			}

			State = 1732;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 1704;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 1701;
					Match(PRIMARY);
					State = 1702;
					Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 1703;
					Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1706;
					clustered();
					}
				}

				State = 1709;
				Match(LR_BRACKET);
				State = 1710;
				column_name_list();
				State = 1712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 1711;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1714;
				Match(RR_BRACKET);
				State = 1716;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
				case 1:
					{
					State = 1715;
					index_options();
					}
					break;
				}
				State = 1720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 1718;
					Match(ON);
					State = 1719;
					r_id();
					}
				}

				}
				break;
			case CHECK:
				{
				State = 1722;
				Match(CHECK);
				State = 1726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1723;
					Match(NOT);
					State = 1724;
					Match(FOR);
					State = 1725;
					Match(REPLICATION);
					}
				}

				State = 1728;
				Match(LR_BRACKET);
				State = 1729;
				search_condition(0);
				State = 1730;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(Context, State);
		EnterRule(_localctx, 152, RULE_index_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1734;
			Match(WITH);
			State = 1735;
			Match(LR_BRACKET);
			State = 1736;
			index_option();
			State = 1741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1737;
				Match(COMMA);
				State = 1738;
				index_option();
				}
				}
				State = 1743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1744;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionContext index_option() {
		Index_optionContext _localctx = new Index_optionContext(Context, State);
		EnterRule(_localctx, 154, RULE_index_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746;
			simple_id();
			State = 1747;
			Match(EQUAL);
			State = 1751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case ID:
				{
				State = 1748;
				simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				State = 1749;
				on_off();
				}
				break;
			case DECIMAL:
				{
				State = 1750;
				Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(tsqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(tsqlParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(tsqlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(tsqlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(tsqlParser.INSENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(tsqlParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(tsqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(tsqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(Context, State);
		EnterRule(_localctx, 156, RULE_declare_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1753;
			Match(DECLARE);
			State = 1754;
			cursor_name();
			State = 1786;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				{
				State = 1755;
				Match(CURSOR);
				State = 1765;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
				case 1:
					{
					State = 1756;
					declare_set_cursor_common();
					State = 1763;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR) {
						{
						State = 1757;
						Match(FOR);
						State = 1758;
						Match(UPDATE);
						State = 1761;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OF) {
							{
							State = 1759;
							Match(OF);
							State = 1760;
							column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INSENSITIVE) {
					{
					State = 1767;
					Match(INSENSITIVE);
					}
				}

				State = 1771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SCROLL) {
					{
					State = 1770;
					Match(SCROLL);
					}
				}

				State = 1773;
				Match(CURSOR);
				State = 1774;
				Match(FOR);
				State = 1775;
				select_statement();
				State = 1784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 1776;
					Match(FOR);
					State = 1782;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case READ:
						{
						State = 1777;
						Match(READ);
						State = 1778;
						Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 1779;
						Match(UPDATE);
						}
						break;
					case OF:
						{
						{
						State = 1780;
						Match(OF);
						State = 1781;
						column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			State = 1789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				{
				State = 1788;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_WARNING() { return GetToken(tsqlParser.TYPE_WARNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(tsqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_ONLY() { return GetToken(tsqlParser.FORWARD_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(tsqlParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(tsqlParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYSET() { return GetToken(tsqlParser.KEYSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(tsqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_FORWARD() { return GetToken(tsqlParser.FAST_FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL_LOCKS() { return GetToken(tsqlParser.SCROLL_LOCKS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMISTIC() { return GetToken(tsqlParser.OPTIMISTIC, 0); }
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(Context, State);
		EnterRule(_localctx, 158, RULE_declare_set_cursor_common);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==LOCAL) {
				{
				State = 1791;
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORWARD_ONLY || _la==SCROLL) {
				{
				State = 1794;
				_la = TokenStream.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & 1099511627905L) != 0) || _la==STATIC) {
				{
				State = 1797;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & 1099511627905L) != 0) || _la==STATIC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 341)) & ~0x3f) == 0 && ((1L << (_la - 341)) & 274878431233L) != 0)) {
				{
				State = 1800;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 341)) & ~0x3f) == 0 && ((1L << (_la - 341)) & 274878431233L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE_WARNING) {
				{
				State = 1803;
				Match(TYPE_WARNING);
				}
			}

			State = 1806;
			Match(FOR);
			State = 1807;
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(tsqlParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(tsqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(tsqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(tsqlParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(tsqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(tsqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE() { return GetToken(tsqlParser.ABSOLUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE() { return GetToken(tsqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(Context, State);
		EnterRule(_localctx, 160, RULE_fetch_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1809;
			Match(FETCH);
			State = 1819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 1816;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NEXT:
					{
					State = 1810;
					Match(NEXT);
					}
					break;
				case PRIOR:
					{
					State = 1811;
					Match(PRIOR);
					}
					break;
				case FIRST:
					{
					State = 1812;
					Match(FIRST);
					}
					break;
				case LAST:
					{
					State = 1813;
					Match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					State = 1814;
					_la = TokenStream.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1815;
					expression(0);
					}
					break;
				case FROM:
					break;
				default:
					break;
				}
				State = 1818;
				Match(FROM);
				}
				break;
			}
			State = 1822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				{
				State = 1821;
				Match(GLOBAL);
				}
				break;
			}
			State = 1824;
			cursor_name();
			State = 1834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 1825;
				Match(INTO);
				State = 1826;
				Match(LOCAL_ID);
				State = 1831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1827;
					Match(COMMA);
					State = 1828;
					Match(LOCAL_ID);
					}
					}
					State = 1833;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				{
				State = 1836;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		public R_idContext key;
		public R_idContext value;
		public IToken set_type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return GetRuleContext<Constant_LOCAL_IDContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(tsqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(tsqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(tsqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(tsqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(tsqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(tsqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(tsqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(tsqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(tsqlParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_INSERT() { return GetToken(tsqlParser.IDENTITY_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_NULLS() { return GetToken(tsqlParser.ANSI_NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(tsqlParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSI_PADDING() { return GetToken(tsqlParser.ANSI_PADDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(tsqlParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(tsqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(tsqlParser.IO, 0); }
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_special(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(Context, State);
		EnterRule(_localctx, 162, RULE_set_special);
		int _la;
		try {
			State = 1886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1839;
				Match(SET);
				State = 1840;
				_localctx.key = r_id();
				State = 1844;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FORCESEEK:
				case NEXT:
				case NUMERIC:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1841;
					_localctx.value = r_id();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 1842;
					constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					State = 1843;
					on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1847;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
				case 1:
					{
					State = 1846;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1849;
				Match(SET);
				State = 1850;
				_localctx.set_type = Match(TRANSACTION);
				State = 1851;
				Match(ISOLATION);
				State = 1852;
				Match(LEVEL);
				State = 1861;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
				case 1:
					{
					State = 1853;
					Match(READ);
					State = 1854;
					Match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					State = 1855;
					Match(READ);
					State = 1856;
					Match(COMMITTED);
					}
					break;
				case 3:
					{
					State = 1857;
					Match(REPEATABLE);
					State = 1858;
					Match(READ);
					}
					break;
				case 4:
					{
					State = 1859;
					Match(SNAPSHOT);
					}
					break;
				case 5:
					{
					State = 1860;
					Match(SERIALIZABLE);
					}
					break;
				}
				State = 1864;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
				case 1:
					{
					State = 1863;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1866;
				Match(SET);
				State = 1867;
				_localctx.set_type = Match(IDENTITY_INSERT);
				State = 1868;
				table_name();
				State = 1869;
				on_off();
				State = 1871;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
				case 1:
					{
					State = 1870;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1873;
				Match(SET);
				State = 1874;
				_localctx.set_type = Match(ANSI_NULLS);
				State = 1875;
				on_off();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1876;
				Match(SET);
				State = 1877;
				_localctx.set_type = Match(QUOTED_IDENTIFIER);
				State = 1878;
				on_off();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1879;
				Match(SET);
				State = 1880;
				_localctx.set_type = Match(ANSI_PADDING);
				State = 1881;
				on_off();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1882;
				Match(SET);
				State = 1883;
				_localctx.set_type = Match(STATISTICS);
				State = 1884;
				_la = TokenStream.LA(1);
				if ( !(_la==IO || _la==TIME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1885;
				on_off();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_LOCAL_IDContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_LOCAL_ID; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterConstant_LOCAL_ID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitConstant_LOCAL_ID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_LOCAL_ID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_LOCAL_IDContext constant_LOCAL_ID() {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(Context, State);
		EnterRule(_localctx, 164, RULE_constant_LOCAL_ID);
		try {
			State = 1890;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1888;
				constant();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1889;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Binary_operator_expressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(tsqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(tsqlParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(tsqlParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(tsqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(tsqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(tsqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(tsqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(tsqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public Binary_operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBinary_operator_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBinary_operator_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Percentile_cont_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Percentile_contContext percentile_cont() {
			return GetRuleContext<Percentile_contContext>(0);
		}
		public Percentile_cont_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPercentile_cont_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPercentile_cont_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPercentile_cont_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Primitive_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Primitive_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bracket_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Bracket_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unary_operator_expressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT() { return GetToken(tsqlParser.BIT_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(tsqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(tsqlParser.MINUS, 0); }
		public Unary_operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Function_call_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		public Function_call_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunction_call_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunction_call_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Conversion_expressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(tsqlParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(tsqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(tsqlParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Conversion_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterConversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitConversion_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Case_expressionContext : ExpressionContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(tsqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(tsqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(tsqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_search_condition_sectionContext[] switch_search_condition_section() {
			return GetRuleContexts<Switch_search_condition_sectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return GetRuleContext<Switch_search_condition_sectionContext>(i);
		}
		public Case_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Column_ref_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Column_ref_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_ref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_ref_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_ref_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class String_agg_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_aggContext string_agg() {
			return GetRuleContext<String_aggContext>(0);
		}
		public String_agg_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterString_agg_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitString_agg_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_agg_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subquery_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Subquery_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSubquery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSubquery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Over_clause_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Over_clause_expressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOver_clause_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOver_clause_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 166;
		EnterRecursionRule(_localctx, 166, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1893;
				Match(DEFAULT);
				}
				break;
			case 2:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1894;
				Match(LOCAL_ID);
				}
				break;
			case 3:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1895;
				Match(NULL);
				}
				break;
			case 4:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1896;
				constant();
				}
				break;
			case 5:
				{
				_localctx = new Function_call_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1897;
				function_call();
				}
				break;
			case 6:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1898;
				null_notnull();
				}
				break;
			case 7:
				{
				_localctx = new Case_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1899;
				Match(CASE);
				State = 1900;
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				State = 1902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1901;
					switch_section();
					}
					}
					State = 1904;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 1908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 1906;
					Match(ELSE);
					State = 1907;
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				State = 1910;
				Match(END);
				}
				break;
			case 8:
				{
				_localctx = new Case_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1912;
				Match(CASE);
				State = 1914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1913;
					switch_search_condition_section();
					}
					}
					State = 1916;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 1920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 1918;
					Match(ELSE);
					State = 1919;
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				State = 1922;
				Match(END);
				}
				break;
			case 9:
				{
				_localctx = new Column_ref_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1924;
				full_column_name();
				}
				break;
			case 10:
				{
				_localctx = new Bracket_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1925;
				Match(LR_BRACKET);
				State = 1926;
				expression(0);
				State = 1927;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new Subquery_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1929;
				Match(LR_BRACKET);
				State = 1930;
				subquery();
				State = 1931;
				Match(RR_BRACKET);
				}
				break;
			case 12:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1933;
				((Unary_operator_expressionContext)_localctx).op = Match(BIT_NOT);
				State = 1934;
				expression(8);
				}
				break;
			case 13:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1935;
				((Unary_operator_expressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1936;
				expression(6);
				}
				break;
			case 14:
				{
				_localctx = new Over_clause_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1937;
				over_clause();
				}
				break;
			case 15:
				{
				_localctx = new Percentile_cont_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1938;
				percentile_cont();
				}
				break;
			case 16:
				{
				_localctx = new String_agg_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1939;
				string_agg();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1962;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,288,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1960;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
					case 1:
						{
						_localctx = new Conversion_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Conversion_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1942;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1943;
						Match(AT);
						State = 1944;
						Match(TIME);
						State = 1945;
						Match(ZONE);
						State = 1946;
						((Conversion_expressionContext)_localctx).right = expression(15);
						}
						break;
					case 2:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Binary_operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1947;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1948;
						((Binary_operator_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 461)) & ~0x3f) == 0 && ((1L << (_la - 461)) & 7L) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1949;
						((Binary_operator_expressionContext)_localctx).right = expression(8);
						}
						break;
					case 3:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Binary_operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1950;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1951;
						((Binary_operator_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & 59L) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1952;
						((Binary_operator_expressionContext)_localctx).right = expression(6);
						}
						break;
					case 4:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Binary_operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1953;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1954;
						comparison_operator();
						State = 1955;
						((Binary_operator_expressionContext)_localctx).right = expression(5);
						}
						break;
					case 5:
						{
						_localctx = new Function_call_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1957;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1958;
						Match(COLLATE);
						State = 1959;
						r_id();
						}
						break;
					}
					} 
				}
				State = 1964;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,288,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 168, RULE_constant_expression);
		try {
			State = 1973;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1965;
				Match(NULL);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1966;
				constant();
				}
				break;
			case COALESCE:
			case CONVERT:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case FORCESEEK:
			case IDENTITY:
			case IIF:
			case LEFT:
			case NEXT:
			case NULLIF:
			case NUMERIC:
			case RIGHT:
			case SESSION_USER:
			case SYSTEM_USER:
			case TRY_CAST:
			case TRY_CONVERT:
			case TRY_PARSE:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case BINARY_CHECKSUM:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DATETIMEOFFSETFROMPARTS:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARSE:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case STRING_SPLIT:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1967;
				function_call();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1968;
				Match(LOCAL_ID);
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1969;
				Match(LR_BRACKET);
				State = 1970;
				constant_expression();
				State = 1971;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 170, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975;
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(tsqlParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(Context, State);
		EnterRule(_localctx, 172, RULE_with_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1977;
			Match(WITH);
			State = 1980;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				{
				State = 1978;
				Match(XMLNAMESPACES);
				State = 1979;
				Match(COMMA);
				}
				break;
			}
			State = 1982;
			common_table_expression();
			State = 1987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1983;
				Match(COMMA);
				State = 1984;
				common_table_expression();
				}
				}
				State = 1989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public R_idContext expression_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(tsqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(tsqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(tsqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(tsqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 174, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1990;
			_localctx.expression_name = r_id();
			State = 1995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1991;
				Match(LR_BRACKET);
				State = 1992;
				column_name_list();
				State = 1993;
				Match(RR_BRACKET);
				}
			}

			State = 1997;
			Match(AS);
			State = 1998;
			Match(LR_BRACKET);
			State = 1999;
			select_statement();
			State = 2000;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public IToken name;
		public R_idContext udt_column_name;
		public R_idContext method_name;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(tsqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(Context, State);
		EnterRule(_localctx, 176, RULE_update_elem);
		try {
			State = 2018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2004;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FORCESEEK:
				case NEXT:
				case NUMERIC:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 2002;
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					State = 2003;
					_localctx.name = Match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2008;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQUAL:
					{
					State = 2006;
					Match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					State = 2007;
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2010;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2011;
				_localctx.udt_column_name = r_id();
				State = 2012;
				Match(DOT);
				State = 2013;
				_localctx.method_name = r_id();
				State = 2014;
				Match(LR_BRACKET);
				State = 2015;
				expression_list();
				State = 2016;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_condition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_condition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_listContext search_condition_list() {
		Search_condition_listContext _localctx = new Search_condition_listContext(Context, State);
		EnterRule(_localctx, 178, RULE_search_condition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020;
			search_condition(0);
			State = 2025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2021;
				Match(COMMA);
				State = 2022;
				search_condition(0);
				}
				}
				State = 2027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
	 
		public Search_conditionContext() { }
		public virtual void CopyFrom(Search_conditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Search_cond_orContext : Search_conditionContext {
		public Search_conditionContext left;
		public IToken op;
		public Search_conditionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(tsqlParser.OR, 0); }
		public Search_cond_orContext(Search_conditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_cond_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_cond_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_cond_or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Search_cond_predContext : Search_conditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Search_cond_predContext(Search_conditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_cond_pred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_cond_pred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_cond_pred(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Search_cond_andContext : Search_conditionContext {
		public Search_conditionContext left;
		public IToken op;
		public Search_conditionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(tsqlParser.AND, 0); }
		public Search_cond_andContext(Search_conditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_cond_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_cond_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_cond_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Search_conditionContext _localctx = new Search_conditionContext(Context, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 180;
		EnterRecursionRule(_localctx, 180, RULE_search_condition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Search_cond_predContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 2029;
			predicate();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2039;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2037;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
					case 1:
						{
						_localctx = new Search_cond_andContext(new Search_conditionContext(_parentctx, _parentState));
						((Search_cond_andContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 2031;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2032;
						((Search_cond_andContext)_localctx).op = Match(AND);
						State = 2033;
						((Search_cond_andContext)_localctx).right = search_condition(4);
						}
						break;
					case 2:
						{
						_localctx = new Search_cond_orContext(new Search_conditionContext(_parentctx, _parentState));
						((Search_cond_orContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						State = 2034;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2035;
						((Search_cond_orContext)_localctx).op = Match(OR);
						State = 2036;
						((Search_cond_orContext)_localctx).right = search_condition(3);
						}
						break;
					}
					} 
				}
				State = 2041;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Binary_in_expressionContext : PredicateContext {
		public ExpressionContext left;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(tsqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public Binary_in_expressionContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBinary_in_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBinary_in_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_in_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unary_operator_expression2Context : PredicateContext {
		public IToken op;
		public SubqueryContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Unary_operator_expression2Context(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expression2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Binary_mod_expressionContext : PredicateContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _right = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(tsqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(tsqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(tsqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(tsqlParser.ESCAPE, 0); }
		public Binary_mod_expressionContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBinary_mod_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBinary_mod_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_mod_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unary_operator_expression3Context : PredicateContext {
		public IToken op;
		public PredicateContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public Unary_operator_expression3Context(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expression3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bracket_search_expressionContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Bracket_search_expressionContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBracket_search_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBracket_search_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_search_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Sublink_expressionContext : PredicateContext {
		public ExpressionContext test_expr;
		public Comparison_operatorContext op;
		public IToken pref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(tsqlParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(tsqlParser.ANY, 0); }
		public Sublink_expressionContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSublink_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSublink_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSublink_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Binary_operator_expression2Context : PredicateContext {
		public ExpressionContext left;
		public Comparison_operatorContext op;
		public Null_notnullContext nullcheck;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Binary_operator_expression2Context(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBinary_operator_expression2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBinary_operator_expression2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator_expression2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Decimal_expressionContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Decimal_expressionContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDecimal_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDecimal_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 182, RULE_predicate);
		int _la;
		try {
			State = 2100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				_localctx = new Unary_operator_expression3Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2042;
				((Unary_operator_expression3Context)_localctx).op = Match(NOT);
				State = 2043;
				((Unary_operator_expression3Context)_localctx).expr = predicate();
				}
				break;
			case 2:
				_localctx = new Unary_operator_expression2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2044;
				((Unary_operator_expression2Context)_localctx).op = Match(EXISTS);
				State = 2045;
				Match(LR_BRACKET);
				State = 2046;
				((Unary_operator_expression2Context)_localctx).expr = subquery();
				State = 2047;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new Binary_operator_expression2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2049;
				((Binary_operator_expression2Context)_localctx).left = expression(0);
				State = 2050;
				((Binary_operator_expression2Context)_localctx).op = comparison_operator();
				State = 2051;
				((Binary_operator_expression2Context)_localctx).nullcheck = null_notnull();
				}
				break;
			case 4:
				_localctx = new Binary_operator_expression2Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2053;
				((Binary_operator_expression2Context)_localctx).left = expression(0);
				State = 2054;
				((Binary_operator_expression2Context)_localctx).op = comparison_operator();
				State = 2055;
				((Binary_operator_expression2Context)_localctx).right = expression(0);
				}
				break;
			case 5:
				_localctx = new Sublink_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2057;
				((Sublink_expressionContext)_localctx).test_expr = expression(0);
				State = 2058;
				((Sublink_expressionContext)_localctx).op = comparison_operator();
				State = 2059;
				((Sublink_expressionContext)_localctx).pref = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
					((Sublink_expressionContext)_localctx).pref = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2060;
				Match(LR_BRACKET);
				State = 2061;
				subquery();
				State = 2062;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new Binary_mod_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2064;
				((Binary_mod_expressionContext)_localctx).left = expression(0);
				State = 2066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2065;
					Match(NOT);
					}
				}

				State = 2068;
				((Binary_mod_expressionContext)_localctx).op = Match(BETWEEN);
				State = 2069;
				((Binary_mod_expressionContext)_localctx)._expression = expression(0);
				((Binary_mod_expressionContext)_localctx)._right.Add(((Binary_mod_expressionContext)_localctx)._expression);
				State = 2070;
				Match(AND);
				State = 2071;
				((Binary_mod_expressionContext)_localctx)._expression = expression(0);
				((Binary_mod_expressionContext)_localctx)._right.Add(((Binary_mod_expressionContext)_localctx)._expression);
				}
				break;
			case 7:
				_localctx = new Binary_in_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2073;
				((Binary_in_expressionContext)_localctx).left = expression(0);
				State = 2075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2074;
					Match(NOT);
					}
				}

				State = 2077;
				((Binary_in_expressionContext)_localctx).op = Match(IN);
				State = 2078;
				Match(LR_BRACKET);
				State = 2081;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
				case 1:
					{
					State = 2079;
					subquery();
					}
					break;
				case 2:
					{
					State = 2080;
					expression_list();
					}
					break;
				}
				State = 2083;
				Match(RR_BRACKET);
				}
				break;
			case 8:
				_localctx = new Binary_mod_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2085;
				((Binary_mod_expressionContext)_localctx).left = expression(0);
				State = 2087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2086;
					Match(NOT);
					}
				}

				State = 2089;
				((Binary_mod_expressionContext)_localctx).op = Match(LIKE);
				State = 2090;
				((Binary_mod_expressionContext)_localctx)._expression = expression(0);
				((Binary_mod_expressionContext)_localctx)._right.Add(((Binary_mod_expressionContext)_localctx)._expression);
				State = 2093;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
				case 1:
					{
					State = 2091;
					Match(ESCAPE);
					State = 2092;
					((Binary_mod_expressionContext)_localctx)._expression = expression(0);
					((Binary_mod_expressionContext)_localctx)._right.Add(((Binary_mod_expressionContext)_localctx)._expression);
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new Bracket_search_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2095;
				Match(LR_BRACKET);
				State = 2096;
				search_condition(0);
				State = 2097;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new Decimal_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2099;
				Match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
	 
		public Query_expressionContext() { }
		public virtual void CopyFrom(Query_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Bracket_query_expressionContext : Query_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Bracket_query_expressionContext(Query_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBracket_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBracket_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_query_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Query_specification_expressionContext : Query_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Query_specification_expressionContext(Query_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterQuery_specification_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitQuery_specification_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_specification_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Union_query_expressionContext : Query_expressionContext {
		public Query_expressionContext left;
		public Union_opContext op;
		public Query_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_opContext union_op() {
			return GetRuleContext<Union_opContext>(0);
		}
		public Union_query_expressionContext(Query_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUnion_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUnion_query_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_query_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		return query_expression(0);
	}

	private Query_expressionContext query_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Query_expressionContext _localctx = new Query_expressionContext(Context, _parentState);
		Query_expressionContext _prevctx = _localctx;
		int _startState = 184;
		EnterRecursionRule(_localctx, 184, RULE_query_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_BRACKET:
				{
				_localctx = new Bracket_query_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2103;
				Match(LR_BRACKET);
				State = 2104;
				query_expression(0);
				State = 2105;
				Match(RR_BRACKET);
				}
				break;
			case SELECT:
				{
				_localctx = new Query_specification_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2107;
				query_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,306,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Union_query_expressionContext(new Query_expressionContext(_parentctx, _parentState));
					((Union_query_expressionContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_query_expression);
					State = 2110;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 2111;
					((Union_query_expressionContext)_localctx).op = union_op();
					State = 2112;
					((Union_query_expressionContext)_localctx).right = query_expression(3);
					}
					} 
				}
				State = 2118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,306,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Union_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(tsqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(tsqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(tsqlParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public Union_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUnion_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUnion_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_opContext union_op() {
		Union_opContext _localctx = new Union_opContext(Context, State);
		EnterRule(_localctx, 186, RULE_union_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 2119;
				Match(UNION);
				State = 2121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 2120;
					Match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				State = 2123;
				Match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				State = 2124;
				Match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public IToken pref;
		public Search_conditionContext where;
		public Search_conditionContext having;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(tsqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_clauseContext top_clause() {
			return GetRuleContext<Top_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourcesContext table_sources() {
			return GetRuleContext<Table_sourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(tsqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(tsqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_grouping_setsContext group_by_grouping_sets() {
			return GetRuleContext<Group_by_grouping_setsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(tsqlParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(tsqlParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(tsqlParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(tsqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(Context, State);
		EnterRule(_localctx, 188, RULE_query_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2127;
			Match(SELECT);
			State = 2129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 2128;
				_localctx.pref = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.pref = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 2131;
				top_clause();
				}
			}

			State = 2134;
			select_list();
			State = 2137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				{
				State = 2135;
				Match(INTO);
				State = 2136;
				table_name();
				}
				break;
			}
			State = 2141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
			case 1:
				{
				State = 2139;
				Match(FROM);
				State = 2140;
				table_sources();
				}
				break;
			}
			State = 2145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				{
				State = 2143;
				Match(WHERE);
				State = 2144;
				_localctx.where = search_condition(0);
				}
				break;
			}
			State = 2157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				{
				State = 2147;
				Match(GROUP);
				State = 2148;
				Match(BY);
				State = 2149;
				group_by_item();
				State = 2154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2150;
						Match(COMMA);
						State = 2151;
						group_by_item();
						}
						} 
					}
					State = 2156;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
				}
				}
				break;
			}
			State = 2160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				{
				State = 2159;
				group_by_grouping_sets();
				}
				break;
			}
			State = 2164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				{
				State = 2162;
				Match(WITH);
				State = 2163;
				_la = TokenStream.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
			case 1:
				{
				State = 2166;
				Match(HAVING);
				State = 2167;
				_localctx.having = search_condition(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_grouping_setsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(tsqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(tsqlParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(tsqlParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_setContext[] grouping_set() {
			return GetRuleContexts<Grouping_setContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_setContext grouping_set(int i) {
			return GetRuleContext<Grouping_setContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Group_by_grouping_setsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_grouping_sets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGroup_by_grouping_sets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGroup_by_grouping_sets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_grouping_sets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_grouping_setsContext group_by_grouping_sets() {
		Group_by_grouping_setsContext _localctx = new Group_by_grouping_setsContext(Context, State);
		EnterRule(_localctx, 190, RULE_group_by_grouping_sets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2170;
			Match(GROUP);
			State = 2171;
			Match(BY);
			State = 2172;
			Match(GROUPING);
			State = 2173;
			Match(SETS);
			State = 2174;
			Match(LR_BRACKET);
			State = 2175;
			grouping_set();
			State = 2180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2176;
				Match(COMMA);
				State = 2177;
				grouping_set();
				}
				}
				State = 2182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2183;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Grouping_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGrouping_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGrouping_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_setContext grouping_set() {
		Grouping_setContext _localctx = new Grouping_setContext(Context, State);
		EnterRule(_localctx, 192, RULE_grouping_set);
		int _la;
		try {
			State = 2199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2185;
				Match(LR_BRACKET);
				State = 2186;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2187;
				group_by_item();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2188;
				Match(LR_BRACKET);
				State = 2189;
				group_by_item();
				State = 2194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2190;
					Match(COMMA);
					State = 2191;
					group_by_item();
					}
					}
					State = 2196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2197;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(tsqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTop_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTop_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_clauseContext top_clause() {
		Top_clauseContext _localctx = new Top_clauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_top_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			Match(TOP);
			State = 2202;
			expression(0);
			State = 2204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERCENT) {
				{
				State = 2203;
				Match(PERCENT);
				}
			}

			State = 2208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2206;
				Match(WITH);
				State = 2207;
				Match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_clause_dmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public Top_clause_dmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_clause_dm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTop_clause_dm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTop_clause_dm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_clause_dm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_clause_dmContext top_clause_dm() {
		Top_clause_dmContext _localctx = new Top_clause_dmContext(Context, State);
		EnterRule(_localctx, 196, RULE_top_clause_dm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2210;
			Match(TOP);
			State = 2211;
			Match(LR_BRACKET);
			State = 2212;
			expression(0);
			State = 2213;
			Match(RR_BRACKET);
			State = 2215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERCENT) {
				{
				State = 2214;
				Match(PERCENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ExpressionContext offset;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(tsqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(tsqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(tsqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fetch_expressionContext fetch_expression() {
			return GetRuleContext<Fetch_expressionContext>(0);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2217;
			Match(ORDER);
			State = 2218;
			Match(BY);
			State = 2219;
			order_by_expression();
			State = 2224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,325,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2220;
					Match(COMMA);
					State = 2221;
					order_by_expression();
					}
					} 
				}
				State = 2226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,325,Context);
			}
			State = 2233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
			case 1:
				{
				State = 2227;
				Match(OFFSET);
				State = 2228;
				_localctx.offset = expression(0);
				State = 2229;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2231;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
				case 1:
					{
					State = 2230;
					fetch_expression();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(tsqlParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(tsqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(tsqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		public Fetch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFetch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFetch_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_expressionContext fetch_expression() {
		Fetch_expressionContext _localctx = new Fetch_expressionContext(Context, State);
		EnterRule(_localctx, 200, RULE_fetch_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2235;
			Match(FETCH);
			State = 2236;
			_la = TokenStream.LA(1);
			if ( !(_la==NEXT || _la==FIRST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2237;
			expression(0);
			State = 2238;
			_la = TokenStream.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2239;
			Match(ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROWSE() { return GetToken(tsqlParser.BROWSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(tsqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(tsqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_common_directivesContext xml_common_directives() {
			return GetRuleContext<Xml_common_directivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(tsqlParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_for_clause);
		try {
			State = 2260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2241;
				Match(FOR);
				State = 2242;
				Match(BROWSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2243;
				Match(FOR);
				State = 2244;
				Match(XML);
				State = 2245;
				Match(AUTO);
				State = 2247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
				case 1:
					{
					State = 2246;
					xml_common_directives();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2249;
				Match(FOR);
				State = 2250;
				Match(XML);
				State = 2251;
				Match(PATH);
				State = 2255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
				case 1:
					{
					State = 2252;
					Match(LR_BRACKET);
					State = 2253;
					Match(STRING);
					State = 2254;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 2258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
				case 1:
					{
					State = 2257;
					xml_common_directives();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(tsqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(tsqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE64() { return GetToken(tsqlParser.BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(tsqlParser.ROOT, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_common_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(Context, State);
		EnterRule(_localctx, 204, RULE_xml_common_directives);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2262;
			Match(COMMA);
			State = 2267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
				{
				State = 2263;
				Match(BINARY);
				State = 2264;
				Match(BASE64);
				}
				break;
			case TYPE:
				{
				State = 2265;
				Match(TYPE);
				}
				break;
			case ROOT:
				{
				State = 2266;
				Match(ROOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public IToken direction;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(tsqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(tsqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(Context, State);
		EnterRule(_localctx, 206, RULE_order_by_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2269;
			expression(0);
			State = 2271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				{
				State = 2270;
				_localctx.direction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.direction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(Context, State);
		EnterRule(_localctx, 208, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2273;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(tsqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(Context, State);
		EnterRule(_localctx, 210, RULE_option_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2275;
			Match(OPTION);
			State = 2276;
			Match(LR_BRACKET);
			State = 2277;
			option();
			State = 2282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2278;
				Match(COMMA);
				State = 2279;
				option();
				}
				}
				State = 2284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2285;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(tsqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(tsqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(tsqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(tsqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(tsqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(tsqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(tsqlParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(tsqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(tsqlParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPAND() { return GetToken(tsqlParser.EXPAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEWS() { return GetToken(tsqlParser.VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(tsqlParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(tsqlParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAN() { return GetToken(tsqlParser.PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEPFIXED() { return GetToken(tsqlParser.KEEPFIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXDOP() { return GetToken(tsqlParser.MAXDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXRECURSION() { return GetToken(tsqlParser.MAXRECURSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(tsqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(tsqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERIZATION() { return GetToken(tsqlParser.PARAMETERIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOMPILE() { return GetToken(tsqlParser.RECOMPILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROBUST() { return GetToken(tsqlParser.ROBUST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(tsqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 212, RULE_option);
		int _la;
		try {
			State = 2332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2287;
				Match(FAST);
				State = 2288;
				_localctx.number_rows = Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2289;
				_la = TokenStream.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2290;
				Match(GROUP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2291;
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2292;
				Match(UNION);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2293;
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2294;
				Match(JOIN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2295;
				Match(EXPAND);
				State = 2296;
				Match(VIEWS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2297;
				Match(FORCE);
				State = 2298;
				Match(ORDER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2299;
				Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2300;
				Match(KEEP);
				State = 2301;
				Match(PLAN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2302;
				Match(KEEPFIXED);
				State = 2303;
				Match(PLAN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2304;
				Match(MAXDOP);
				State = 2305;
				_localctx.number_of_processors = Match(DECIMAL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2306;
				Match(MAXRECURSION);
				State = 2307;
				_localctx.number_recursion = Match(DECIMAL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2308;
				Match(OPTIMIZE);
				State = 2309;
				Match(FOR);
				State = 2310;
				Match(LR_BRACKET);
				State = 2311;
				optimize_for_arg();
				State = 2316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2312;
					Match(COMMA);
					State = 2313;
					optimize_for_arg();
					}
					}
					State = 2318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2319;
				Match(RR_BRACKET);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2321;
				Match(OPTIMIZE);
				State = 2322;
				Match(FOR);
				State = 2323;
				Match(UNKNOWN);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2324;
				Match(PARAMETERIZATION);
				State = 2325;
				_la = TokenStream.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2326;
				Match(RECOMPILE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2327;
				Match(ROBUST);
				State = 2328;
				Match(PLAN);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2329;
				Match(USE);
				State = 2330;
				Match(PLAN);
				State = 2331;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(tsqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimize_for_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(Context, State);
		EnterRule(_localctx, 214, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2334;
			Match(LOCAL_ID);
			State = 2338;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNKNOWN:
				{
				State = 2335;
				Match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				State = 2336;
				Match(EQUAL);
				State = 2337;
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 216, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340;
			select_list_elem();
			State = 2345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2341;
					Match(COMMA);
					State = 2342;
					select_list_elem();
					}
					} 
				}
				State = 2347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		public Column_aliasContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public A_starContext a_star() {
			return GetRuleContext<A_starContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(tsqlParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(tsqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWGUID() { return GetToken(tsqlParser.ROWGUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(Context, State);
		EnterRule(_localctx, 218, RULE_select_list_elem);
		int _la;
		try {
			State = 2369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1108101562369L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9220850245999262719L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -8070459558675465653L) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & -6413215653674627739L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 41918743507263L) != 0)) {
					{
					State = 2348;
					table_name();
					State = 2349;
					Match(DOT);
					}
				}

				State = 2356;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 2353;
					a_star();
					}
					break;
				case DOLLAR:
					{
					State = 2354;
					Match(DOLLAR);
					State = 2355;
					_la = TokenStream.LA(1);
					if ( !(_la==IDENTITY || _la==ROWGUID) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2358;
				_localctx.alias = column_alias();
				State = 2359;
				Match(EQUAL);
				State = 2360;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2362;
				expression(0);
				State = 2367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
				case 1:
					{
					State = 2364;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 2363;
						Match(AS);
						}
					}

					State = 2366;
					_localctx.alias = column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_sources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_sources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_sources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_sources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourcesContext table_sources() {
		Table_sourcesContext _localctx = new Table_sourcesContext(Context, State);
		EnterRule(_localctx, 220, RULE_table_sources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2371;
			table_source(0);
			State = 2376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,344,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2372;
					Match(COMMA);
					State = 2373;
					table_source(0);
					}
					} 
				}
				State = 2378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,344,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
	 
		public Table_sourceContext() { }
		public virtual void CopyFrom(Table_sourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Cross_joinContext : Table_sourceContext {
		public Table_sourceContext left;
		public IToken op;
		public Table_sourceContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(tsqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(tsqlParser.CROSS, 0); }
		public Cross_joinContext(Table_sourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCross_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCross_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCross_join(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_source_item_joinContext : Table_sourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Table_source_item_joinContext(Table_sourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source_item_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source_item_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item_join(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Standard_joinContext : Table_sourceContext {
		public Table_sourceContext left;
		public Table_sourceContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Join_typeContext join_type() {
			return GetRuleContext<Join_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(tsqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public Standard_joinContext(Table_sourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterStandard_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitStandard_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandard_join(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Apply_joinContext : Table_sourceContext {
		public Table_sourceContext left;
		public IToken op;
		public Table_sourceContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLY() { return GetToken(tsqlParser.APPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(tsqlParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(tsqlParser.OUTER, 0); }
		public Apply_joinContext(Table_sourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterApply_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitApply_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApply_join(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bracket_table_sourceContext : Table_sourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Bracket_table_sourceContext(Table_sourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBracket_table_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBracket_table_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_table_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		return table_source(0);
	}

	private Table_sourceContext table_source(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Table_sourceContext _localctx = new Table_sourceContext(Context, _parentState);
		Table_sourceContext _prevctx = _localctx;
		int _startState = 222;
		EnterRecursionRule(_localctx, 222, RULE_table_source, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
			case 1:
				{
				_localctx = new Bracket_table_sourceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 2380;
				Match(LR_BRACKET);
				State = 2381;
				table_source(0);
				State = 2382;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				_localctx = new Table_source_item_joinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 2384;
				table_source_item();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2404;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2402;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
					case 1:
						{
						_localctx = new Cross_joinContext(new Table_sourceContext(_parentctx, _parentState));
						((Cross_joinContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_table_source);
						State = 2387;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2388;
						((Cross_joinContext)_localctx).op = Match(CROSS);
						State = 2389;
						Match(JOIN);
						State = 2390;
						((Cross_joinContext)_localctx).right = table_source(4);
						}
						break;
					case 2:
						{
						_localctx = new Apply_joinContext(new Table_sourceContext(_parentctx, _parentState));
						((Apply_joinContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_table_source);
						State = 2391;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2392;
						((Apply_joinContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==CROSS || _la==OUTER) ) {
							((Apply_joinContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2393;
						Match(APPLY);
						State = 2394;
						((Apply_joinContext)_localctx).right = table_source(3);
						}
						break;
					case 3:
						{
						_localctx = new Standard_joinContext(new Table_sourceContext(_parentctx, _parentState));
						((Standard_joinContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_table_source);
						State = 2395;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 2396;
						join_type();
						State = 2397;
						Match(JOIN);
						State = 2398;
						((Standard_joinContext)_localctx).right = table_source(0);
						State = 2399;
						Match(ON);
						State = 2400;
						search_condition(0);
						}
						break;
					}
					} 
				}
				State = 2406;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
	 
		public Table_source_itemContext() { }
		public virtual void CopyFrom(Table_source_itemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Table_source_item_simpleContext : Table_source_itemContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Table_source_item_simpleContext(Table_source_itemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source_item_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source_item_simple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item_simple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_source_item_complexContext : Table_source_itemContext {
		[System.Diagnostics.DebuggerNonUserCode] public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(tsqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Table_source_item_complexContext(Table_source_itemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source_item_complex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source_item_complex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item_complex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_source_item_nameContext : Table_source_itemContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_clauseContext tablesample_clause() {
			return GetRuleContext<Tablesample_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_source_item_nameContext(Table_source_itemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source_item_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source_item_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(Context, State);
		EnterRule(_localctx, 224, RULE_table_source_item);
		try {
			State = 2449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,359,Context) ) {
			case 1:
				_localctx = new Table_source_item_nameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2407;
				table_name();
				State = 2409;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
				case 1:
					{
					State = 2408;
					tablesample_clause();
					}
					break;
				}
				State = 2412;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
				case 1:
					{
					State = 2411;
					table_alias();
					}
					break;
				}
				State = 2415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
				case 1:
					{
					State = 2414;
					with_table_hints();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Table_source_item_simpleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2417;
				rowset_function();
				State = 2419;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
				case 1:
					{
					State = 2418;
					table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Table_source_item_complexContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2421;
				derived_table();
				State = 2426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,353,Context) ) {
				case 1:
					{
					State = 2422;
					table_alias();
					State = 2424;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
					case 1:
						{
						State = 2423;
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new Table_source_item_simpleContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2428;
				change_table();
				State = 2430;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,354,Context) ) {
				case 1:
					{
					State = 2429;
					table_alias();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new Table_source_item_simpleContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2432;
				function_call();
				State = 2434;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
				case 1:
					{
					State = 2433;
					table_alias();
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new Table_source_item_simpleContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2436;
				Match(LOCAL_ID);
				State = 2438;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
				case 1:
					{
					State = 2437;
					table_alias();
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new Table_source_item_complexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2440;
				Match(LOCAL_ID);
				State = 2441;
				Match(DOT);
				State = 2442;
				function_call();
				State = 2447;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,358,Context) ) {
				case 1:
					{
					State = 2443;
					table_alias();
					State = 2445;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
					case 1:
						{
						State = 2444;
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(tsqlParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sample_numberContext sample_number() {
			return GetRuleContext<Sample_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(tsqlParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(tsqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_seedContext repeat_seed() {
			return GetRuleContext<Repeat_seedContext>(0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTablesample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTablesample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablesample_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_clauseContext tablesample_clause() {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(Context, State);
		EnterRule(_localctx, 226, RULE_tablesample_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451;
			Match(TABLESAMPLE);
			State = 2453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYSTEM) {
				{
				State = 2452;
				Match(SYSTEM);
				}
			}

			State = 2455;
			Match(LR_BRACKET);
			State = 2456;
			sample_number();
			State = 2458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERCENT || _la==ROWS) {
				{
				State = 2457;
				_la = TokenStream.LA(1);
				if ( !(_la==PERCENT || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2460;
			Match(RR_BRACKET);
			State = 2463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
			case 1:
				{
				State = 2461;
				Match(REPEATABLE);
				{
				State = 2462;
				repeat_seed();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sample_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Sample_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sample_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSample_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSample_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSample_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sample_numberContext sample_number() {
		Sample_numberContext _localctx = new Sample_numberContext(Context, State);
		EnterRule(_localctx, 228, RULE_sample_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2465;
			Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_seedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Repeat_seedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_seed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRepeat_seed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRepeat_seed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat_seed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_seedContext repeat_seed() {
		Repeat_seedContext _localctx = new Repeat_seedContext(Context, State);
		EnterRule(_localctx, 230, RULE_repeat_seed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2467;
			Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 232, RULE_table_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2469;
				Match(AS);
				}
			}

			State = 2472;
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGETABLE() { return GetToken(tsqlParser.CHANGETABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGES() { return GetToken(tsqlParser.CHANGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(tsqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(Context, State);
		EnterRule(_localctx, 234, RULE_change_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2474;
			Match(CHANGETABLE);
			State = 2475;
			Match(LR_BRACKET);
			State = 2476;
			Match(CHANGES);
			State = 2477;
			table_name();
			State = 2478;
			Match(COMMA);
			State = 2479;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2480;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_typeContext : ParserRuleContext {
		public IToken join_hint;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(tsqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(tsqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(tsqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(tsqlParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(tsqlParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(tsqlParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(tsqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(tsqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(tsqlParser.REMOTE, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterJoin_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitJoin_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_typeContext join_type() {
		Join_typeContext _localctx = new Join_typeContext(Context, State);
		EnterRule(_localctx, 236, RULE_join_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
			case JOIN:
			case MERGE:
			case HASH:
			case LOOP:
			case REMOTE:
				{
				State = 2483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER) {
					{
					State = 2482;
					Match(INNER);
					}
				}

				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				State = 2485;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2486;
					Match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
				{
				State = 2491;
				_localctx.join_hint = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
					_localctx.join_hint = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_name_with_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name_with_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_name_with_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_name_with_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name_with_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_name_with_hintContext table_name_with_hint() {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(Context, State);
		EnterRule(_localctx, 238, RULE_table_name_with_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2494;
			table_name();
			State = 2496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
			case 1:
				{
				State = 2495;
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken provider_name;
		public IToken connectionString;
		public IToken sql;
		public IToken data_file;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENROWSET() { return GetToken(tsqlParser.OPENROWSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(tsqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(tsqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK() { return GetToken(tsqlParser.BULK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(Context, State);
		EnterRule(_localctx, 240, RULE_rowset_function);
		int _la;
		try {
			State = 2524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2498;
				Match(OPENROWSET);
				State = 2499;
				Match(LR_BRACKET);
				State = 2500;
				_localctx.provider_name = Match(STRING);
				State = 2501;
				Match(COMMA);
				State = 2502;
				_localctx.connectionString = Match(STRING);
				State = 2503;
				Match(COMMA);
				State = 2504;
				_localctx.sql = Match(STRING);
				State = 2505;
				Match(RR_BRACKET);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2506;
				Match(OPENROWSET);
				State = 2507;
				Match(LR_BRACKET);
				State = 2508;
				Match(BULK);
				State = 2509;
				_localctx.data_file = Match(STRING);
				State = 2510;
				Match(COMMA);
				State = 2520;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
				case 1:
					{
					State = 2511;
					bulk_option();
					State = 2516;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2512;
						Match(COMMA);
						State = 2513;
						bulk_option();
						}
						}
						State = 2518;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 2519;
					r_id();
					}
					break;
				}
				State = 2522;
				Match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IToken bulk_option_value;
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBulk_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(Context, State);
		EnterRule(_localctx, 242, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2526;
			r_id();
			State = 2527;
			Match(EQUAL);
			State = 2528;
			_localctx.bulk_option_value = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				_localctx.bulk_option_value = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerived_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(Context, State);
		EnterRule(_localctx, 244, RULE_derived_table);
		try {
			State = 2535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2530;
				subquery();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2531;
				Match(LR_BRACKET);
				State = 2532;
				subquery();
				State = 2533;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	 
		public Function_callContext() { }
		public virtual void CopyFrom(Function_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Standard_callContext : Function_callContext {
		public ExpressionContext style;
		public IToken seed;
		public IToken increment;
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_CHECKSUM() { return GetToken(tsqlParser.BINARY_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(tsqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(tsqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(tsqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEADD() { return GetToken(tsqlParser.DATEADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(tsqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEDIFF() { return GetToken(tsqlParser.DATEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATENAME() { return GetToken(tsqlParser.DATENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEPART() { return GetToken(tsqlParser.DATEPART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIMEOFFSETFROMPARTS() { return GetToken(tsqlParser.DATETIMEOFFSETFROMPARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIF() { return GetToken(tsqlParser.IIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(tsqlParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SPLIT() { return GetToken(tsqlParser.STRING_SPLIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY_CONVERT() { return GetToken(tsqlParser.TRY_CONVERT, 0); }
		public Standard_callContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterStandard_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitStandard_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandard_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aggregate_callContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public Aggregate_callContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAggregate_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAggregate_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Nvf_callContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Next_value_for_functionContext next_value_for_function() {
			return GetRuleContext<Next_value_for_functionContext>(0);
		}
		public Nvf_callContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterNvf_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitNvf_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNvf_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Rank_callContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public Rank_callContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRank_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRank_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression_callContext : Function_callContext {
		public ExpressionContext left;
		public Data_typeContext alias;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE() { return GetToken(tsqlParser.PARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(tsqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY_PARSE() { return GetToken(tsqlParser.TRY_PARSE, 0); }
		public Expression_callContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExpression_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExpression_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Simple_callContext : Function_callContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(tsqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(tsqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(tsqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(tsqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(tsqlParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(tsqlParser.SYSTEM_USER, 0); }
		public Simple_callContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSimple_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Cast_callContext : Function_callContext {
		public Data_typeContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(tsqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY_CAST() { return GetToken(tsqlParser.TRY_CAST, 0); }
		public Cast_callContext(Function_callContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCast_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCast_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 246, RULE_function_call);
		int _la;
		try {
			State = 2710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
			case 1:
				_localctx = new Rank_callContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2537;
				ranking_windowed_function();
				}
				break;
			case 2:
				_localctx = new Aggregate_callContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2538;
				aggregate_windowed_function();
				}
				break;
			case 3:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2539;
				scalar_function_name();
				State = 2540;
				Match(LR_BRACKET);
				State = 2542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576212880064512L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 18016468750845953L) != 0) || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -8065942527057326079L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -2321806371062850325L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -4625929839377974965L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -6781296620682193025L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & 31551585804632047L) != 0)) {
					{
					State = 2541;
					expression_list();
					}
				}

				State = 2544;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new Nvf_callContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2546;
				next_value_for_function();
				}
				break;
			case 5:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2547;
				Match(BINARY_CHECKSUM);
				State = 2548;
				Match(LR_BRACKET);
				State = 2549;
				Match(STAR);
				State = 2550;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new Cast_callContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2551;
				Match(CAST);
				State = 2552;
				Match(LR_BRACKET);
				State = 2553;
				expression(0);
				State = 2554;
				Match(AS);
				State = 2555;
				((Cast_callContext)_localctx).alias = data_type();
				State = 2556;
				Match(RR_BRACKET);
				}
				break;
			case 7:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2558;
				Match(CONVERT);
				State = 2559;
				Match(LR_BRACKET);
				State = 2560;
				data_type();
				State = 2561;
				Match(COMMA);
				State = 2562;
				expression(0);
				State = 2565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2563;
					Match(COMMA);
					State = 2564;
					((Standard_callContext)_localctx).style = expression(0);
					}
				}

				State = 2567;
				Match(RR_BRACKET);
				}
				break;
			case 8:
				_localctx = new Simple_callContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2569;
				Match(CHECKSUM);
				State = 2570;
				Match(LR_BRACKET);
				State = 2571;
				Match(STAR);
				State = 2572;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2573;
				Match(COALESCE);
				State = 2574;
				Match(LR_BRACKET);
				State = 2575;
				expression_list();
				State = 2576;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new Simple_callContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2578;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case 11:
				_localctx = new Simple_callContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2579;
				Match(CURRENT_USER);
				}
				break;
			case 12:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2580;
				Match(DATEADD);
				State = 2581;
				Match(LR_BRACKET);
				State = 2582;
				Match(ID);
				State = 2583;
				Match(COMMA);
				State = 2584;
				expression(0);
				State = 2585;
				Match(COMMA);
				State = 2586;
				expression(0);
				State = 2587;
				Match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2589;
				Match(DATEDIFF);
				State = 2590;
				Match(LR_BRACKET);
				State = 2591;
				Match(ID);
				State = 2592;
				Match(COMMA);
				State = 2593;
				expression(0);
				State = 2594;
				Match(COMMA);
				State = 2595;
				expression(0);
				State = 2596;
				Match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2598;
				Match(DATENAME);
				State = 2599;
				Match(LR_BRACKET);
				State = 2600;
				Match(ID);
				State = 2601;
				Match(COMMA);
				State = 2602;
				expression(0);
				State = 2603;
				Match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2605;
				Match(DATEPART);
				State = 2606;
				Match(LR_BRACKET);
				State = 2607;
				Match(ID);
				State = 2608;
				Match(COMMA);
				State = 2609;
				expression(0);
				State = 2610;
				Match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2612;
				Match(DATETIMEOFFSETFROMPARTS);
				State = 2613;
				Match(LR_BRACKET);
				State = 2614;
				expression(0);
				State = 2615;
				Match(COMMA);
				State = 2616;
				expression(0);
				State = 2617;
				Match(COMMA);
				State = 2618;
				expression(0);
				State = 2619;
				Match(COMMA);
				State = 2620;
				expression(0);
				State = 2621;
				Match(COMMA);
				State = 2622;
				expression(0);
				State = 2623;
				Match(COMMA);
				State = 2624;
				expression(0);
				State = 2625;
				Match(COMMA);
				State = 2626;
				expression(0);
				State = 2627;
				Match(COMMA);
				State = 2628;
				expression(0);
				State = 2629;
				Match(COMMA);
				State = 2630;
				expression(0);
				State = 2631;
				Match(COMMA);
				State = 2632;
				expression(0);
				State = 2633;
				Match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2635;
				Match(IDENTITY);
				State = 2636;
				Match(LR_BRACKET);
				State = 2637;
				data_type();
				State = 2640;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
				case 1:
					{
					State = 2638;
					Match(COMMA);
					State = 2639;
					((Standard_callContext)_localctx).seed = Match(DECIMAL);
					}
					break;
				}
				State = 2644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2642;
					Match(COMMA);
					State = 2643;
					((Standard_callContext)_localctx).increment = Match(DECIMAL);
					}
				}

				State = 2646;
				Match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2648;
				Match(IIF);
				State = 2649;
				Match(LR_BRACKET);
				State = 2650;
				search_condition(0);
				State = 2651;
				Match(COMMA);
				State = 2652;
				expression(0);
				State = 2653;
				Match(COMMA);
				State = 2654;
				expression(0);
				State = 2655;
				Match(RR_BRACKET);
				}
				break;
			case 19:
				_localctx = new Simple_callContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2657;
				Match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 20:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2658;
				Match(NULLIF);
				State = 2659;
				Match(LR_BRACKET);
				State = 2660;
				expression(0);
				State = 2661;
				Match(COMMA);
				State = 2662;
				expression(0);
				State = 2663;
				Match(RR_BRACKET);
				}
				break;
			case 21:
				_localctx = new Expression_callContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2665;
				Match(PARSE);
				State = 2666;
				Match(LR_BRACKET);
				State = 2667;
				((Expression_callContext)_localctx).left = expression(0);
				State = 2668;
				Match(AS);
				State = 2669;
				((Expression_callContext)_localctx).alias = data_type();
				State = 2672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2670;
					Match(USING);
					State = 2671;
					((Expression_callContext)_localctx).right = expression(0);
					}
				}

				State = 2674;
				Match(RR_BRACKET);
				}
				break;
			case 22:
				_localctx = new Simple_callContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2676;
				Match(SESSION_USER);
				}
				break;
			case 23:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2677;
				Match(STRING_SPLIT);
				State = 2678;
				Match(LR_BRACKET);
				State = 2679;
				expression(0);
				State = 2680;
				Match(COMMA);
				State = 2681;
				expression(0);
				State = 2682;
				Match(RR_BRACKET);
				}
				break;
			case 24:
				_localctx = new Simple_callContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2684;
				Match(SYSTEM_USER);
				}
				break;
			case 25:
				_localctx = new Standard_callContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2685;
				Match(TRY_CONVERT);
				State = 2686;
				Match(LR_BRACKET);
				State = 2687;
				data_type();
				State = 2688;
				Match(COMMA);
				State = 2689;
				expression(0);
				State = 2690;
				Match(RR_BRACKET);
				}
				break;
			case 26:
				_localctx = new Cast_callContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2692;
				Match(TRY_CAST);
				State = 2693;
				Match(LR_BRACKET);
				State = 2694;
				expression(0);
				State = 2695;
				Match(AS);
				State = 2696;
				((Cast_callContext)_localctx).alias = data_type();
				State = 2697;
				Match(RR_BRACKET);
				}
				break;
			case 27:
				_localctx = new Expression_callContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2699;
				Match(TRY_PARSE);
				State = 2700;
				Match(LR_BRACKET);
				State = 2701;
				((Expression_callContext)_localctx).left = expression(0);
				State = 2702;
				Match(AS);
				State = 2703;
				((Expression_callContext)_localctx).alias = data_type();
				State = 2706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2704;
					Match(USING);
					State = 2705;
					((Expression_callContext)_localctx).right = expression(0);
					}
				}

				State = 2708;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public ExpressionContext whenExpr;
		public ExpressionContext thenExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(tsqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(tsqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 248, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2712;
			Match(WHEN);
			State = 2713;
			_localctx.whenExpr = expression(0);
			State = 2714;
			Match(THEN);
			State = 2715;
			_localctx.thenExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_search_condition_sectionContext : ParserRuleContext {
		public Search_conditionContext whenExpr;
		public ExpressionContext thenExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(tsqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(tsqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_search_condition_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSwitch_search_condition_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSwitch_search_condition_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_search_condition_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_search_condition_sectionContext switch_search_condition_section() {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(Context, State);
		EnterRule(_localctx, 250, RULE_switch_search_condition_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2717;
			Match(WHEN);
			State = 2718;
			_localctx.whenExpr = search_condition(0);
			State = 2719;
			Match(THEN);
			State = 2720;
			_localctx.thenExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(Context, State);
		EnterRule(_localctx, 252, RULE_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2722;
				Match(WITH);
				}
			}

			State = 2725;
			Match(LR_BRACKET);
			State = 2726;
			table_hint();
			State = 2731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2727;
				Match(COMMA);
				State = 2728;
				table_hint();
				}
				}
				State = 2733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2734;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_with_table_hintsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_with_table_hints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterInsert_with_table_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitInsert_with_table_hints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_with_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_with_table_hintsContext insert_with_table_hints() {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(Context, State);
		EnterRule(_localctx, 254, RULE_insert_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2736;
			Match(WITH);
			State = 2737;
			Match(LR_BRACKET);
			State = 2738;
			table_hint();
			State = 2743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2739;
				Match(COMMA);
				State = 2740;
				table_hint();
				}
				}
				State = 2745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2746;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOEXPAND() { return GetToken(tsqlParser.NOEXPAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(tsqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(tsqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(tsqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(tsqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(tsqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCESEEK() { return GetToken(tsqlParser.FORCESEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(tsqlParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(tsqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(tsqlParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(tsqlParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(Context, State);
		EnterRule(_localctx, 256, RULE_table_hint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOEXPAND) {
				{
				State = 2748;
				Match(NOEXPAND);
				}
			}

			State = 2789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
			case 1:
				{
				State = 2751;
				Match(INDEX);
				State = 2752;
				Match(LR_BRACKET);
				State = 2753;
				index_value();
				State = 2758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2754;
					Match(COMMA);
					State = 2755;
					index_value();
					}
					}
					State = 2760;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2761;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 2763;
				Match(INDEX);
				State = 2764;
				Match(EQUAL);
				State = 2765;
				index_value();
				}
				break;
			case 3:
				{
				State = 2766;
				Match(FORCESEEK);
				State = 2781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2767;
					Match(LR_BRACKET);
					State = 2768;
					index_value();
					State = 2769;
					Match(LR_BRACKET);
					State = 2770;
					Match(ID);
					State = 2775;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2771;
						Match(COMMA);
						State = 2772;
						Match(ID);
						}
						}
						State = 2777;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2778;
					Match(RR_BRACKET);
					State = 2779;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				State = 2783;
				Match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				State = 2784;
				Match(SNAPSHOT);
				}
				break;
			case 6:
				{
				State = 2785;
				Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 2786;
				Match(EQUAL);
				State = 2787;
				Match(DECIMAL);
				}
				break;
			case 7:
				{
				State = 2788;
				Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(Context, State);
		EnterRule(_localctx, 258, RULE_index_value);
		try {
			State = 2793;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2791;
				r_id();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2792;
				Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(Context, State);
		EnterRule(_localctx, 260, RULE_column_alias_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2795;
			Match(LR_BRACKET);
			State = 2796;
			column_alias();
			State = 2801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2797;
				Match(COMMA);
				State = 2798;
				column_alias();
				}
				}
				State = 2803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2804;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 262, RULE_column_alias);
		try {
			State = 2808;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2806;
				r_id();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2807;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_starContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(tsqlParser.STAR, 0); }
		public A_starContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_star; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterA_star(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitA_star(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitA_star(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public A_starContext a_star() {
		A_starContext _localctx = new A_starContext(Context, State);
		EnterRule(_localctx, 264, RULE_a_star);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2810;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_value_constructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(tsqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_listContext[] value_list() {
			return GetRuleContexts<Value_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_listContext value_list(int i) {
			return GetRuleContext<Value_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_value_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_value_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_value_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_value_constructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_value_constructorContext table_value_constructor() {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(Context, State);
		EnterRule(_localctx, 266, RULE_table_value_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812;
			Match(VALUES);
			State = 2813;
			value_list();
			State = 2818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2814;
				Match(COMMA);
				State = 2815;
				value_list();
				}
				}
				State = 2820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 268, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2821;
			expression(0);
			State = 2826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2822;
				Match(COMMA);
				State = 2823;
				expression(0);
				}
				}
				State = 2828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		public Value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterValue_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitValue_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_listContext value_list() {
		Value_listContext _localctx = new Value_listContext(Context, State);
		EnterRule(_localctx, 270, RULE_value_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2829;
			Match(LR_BRACKET);
			State = 2830;
			expression_list();
			State = 2831;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Next_value_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(tsqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public Next_value_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next_value_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterNext_value_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitNext_value_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNext_value_for(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Next_value_forContext next_value_for() {
		Next_value_forContext _localctx = new Next_value_forContext(Context, State);
		EnterRule(_localctx, 272, RULE_next_value_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2833;
			Match(NEXT);
			State = 2834;
			Match(VALUE);
			State = 2835;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Next_value_for_functionContext : ParserRuleContext {
		public Func_proc_nameContext args;
		[System.Diagnostics.DebuggerNonUserCode] public Next_value_forContext next_value_for() {
			return GetRuleContext<Next_value_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		public Next_value_for_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next_value_for_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterNext_value_for_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitNext_value_for_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNext_value_for_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Next_value_for_functionContext next_value_for_function() {
		Next_value_for_functionContext _localctx = new Next_value_for_functionContext(Context, State);
		EnterRule(_localctx, 274, RULE_next_value_for_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2837;
			next_value_for();
			State = 2838;
			_localctx.args = func_proc_name();
			State = 2839;
			over_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(tsqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(tsqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(tsqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(tsqlParser.NTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(tsqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(tsqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(tsqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(tsqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRanking_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(Context, State);
		EnterRule(_localctx, 276, RULE_ranking_windowed_function);
		int _la;
		try {
			State = 2864;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2841;
				_la = TokenStream.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2842;
				Match(LR_BRACKET);
				State = 2843;
				Match(RR_BRACKET);
				State = 2844;
				over_clause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
			case NTILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2845;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & 576460754450907137L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2846;
				Match(LR_BRACKET);
				State = 2847;
				expression(0);
				State = 2848;
				Match(RR_BRACKET);
				State = 2849;
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2851;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2852;
				Match(LR_BRACKET);
				State = 2853;
				expression(0);
				State = 2858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2854;
					Match(COMMA);
					State = 2855;
					expression(0);
					}
					}
					State = 2860;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2861;
				Match(RR_BRACKET);
				State = 2862;
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public IToken args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(tsqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(tsqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(tsqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(tsqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDEV() { return GetToken(tsqlParser.STDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDEVP() { return GetToken(tsqlParser.STDEVP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(tsqlParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARP() { return GetToken(tsqlParser.VARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public All_distinctContext all_distinct() {
			return GetRuleContext<All_distinctContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(tsqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_BIG() { return GetToken(tsqlParser.COUNT_BIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(tsqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_AGG() { return GetToken(tsqlParser.CHECKSUM_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(tsqlParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING_ID() { return GetToken(tsqlParser.GROUPING_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(Context, State);
		EnterRule(_localctx, 278, RULE_aggregate_windowed_function);
		int _la;
		try {
			State = 2907;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2866;
				_la = TokenStream.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & 100663315L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2867;
				Match(LR_BRACKET);
				State = 2869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 2868;
					all_distinct();
					}
				}

				State = 2871;
				expression(0);
				State = 2872;
				Match(RR_BRACKET);
				State = 2874;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,396,Context) ) {
				case 1:
					{
					State = 2873;
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2876;
				_la = TokenStream.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2877;
				Match(LR_BRACKET);
				State = 2883;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 2878;
					_localctx.args = Match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DISTINCT:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case LEFT:
				case NEXT:
				case NOT:
				case NULL:
				case NULLIF:
				case NUMERIC:
				case OVER:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case TRY_CAST:
				case TRY_CONVERT:
				case TRY_PARSE:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DATETIMEOFFSETFROMPARTS:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARSE:
				case PARTITION:
				case PATH:
				case PERCENTILE_CONT:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case STRING_AGG:
				case STRING_SPLIT:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 2880;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 2879;
						all_distinct();
						}
					}

					State = 2882;
					expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2885;
				Match(RR_BRACKET);
				State = 2887;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,399,Context) ) {
				case 1:
					{
					State = 2886;
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2889;
				Match(CHECKSUM_AGG);
				State = 2890;
				Match(LR_BRACKET);
				State = 2892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 2891;
					all_distinct();
					}
				}

				State = 2894;
				expression(0);
				State = 2895;
				Match(RR_BRACKET);
				}
				break;
			case GROUPING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2897;
				Match(GROUPING);
				State = 2898;
				Match(LR_BRACKET);
				State = 2899;
				expression(0);
				State = 2900;
				Match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2902;
				Match(GROUPING_ID);
				State = 2903;
				Match(LR_BRACKET);
				State = 2904;
				expression_list();
				State = 2905;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinctContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(tsqlParser.DISTINCT, 0); }
		public All_distinctContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAll_distinct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAll_distinct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_distinct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_distinctContext all_distinct() {
		All_distinctContext _localctx = new All_distinctContext(Context, State);
		EnterRule(_localctx, 280, RULE_all_distinct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(tsqlParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(tsqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 282, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2911;
			Match(OVER);
			State = 2912;
			Match(LR_BRACKET);
			State = 2916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2913;
				Match(PARTITION);
				State = 2914;
				Match(BY);
				State = 2915;
				expression_list();
				}
			}

			State = 2919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 2918;
				order_by_clause();
				}
			}

			State = 2922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 2921;
				row_or_range_clause();
				}
			}

			State = 2924;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(tsqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_or_range_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(Context, State);
		EnterRule(_localctx, 284, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2926;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2927;
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(tsqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(tsqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_extent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(Context, State);
		EnterRule(_localctx, 286, RULE_window_frame_extent);
		try {
			State = 2935;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2929;
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2930;
				Match(BETWEEN);
				State = 2931;
				window_frame_bound();
				State = 2932;
				Match(AND);
				State = 2933;
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(Context, State);
		EnterRule(_localctx, 288, RULE_window_frame_bound);
		try {
			State = 2939;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,406,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2937;
				window_frame_preceding();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2938;
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(tsqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(tsqlParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(tsqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_preceding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(Context, State);
		EnterRule(_localctx, 290, RULE_window_frame_preceding);
		try {
			State = 2947;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2941;
				Match(UNBOUNDED);
				State = 2942;
				Match(PRECEDING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2943;
				Match(DECIMAL);
				State = 2944;
				Match(PRECEDING);
				}
				break;
			case CURRENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2945;
				Match(CURRENT);
				State = 2946;
				Match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(tsqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(tsqlParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_following(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(Context, State);
		EnterRule(_localctx, 292, RULE_window_frame_following);
		try {
			State = 2953;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2949;
				Match(UNBOUNDED);
				State = 2950;
				Match(FOLLOWING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2951;
				Match(DECIMAL);
				State = 2952;
				Match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_database_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESTREAM() { return GetToken(tsqlParser.FILESTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Database_filestream_optionContext[] database_filestream_option() {
			return GetRuleContexts<Database_filestream_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Database_filestream_optionContext database_filestream_option(int i) {
			return GetRuleContext<Database_filestream_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_LANGUAGE() { return GetToken(tsqlParser.DEFAULT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return GetToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_TRIGGERS() { return GetToken(tsqlParser.NESTED_TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM_NOISE_WORDS() { return GetToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DIGIT_YEAR_CUTOFF() { return GetToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DB_CHAINING() { return GetToken(tsqlParser.DB_CHAINING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTWORTHY() { return GetToken(tsqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_database_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_database_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_database_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_database_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_database_optionContext create_database_option() {
		Create_database_optionContext _localctx = new Create_database_optionContext(Context, State);
		EnterRule(_localctx, 294, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			State = 2989;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILESTREAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2955;
				Match(FILESTREAM);
				{
				State = 2956;
				database_filestream_option();
				State = 2961;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,409,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2957;
						Match(COMMA);
						State = 2958;
						database_filestream_option();
						}
						} 
					}
					State = 2963;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,409,Context);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2964;
				Match(DEFAULT_LANGUAGE);
				State = 2965;
				Match(EQUAL);
				State = 2968;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FORCESEEK:
				case NEXT:
				case NUMERIC:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 2966;
					r_id();
					}
					break;
				case STRING:
					{
					State = 2967;
					Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2970;
				Match(DEFAULT_FULLTEXT_LANGUAGE);
				State = 2971;
				Match(EQUAL);
				State = 2974;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FORCESEEK:
				case NEXT:
				case NUMERIC:
				case VALUE:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATE:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case IO:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case ZONE:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 2972;
					r_id();
					}
					break;
				case STRING:
					{
					State = 2973;
					Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2976;
				Match(NESTED_TRIGGERS);
				State = 2977;
				Match(EQUAL);
				State = 2978;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2979;
				Match(TRANSFORM_NOISE_WORDS);
				State = 2980;
				Match(EQUAL);
				State = 2981;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2982;
				Match(TWO_DIGIT_YEAR_CUTOFF);
				State = 2983;
				Match(EQUAL);
				State = 2984;
				Match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2985;
				Match(DB_CHAINING);
				State = 2986;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRUSTWORTHY:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2987;
				Match(TRUSTWORTHY);
				State = 2988;
				_la = TokenStream.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_filestream_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_TRANSACTED_ACCESS() { return GetToken(tsqlParser.NON_TRANSACTED_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_NAME() { return GetToken(tsqlParser.DIRECTORY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(tsqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_filestream_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDatabase_filestream_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDatabase_filestream_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_filestream_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_filestream_optionContext database_filestream_option() {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(Context, State);
		EnterRule(_localctx, 296, RULE_database_filestream_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2991;
			Match(LR_BRACKET);
			State = 2998;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				State = 2992;
				Match(NON_TRANSACTED_ACCESS);
				State = 2993;
				Match(EQUAL);
				State = 2994;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				State = 2995;
				Match(DIRECTORY_NAME);
				State = 2996;
				Match(EQUAL);
				State = 2997;
				Match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3000;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_file_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_groupContext file_group() {
			return GetRuleContext<File_groupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_specContext file_spec() {
			return GetRuleContext<File_specContext>(0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_file_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDatabase_file_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDatabase_file_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_file_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_file_specContext database_file_spec() {
		Database_file_specContext _localctx = new Database_file_specContext(Context, State);
		EnterRule(_localctx, 298, RULE_database_file_spec);
		try {
			State = 3004;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILEGROUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3002;
				file_group();
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3003;
				file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROUP() { return GetToken(tsqlParser.FILEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_specContext[] file_spec() {
			return GetRuleContexts<File_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_specContext file_spec(int i) {
			return GetRuleContext<File_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONTAINS() { return GetTokens(tsqlParser.CONTAINS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS(int i) {
			return GetToken(tsqlParser.CONTAINS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESTREAM() { return GetToken(tsqlParser.FILESTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_OPTIMIZED_DATA() { return GetToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public File_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFile_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFile_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_groupContext file_group() {
		File_groupContext _localctx = new File_groupContext(Context, State);
		EnterRule(_localctx, 300, RULE_file_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3006;
			Match(FILEGROUP);
			State = 3007;
			r_id();
			State = 3010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
			case 1:
				{
				State = 3008;
				Match(CONTAINS);
				State = 3009;
				Match(FILESTREAM);
				}
				break;
			}
			State = 3013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 3012;
				Match(DEFAULT);
				}
			}

			State = 3017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 3015;
				Match(CONTAINS);
				State = 3016;
				Match(MEMORY_OPTIMIZED_DATA);
				}
			}

			State = 3019;
			file_spec();
			State = 3024;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,418,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3020;
					Match(COMMA);
					State = 3021;
					file_spec();
					}
					} 
				}
				State = 3026;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,418,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_specContext : ParserRuleContext {
		public IToken r_file;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(tsqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(tsqlParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(tsqlParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILENAME() { return GetToken(tsqlParser.FILENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(tsqlParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(tsqlParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(tsqlParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_sizeContext[] file_size() {
			return GetRuleContexts<File_sizeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_sizeContext file_size(int i) {
			return GetRuleContext<File_sizeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXSIZE() { return GetToken(tsqlParser.MAXSIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEGROWTH() { return GetToken(tsqlParser.FILEGROWTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLIMITED() { return GetToken(tsqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFile_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFile_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_specContext file_spec() {
		File_specContext _localctx = new File_specContext(Context, State);
		EnterRule(_localctx, 302, RULE_file_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3027;
			Match(LR_BRACKET);
			State = 3028;
			Match(NAME);
			State = 3029;
			Match(EQUAL);
			State = 3032;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 3030;
				r_id();
				}
				break;
			case STRING:
				{
				State = 3031;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3034;
				Match(COMMA);
				}
			}

			State = 3037;
			Match(FILENAME);
			State = 3038;
			Match(EQUAL);
			State = 3039;
			_localctx.r_file = Match(STRING);
			State = 3041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3040;
				Match(COMMA);
				}
			}

			State = 3049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIZE) {
				{
				State = 3043;
				Match(SIZE);
				State = 3044;
				Match(EQUAL);
				State = 3045;
				file_size();
				State = 3047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3046;
					Match(COMMA);
					}
				}

				}
			}

			State = 3060;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAXSIZE) {
				{
				State = 3051;
				Match(MAXSIZE);
				State = 3052;
				Match(EQUAL);
				State = 3055;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
					{
					State = 3053;
					file_size();
					}
					break;
				case UNLIMITED:
					{
					State = 3054;
					Match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3057;
					Match(COMMA);
					}
				}

				}
			}

			State = 3068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILEGROWTH) {
				{
				State = 3062;
				Match(FILEGROWTH);
				State = 3063;
				Match(EQUAL);
				State = 3064;
				file_size();
				State = 3066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3065;
					Match(COMMA);
					}
				}

				}
			}

			State = 3070;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public R_idContext server;
		public R_idContext database;
		public R_idContext schema;
		public R_idContext table;
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(tsqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(tsqlParser.DOT, i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFull_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFull_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(Context, State);
		EnterRule(_localctx, 304, RULE_full_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
			case 1:
				{
				State = 3072;
				_localctx.server = r_id();
				State = 3073;
				Match(DOT);
				State = 3074;
				_localctx.database = r_id();
				State = 3075;
				Match(DOT);
				State = 3076;
				_localctx.schema = r_id();
				State = 3077;
				Match(DOT);
				}
				break;
			case 2:
				{
				State = 3079;
				_localctx.database = r_id();
				State = 3080;
				Match(DOT);
				State = 3082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1108101562369L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9220850245999262719L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -8070459558675465653L) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & -6413215653674627739L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 41918743507263L) != 0)) {
					{
					State = 3081;
					_localctx.schema = r_id();
					}
				}

				State = 3084;
				Match(DOT);
				}
				break;
			case 3:
				{
				State = 3086;
				_localctx.schema = r_id();
				State = 3087;
				Match(DOT);
				}
				break;
			}
			State = 3091;
			_localctx.table = r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public R_idContext database;
		public R_idContext schema;
		public R_idContext table;
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(tsqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(tsqlParser.DOT, i);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 306, RULE_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,432,Context) ) {
			case 1:
				{
				State = 3093;
				_localctx.database = r_id();
				State = 3094;
				Match(DOT);
				State = 3096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1108101562369L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9220850245999262719L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -8070459558675465653L) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & -6413215653674627739L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 41918743507263L) != 0)) {
					{
					State = 3095;
					_localctx.schema = r_id();
					}
				}

				State = 3098;
				Match(DOT);
				}
				break;
			case 2:
				{
				State = 3100;
				_localctx.schema = r_id();
				State = 3101;
				Match(DOT);
				}
				break;
			}
			State = 3105;
			_localctx.table = r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public R_idContext schema;
		public R_idContext name;
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(tsqlParser.DOT, 0); }
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(Context, State);
		EnterRule(_localctx, 308, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
			case 1:
				{
				State = 3107;
				_localctx.schema = r_id();
				State = 3108;
				Match(DOT);
				}
				break;
			}
			State = 3112;
			_localctx.name = r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_nameContext : ParserRuleContext {
		public R_idContext database;
		public R_idContext schema;
		public R_idContext procedure;
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(tsqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(tsqlParser.DOT, i);
		}
		public Func_proc_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_nameContext func_proc_name() {
		Func_proc_nameContext _localctx = new Func_proc_nameContext(Context, State);
		EnterRule(_localctx, 310, RULE_func_proc_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
			case 1:
				{
				State = 3114;
				_localctx.database = r_id();
				State = 3115;
				Match(DOT);
				State = 3117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1108101562369L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9220850245999262719L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -8070459558675465653L) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & -6413215653674627739L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 41918743507263L) != 0)) {
					{
					State = 3116;
					_localctx.schema = r_id();
					}
				}

				State = 3119;
				Match(DOT);
				}
				break;
			case 2:
				{
				{
				State = 3121;
				_localctx.schema = r_id();
				}
				State = 3122;
				Match(DOT);
				}
				break;
			}
			State = 3126;
			_localctx.procedure = r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_object(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(Context, State);
		EnterRule(_localctx, 312, RULE_ddl_object);
		try {
			State = 3130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3128;
				full_table_name();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3129;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public Table_nameContext table;
		public R_idContext name;
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(tsqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(Context, State);
		EnterRule(_localctx, 314, RULE_full_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,437,Context) ) {
			case 1:
				{
				State = 3132;
				_localctx.table = table_name();
				State = 3133;
				Match(DOT);
				}
				break;
			}
			State = 3137;
			_localctx.name = r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext[] r_id() {
			return GetRuleContexts<R_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id(int i) {
			return GetRuleContext<R_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(Context, State);
		EnterRule(_localctx, 316, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3139;
			r_id();
			State = 3144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3140;
				Match(COMMA);
				State = 3141;
				r_id();
				}
				}
				State = 3146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 318, RULE_cursor_name);
		try {
			State = 3149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3147;
				r_id();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3148;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_off(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(Context, State);
		EnterRule(_localctx, 320, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3151;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERED() { return GetToken(tsqlParser.CLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONCLUSTERED() { return GetToken(tsqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustered(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(Context, State);
		EnterRule(_localctx, 322, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3153;
			_la = TokenStream.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_notnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(Context, State);
		EnterRule(_localctx, 324, RULE_null_notnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3155;
				Match(NOT);
				}
			}

			State = 3158;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(tsqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(tsqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_CHECKSUM() { return GetToken(tsqlParser.BINARY_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(tsqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(Context, State);
		EnterRule(_localctx, 326, RULE_scalar_function_name);
		try {
			State = 3165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3160;
				func_proc_name();
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3161;
				Match(RIGHT);
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3162;
				Match(LEFT);
				}
				break;
			case BINARY_CHECKSUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3163;
				Match(BINARY_CHECKSUM);
				}
				break;
			case CHECKSUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3164;
				Match(CHECKSUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 328, RULE_default_value);
		try {
			State = 3169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3167;
				Match(NULL);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3168;
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken dollar;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(tsqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(tsqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(tsqlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(tsqlParser.DOLLAR, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 330, RULE_constant);
		int _la;
		try {
			State = 3186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3171;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3172;
				Match(BINARY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 3173;
					sign();
					}
				}

				State = 3176;
				Match(DECIMAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 3177;
					sign();
					}
				}

				State = 3180;
				_la = TokenStream.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 3181;
					sign();
					}
				}

				State = 3184;
				_localctx.dollar = Match(DOLLAR);
				State = 3185;
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(tsqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(tsqlParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 332, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3188;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class R_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(tsqlParser.DOUBLE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(tsqlParser.SQUARE_BRACKET_ID, 0); }
		public R_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_r_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterR_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitR_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitR_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public R_idContext r_id() {
		R_idContext _localctx = new R_idContext(Context, State);
		EnterRule(_localctx, 334, RULE_r_id);
		try {
			State = 3193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case NEXT:
			case NUMERIC:
			case VALUE:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATE:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case IO:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ZONE:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3190;
				simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3191;
				Match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3192;
				Match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(tsqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(tsqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE() { return GetToken(tsqlParser.ABSOLUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLY() { return GetToken(tsqlParser.APPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(tsqlParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(tsqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE64() { return GetToken(tsqlParser.BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLER() { return GetToken(tsqlParser.CALLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(tsqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(tsqlParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_AGG() { return GetToken(tsqlParser.CHECKSUM_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(tsqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(tsqlParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTROL() { return GetToken(tsqlParser.CONTROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COOKIE() { return GetToken(tsqlParser.COOKIE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(tsqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_BIG() { return GetToken(tsqlParser.COUNT_BIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(tsqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY() { return GetToken(tsqlParser.DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETED() { return GetToken(tsqlParser.DELETED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(tsqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(tsqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(tsqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPAND() { return GetToken(tsqlParser.EXPAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(tsqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_FORWARD() { return GetToken(tsqlParser.FAST_FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(tsqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(tsqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(tsqlParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(tsqlParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCESEEK() { return GetToken(tsqlParser.FORCESEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD_ONLY() { return GetToken(tsqlParser.FORWARD_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLSCAN() { return GetToken(tsqlParser.FULLSCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(tsqlParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(tsqlParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING_ID() { return GetToken(tsqlParser.GROUPING_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(tsqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPERSONATE() { return GetToken(tsqlParser.IMPERSONATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(tsqlParser.INSENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(tsqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERTED() { return GetToken(tsqlParser.INSERTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(tsqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEP() { return GetToken(tsqlParser.KEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEEPFIXED() { return GetToken(tsqlParser.KEEPFIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYSET() { return GetToken(tsqlParser.KEYSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(tsqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(tsqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(tsqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(tsqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(tsqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(tsqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_ESCALATION() { return GetToken(tsqlParser.LOCK_ESCALATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIN() { return GetToken(tsqlParser.LOGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(tsqlParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MARK() { return GetToken(tsqlParser.MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(tsqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXDOP() { return GetToken(tsqlParser.MAXDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXRECURSION() { return GetToken(tsqlParser.MAXRECURSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(tsqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(tsqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(tsqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOUNT() { return GetToken(tsqlParser.NOCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOEXPAND() { return GetToken(tsqlParser.NOEXPAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORECOMPUTE() { return GetToken(tsqlParser.NORECOMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(tsqlParser.NTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(tsqlParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(tsqlParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(tsqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(tsqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMISTIC() { return GetToken(tsqlParser.OPTIMISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(tsqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(tsqlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(tsqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERIZATION() { return GetToken(tsqlParser.PARAMETERIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(tsqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(tsqlParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(tsqlParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(tsqlParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(tsqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(tsqlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(tsqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(tsqlParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOMPILE() { return GetToken(tsqlParser.RECOMPILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE() { return GetToken(tsqlParser.RELATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(tsqlParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(tsqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROBUST() { return GetToken(tsqlParser.ROBUST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROOT() { return GetToken(tsqlParser.ROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(tsqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWGUID() { return GetToken(tsqlParser.ROWGUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(tsqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAMPLE() { return GetToken(tsqlParser.SAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMABINDING() { return GetToken(tsqlParser.SCHEMABINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(tsqlParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL_LOCKS() { return GetToken(tsqlParser.SCROLL_LOCKS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(tsqlParser.SELF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(tsqlParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(tsqlParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(tsqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(tsqlParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_STREAM() { return GetToken(tsqlParser.STATS_STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDEV() { return GetToken(tsqlParser.STDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDEVP() { return GetToken(tsqlParser.STDEVP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(tsqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTIMAGE_ON() { return GetToken(tsqlParser.TEXTIMAGE_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(tsqlParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(tsqlParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(tsqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(tsqlParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_WARNING() { return GetToken(tsqlParser.TYPE_WARNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(tsqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(tsqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(tsqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(tsqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(tsqlParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARP() { return GetToken(tsqlParser.VARP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(tsqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_METADATA() { return GetToken(tsqlParser.VIEW_METADATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEWS() { return GetToken(tsqlParser.VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(tsqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(tsqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(tsqlParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(tsqlParser.ZONE, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(Context, State);
		EnterRule(_localctx, 336, RULE_simple_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3195;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1108101562369L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -9220850245999262719L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & -8070459558675465653L) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & -6413215653674627739L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 35321673740607L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(tsqlParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(tsqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(tsqlParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(tsqlParser.IS, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 338, RULE_comparison_operator);
		try {
			State = 3213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,448,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3197;
				Match(EQUAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3198;
				Match(GREATER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3199;
				Match(LESS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3200;
				Match(LESS);
				State = 3201;
				Match(EQUAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3202;
				Match(GREATER);
				State = 3203;
				Match(EQUAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3204;
				Match(LESS);
				State = 3205;
				Match(GREATER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3206;
				Match(EXCLAMATION);
				State = 3207;
				Match(EQUAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3208;
				Match(EXCLAMATION);
				State = 3209;
				Match(GREATER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3210;
				Match(EXCLAMATION);
				State = 3211;
				Match(LESS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3212;
				Match(IS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(tsqlParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(tsqlParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGN() { return GetToken(tsqlParser.MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(tsqlParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(tsqlParser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(tsqlParser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(tsqlParser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(tsqlParser.OR_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 340, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3215;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_sizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KB() { return GetToken(tsqlParser.KB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MB() { return GetToken(tsqlParser.MB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB() { return GetToken(tsqlParser.GB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TB() { return GetToken(tsqlParser.TB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(tsqlParser.MODULE, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_size; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFile_size(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFile_size(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_size(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_sizeContext file_size() {
		File_sizeContext _localctx = new File_sizeContext(Context, State);
		EnterRule(_localctx, 342, RULE_file_size);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3217;
			Match(DECIMAL);
			State = 3219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & 137439477761L) != 0) || _la==TB || _la==MODULE) {
				{
				State = 3218;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & 137439477761L) != 0) || _la==TB || _la==MODULE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_procedureContext : ParserRuleContext {
		public IToken proc;
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clausesContext sql_clauses() {
			return GetRuleContext<Sql_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC() { return GetToken(tsqlParser.PROC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(tsqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(tsqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_procedureContext create_or_alter_procedure() {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(Context, State);
		EnterRule(_localctx, 344, RULE_create_or_alter_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 3221;
				Match(CREATE);
				State = 3224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 3222;
					Match(OR);
					State = 3223;
					Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 3226;
				Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3229;
			_localctx.proc = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				_localctx.proc = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3230;
			func_proc_name();
			State = 3233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 3231;
				Match(SEMI);
				State = 3232;
				Match(DECIMAL);
				}
			}

			State = 3249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				State = 3236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 3235;
					Match(LR_BRACKET);
					}
				}

				State = 3238;
				procedure_param();
				State = 3243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3239;
					Match(COMMA);
					State = 3240;
					procedure_param();
					}
					}
					State = 3245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RR_BRACKET) {
					{
					State = 3246;
					Match(RR_BRACKET);
					}
				}

				}
			}

			State = 3260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3251;
				Match(WITH);
				State = 3252;
				procedure_option();
				State = 3257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3253;
					Match(COMMA);
					State = 3254;
					procedure_option();
					}
					}
					State = 3259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3262;
				Match(FOR);
				State = 3263;
				Match(REPLICATION);
				}
			}

			State = 3266;
			Match(AS);
			State = 3267;
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_or_alter_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(tsqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_body_returns_selectContext func_body_returns_select() {
			return GetRuleContext<Func_body_returns_selectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_body_returns_tableContext func_body_returns_table() {
			return GetRuleContext<Func_body_returns_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_body_returns_scalarContext func_body_returns_scalar() {
			return GetRuleContext<Func_body_returns_scalarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(tsqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_or_alter_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_or_alter_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_or_alter_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_or_alter_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_or_alter_functionContext create_or_alter_function() {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(Context, State);
		EnterRule(_localctx, 346, RULE_create_or_alter_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE:
				{
				{
				State = 3269;
				Match(CREATE);
				State = 3272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 3270;
					Match(OR);
					State = 3271;
					Match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				State = 3274;
				Match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3277;
			Match(FUNCTION);
			State = 3278;
			func_proc_name();
			State = 3292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
			case 1:
				{
				{
				State = 3279;
				Match(LR_BRACKET);
				State = 3280;
				procedure_param();
				State = 3285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3281;
					Match(COMMA);
					State = 3282;
					procedure_param();
					}
					}
					State = 3287;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3288;
				Match(RR_BRACKET);
				}
				}
				break;
			case 2:
				{
				State = 3290;
				Match(LR_BRACKET);
				State = 3291;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,464,Context) ) {
			case 1:
				{
				State = 3294;
				func_body_returns_select();
				}
				break;
			case 2:
				{
				State = 3295;
				func_body_returns_table();
				}
				break;
			case 3:
				{
				State = 3296;
				func_body_returns_scalar();
				}
				break;
			}
			State = 3300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,465,Context) ) {
			case 1:
				{
				State = 3299;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_selectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(tsqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(tsqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_select(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_selectContext func_body_returns_select() {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(Context, State);
		EnterRule(_localctx, 348, RULE_func_body_returns_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3302;
			Match(RETURNS);
			State = 3303;
			Match(TABLE);
			State = 3313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3304;
				Match(WITH);
				State = 3305;
				function_option();
				State = 3310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3306;
					Match(COMMA);
					State = 3307;
					function_option();
					}
					}
					State = 3312;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3315;
				Match(AS);
				}
			}

			State = 3318;
			Match(RETURN);
			State = 3324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,469,Context) ) {
			case 1:
				{
				State = 3319;
				Match(LR_BRACKET);
				State = 3320;
				select_statement();
				State = 3321;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 3323;
				select_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(tsqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(tsqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(tsqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(tsqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(tsqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(tsqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_tableContext func_body_returns_table() {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(Context, State);
		EnterRule(_localctx, 350, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3326;
			Match(RETURNS);
			State = 3327;
			Match(LOCAL_ID);
			State = 3328;
			table_type_definition();
			State = 3338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3329;
				Match(WITH);
				State = 3330;
				function_option();
				State = 3335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3331;
					Match(COMMA);
					State = 3332;
					function_option();
					}
					}
					State = 3337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3340;
				Match(AS);
				}
			}

			State = 3343;
			Match(BEGIN);
			State = 3347;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,473,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3344;
					sql_clause();
					}
					} 
				}
				State = 3349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,473,Context);
			}
			State = 3350;
			Match(RETURN);
			State = 3352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 3351;
				Match(SEMI);
				}
			}

			State = 3354;
			Match(END);
			State = 3356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,475,Context) ) {
			case 1:
				{
				State = 3355;
				Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_body_returns_scalarContext : ParserRuleContext {
		public ExpressionContext ret;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(tsqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(tsqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(tsqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(tsqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext[] function_option() {
			return GetRuleContexts<Function_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_optionContext function_option(int i) {
			return GetRuleContext<Function_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(tsqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(tsqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(tsqlParser.COMMA, i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body_returns_scalar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunc_body_returns_scalar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunc_body_returns_scalar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_body_returns_scalar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_body_returns_scalarContext func_body_returns_scalar() {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(Context, State);
		EnterRule(_localctx, 352, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3358;
			Match(RETURNS);
			State = 3359;
			data_type();
			State = 3369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3360;
				Match(WITH);
				State = 3361;
				function_option();
				State = 3366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3362;
					Match(COMMA);
					State = 3363;
					function_option();
					}
					}
					State = 3368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3371;
				Match(AS);
				}
			}

			State = 3374;
			Match(BEGIN);
			State = 3378;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,479,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3375;
					sql_clause();
					}
					} 
				}
				State = 3380;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,479,Context);
			}
			State = 3381;
			Match(RETURN);
			State = 3382;
			_localctx.ret = expression(0);
			State = 3384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 3383;
				Match(SEMI);
				}
			}

			State = 3386;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Default_valueContext default_val;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(tsqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(tsqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(tsqlParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(tsqlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(tsqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(Context, State);
		EnterRule(_localctx, 354, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3388;
			Match(LOCAL_ID);
			State = 3392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,481,Context) ) {
			case 1:
				{
				State = 3389;
				r_id();
				State = 3390;
				Match(DOT);
				}
				break;
			}
			State = 3395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3394;
				Match(AS);
				}
			}

			State = 3397;
			data_type();
			State = 3399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARYING) {
				{
				State = 3398;
				Match(VARYING);
				}
			}

			State = 3403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 3401;
				Match(EQUAL);
				State = 3402;
				_localctx.default_val = default_value();
				}
			}

			State = 3406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & 32771L) != 0)) {
				{
				State = 3405;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & 32771L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOMPILE() { return GetToken(tsqlParser.RECOMPILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(Context, State);
		EnterRule(_localctx, 356, RULE_procedure_option);
		try {
			State = 3411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3408;
				Match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3409;
				Match(RECOMPILE);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3410;
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMABINDING() { return GetToken(tsqlParser.SCHEMABINDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(tsqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL() { return GetTokens(tsqlParser.NULL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL(int i) {
			return GetToken(tsqlParser.NULL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(tsqlParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(tsqlParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunction_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunction_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_optionContext function_option() {
		Function_optionContext _localctx = new Function_optionContext(Context, State);
		EnterRule(_localctx, 358, RULE_function_option);
		try {
			State = 3425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3413;
				Match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3414;
				Match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3415;
				Match(RETURNS);
				State = 3416;
				Match(NULL);
				State = 3417;
				Match(ON);
				State = 3418;
				Match(NULL);
				State = 3419;
				Match(INPUT);
				}
				break;
			case CALLED:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3420;
				Match(CALLED);
				State = 3421;
				Match(ON);
				State = 3422;
				Match(NULL);
				State = 3423;
				Match(INPUT);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3424;
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Percentile_contContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTILE_CONT() { return GetToken(tsqlParser.PERCENTILE_CONT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(tsqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(tsqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(tsqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(tsqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(tsqlParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(tsqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Percentile_contContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_percentile_cont; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPercentile_cont(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPercentile_cont(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPercentile_cont(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Percentile_contContext percentile_cont() {
		Percentile_contContext _localctx = new Percentile_contContext(Context, State);
		EnterRule(_localctx, 360, RULE_percentile_cont);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3427;
			Match(PERCENTILE_CONT);
			State = 3428;
			Match(LR_BRACKET);
			State = 3429;
			expression(0);
			State = 3430;
			Match(RR_BRACKET);
			State = 3431;
			Match(WITHIN);
			State = 3432;
			Match(GROUP);
			State = 3433;
			Match(LR_BRACKET);
			State = 3434;
			order_by_clause();
			State = 3435;
			Match(RR_BRACKET);
			State = 3436;
			over_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_aggContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_AGG() { return GetToken(tsqlParser.STRING_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(tsqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(tsqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(tsqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(tsqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(tsqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(tsqlParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(tsqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public String_aggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_agg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterString_agg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitString_agg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_agg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_aggContext string_agg() {
		String_aggContext _localctx = new String_aggContext(Context, State);
		EnterRule(_localctx, 362, RULE_string_agg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3438;
			Match(STRING_AGG);
			State = 3439;
			Match(LR_BRACKET);
			State = 3440;
			expression(0);
			State = 3441;
			Match(COMMA);
			State = 3442;
			expression(0);
			State = 3443;
			Match(RR_BRACKET);
			State = 3444;
			Match(WITHIN);
			State = 3445;
			Match(GROUP);
			State = 3446;
			Match(LR_BRACKET);
			State = 3447;
			order_by_clause();
			State = 3448;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public R_idContext r_id() {
			return GetRuleContext<R_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(tsqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(tsqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(tsqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(tsqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(tsqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME2() { return GetToken(tsqlParser.DATETIME2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(tsqlParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(tsqlParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(tsqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT() { return GetToken(tsqlParser.TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(tsqlParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(tsqlParser.BIGINT, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 364, RULE_data_type);
		int _la;
		try {
			State = 3476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,492,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3450;
				r_id();
				State = 3452;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,488,Context) ) {
				case 1:
					{
					State = 3451;
					Match(IDENTITY);
					}
					break;
				}
				State = 3461;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
				case 1:
					{
					State = 3454;
					Match(LR_BRACKET);
					State = 3455;
					_la = TokenStream.LA(1);
					if ( !(_la==MAX || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3458;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3456;
						Match(COMMA);
						State = 3457;
						Match(DECIMAL);
						}
					}

					State = 3460;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3463;
				Match(DATE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3464;
				Match(DATETIME2);
				State = 3465;
				Match(LR_BRACKET);
				State = 3466;
				Match(DECIMAL);
				State = 3467;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3468;
				Match(DOUBLE);
				State = 3470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRECISION) {
					{
					State = 3469;
					Match(PRECISION);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3472;
				Match(INT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3473;
				Match(TINYINT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3474;
				Match(SMALLINT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3475;
				Match(BIGINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 83: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 90: return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		case 92: return query_expression_sempred((Query_expressionContext)_localctx, predIndex);
		case 111: return table_source_sempred((Table_sourceContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 16);
		}
		return true;
	}
	private bool search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool query_expression_sempred(Query_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		}
		return true;
	}
	private bool table_source_sempred(Table_sourceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,469,3479,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		1,0,5,0,368,8,0,10,0,12,0,371,9,0,1,0,1,0,1,1,1,1,3,1,377,8,1,1,2,1,2,
		3,2,381,8,2,4,2,383,8,2,11,2,12,2,384,1,3,1,3,1,3,1,3,3,3,391,8,3,1,4,
		1,4,1,4,1,4,3,4,397,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,3,5,415,8,5,1,6,1,6,3,6,419,8,6,1,6,3,6,422,8,6,1,6,
		1,6,3,6,426,8,6,1,6,1,6,3,6,430,8,6,1,6,1,6,3,6,434,8,6,1,6,1,6,1,6,3,
		6,439,8,6,1,6,1,6,1,6,3,6,444,8,6,1,6,1,6,1,6,1,6,1,6,3,6,451,8,6,1,6,
		3,6,454,8,6,1,6,1,6,3,6,458,8,6,1,6,3,6,461,8,6,1,6,1,6,1,6,1,6,1,6,1,
		6,3,6,469,8,6,1,6,3,6,472,8,6,1,6,1,6,1,6,3,6,477,8,6,1,6,3,6,480,8,6,
		1,6,1,6,1,6,3,6,485,8,6,1,6,1,6,1,6,3,6,490,8,6,1,6,3,6,493,8,6,1,6,1,
		6,1,6,3,6,498,8,6,1,6,1,6,1,6,1,6,3,6,504,8,6,1,6,1,6,1,6,1,6,1,6,3,6,
		511,8,6,1,6,1,6,3,6,515,8,6,3,6,517,8,6,1,6,1,6,1,6,3,6,522,8,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,533,8,6,10,6,12,6,536,9,6,1,6,1,6,3,
		6,540,8,6,3,6,542,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,551,8,7,1,8,3,8,
		554,8,8,1,8,1,8,3,8,558,8,8,1,8,3,8,561,8,8,1,8,1,8,3,8,565,8,8,1,8,3,
		8,568,8,8,1,8,1,8,3,8,572,8,8,1,8,3,8,575,8,8,1,8,3,8,578,8,8,1,8,3,8,
		581,8,8,1,8,3,8,584,8,8,1,9,1,9,3,9,588,8,9,1,9,1,9,1,9,3,9,593,8,9,1,
		10,3,10,596,8,10,1,10,1,10,3,10,600,8,10,1,10,3,10,603,8,10,1,10,1,10,
		3,10,607,8,10,1,10,3,10,610,8,10,1,10,1,10,1,10,1,10,3,10,616,8,10,1,10,
		3,10,619,8,10,1,10,1,10,3,10,623,8,10,1,10,3,10,626,8,10,1,10,3,10,629,
		8,10,1,11,1,11,1,11,1,11,1,11,3,11,636,8,11,1,12,3,12,639,8,12,1,12,1,
		12,3,12,643,8,12,1,12,3,12,646,8,12,1,12,3,12,649,8,12,1,12,3,12,652,8,
		12,1,13,3,13,655,8,13,1,13,1,13,3,13,659,8,13,1,13,1,13,3,13,663,8,13,
		1,13,3,13,666,8,13,1,13,1,13,1,13,1,13,5,13,672,8,13,10,13,12,13,675,9,
		13,1,13,3,13,678,8,13,1,13,1,13,3,13,682,8,13,1,13,3,13,685,8,13,1,13,
		3,13,688,8,13,1,13,3,13,691,8,13,1,13,3,13,694,8,13,1,14,1,14,1,14,1,14,
		1,14,3,14,701,8,14,1,14,1,14,3,14,705,8,14,3,14,707,8,14,1,15,1,15,1,15,
		1,15,5,15,713,8,15,10,15,12,15,716,9,15,1,15,1,15,1,15,3,15,721,8,15,1,
		15,1,15,1,15,1,15,3,15,727,8,15,3,15,729,8,15,1,16,1,16,3,16,733,8,16,
		1,16,3,16,736,8,16,1,16,3,16,739,8,16,1,17,1,17,1,17,3,17,744,8,17,1,17,
		1,17,1,17,3,17,749,8,17,1,17,3,17,752,8,17,1,18,1,18,1,18,1,18,1,18,1,
		18,3,18,760,8,18,1,18,1,18,3,18,764,8,18,1,18,1,18,1,18,5,18,769,8,18,
		10,18,12,18,772,9,18,3,18,774,8,18,1,18,1,18,1,18,1,18,1,18,5,18,781,8,
		18,10,18,12,18,784,9,18,3,18,786,8,18,1,18,1,18,3,18,790,8,18,1,18,1,18,
		1,18,1,18,5,18,796,8,18,10,18,12,18,799,9,18,3,18,801,8,18,1,19,1,19,3,
		19,805,8,19,1,19,3,19,808,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,
		817,8,19,1,19,1,19,3,19,821,8,19,1,19,1,19,3,19,825,8,19,1,19,3,19,828,
		8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,3,20,844,8,20,1,20,1,20,3,20,848,8,20,1,20,1,20,1,20,1,20,3,20,854,
		8,20,3,20,856,8,20,1,20,3,20,859,8,20,1,21,1,21,1,21,1,21,1,21,1,21,3,
		21,867,8,21,1,21,1,21,1,21,1,21,3,21,873,8,21,1,21,1,21,1,21,3,21,878,
		8,21,1,21,3,21,881,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,890,8,
		22,1,22,1,22,1,22,1,22,5,22,896,8,22,10,22,12,22,899,9,22,3,22,901,8,22,
		1,22,1,22,1,22,1,22,1,22,3,22,908,8,22,1,22,3,22,911,8,22,1,23,1,23,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,951,8,24,1,24,3,24,954,8,24,
		1,25,1,25,1,25,1,25,3,25,960,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,3,25,972,8,25,3,25,974,8,25,1,25,3,25,977,8,25,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,3,26,1001,8,26,1,27,1,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,3,27,1012,8,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
		1020,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,1029,8,28,10,28,12,28,
		1032,9,28,5,28,1034,8,28,10,28,12,28,1037,9,28,3,28,1039,8,28,1,29,1,29,
		1,29,1,29,1,29,1,29,3,29,1047,8,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
		1,31,3,31,1057,8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,
		1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		3,38,1083,8,38,1,38,1,38,1,38,1,38,3,38,1089,8,38,1,38,1,38,1,38,1,38,
		1,38,1,38,1,38,1,38,1,38,3,38,1100,8,38,1,39,1,39,1,39,1,40,1,40,1,40,
		1,41,1,41,1,41,1,41,1,41,1,41,3,41,1114,8,41,1,42,1,42,1,42,1,42,1,42,
		1,42,3,42,1122,8,42,1,43,1,43,1,43,1,43,1,43,3,43,1129,8,43,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,3,44,1152,8,44,1,45,1,45,1,45,1,45,1,45,1,46,
		1,46,1,46,1,46,1,46,1,46,3,46,1165,8,46,1,47,1,47,1,47,1,47,3,47,1171,
		8,47,1,47,1,47,1,47,3,47,1176,8,47,1,47,3,47,1179,8,47,1,48,1,48,1,48,
		1,48,3,48,1185,8,48,1,48,1,48,3,48,1189,8,48,1,49,1,49,1,49,1,49,1,49,
		3,49,1196,8,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,3,50,1205,8,50,1,50,
		1,50,3,50,1209,8,50,1,51,1,51,1,51,1,51,3,51,1215,8,51,1,51,1,51,1,51,
		5,51,1220,8,51,10,51,12,51,1223,9,51,1,51,3,51,1226,8,51,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,1239,8,53,1,53,1,53,1,54,
		1,54,3,54,1245,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,1,56,3,56,1262,8,56,1,56,1,56,3,56,1266,8,56,1,56,
		1,56,1,56,1,57,1,57,1,57,3,57,1274,8,57,1,57,1,57,3,57,1278,8,57,1,57,
		1,57,1,57,1,57,5,57,1284,8,57,10,57,12,57,1287,9,57,1,57,3,57,1290,8,57,
		3,57,1292,8,57,1,58,1,58,3,58,1296,8,58,1,58,1,58,3,58,1300,8,58,1,58,
		1,58,3,58,1304,8,58,1,58,1,58,3,58,1308,8,58,1,58,1,58,1,58,1,58,3,58,
		1314,8,58,1,58,1,58,3,58,1318,8,58,3,58,1320,8,58,1,59,1,59,1,59,3,59,
		1325,8,59,1,59,1,59,1,59,1,59,5,59,1331,8,59,10,59,12,59,1334,9,59,3,59,
		1336,8,59,1,59,3,59,1339,8,59,1,59,1,59,1,59,1,59,1,59,5,59,1346,8,59,
		10,59,12,59,1349,9,59,1,59,1,59,3,59,1353,8,59,1,59,1,59,1,59,3,59,1358,
		8,59,1,59,3,59,1361,8,59,3,59,1363,8,59,1,60,1,60,3,60,1367,8,60,1,60,
		1,60,3,60,1371,8,60,1,60,3,60,1374,8,60,1,60,1,60,3,60,1378,8,60,1,61,
		1,61,1,62,1,62,3,62,1384,8,62,1,62,1,62,1,62,3,62,1389,8,62,1,62,1,62,
		1,62,1,62,1,62,3,62,1396,8,62,3,62,1398,8,62,1,62,1,62,3,62,1402,8,62,
		1,62,1,62,1,62,1,62,1,62,3,62,1409,8,62,1,62,1,62,3,62,1413,8,62,1,62,
		3,62,1416,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1425,8,62,1,62,
		3,62,1428,8,62,3,62,1430,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,
		1439,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1450,8,63,
		1,63,1,63,3,63,1454,8,63,3,63,1456,8,63,3,63,1458,8,63,1,64,1,64,1,64,
		1,64,3,64,1464,8,64,1,64,1,64,1,64,3,64,1469,8,64,1,64,1,64,1,64,1,64,
		1,64,3,64,1476,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,3,64,1489,8,64,3,64,1491,8,64,3,64,1493,8,64,1,64,3,64,1496,8,64,
		1,64,3,64,1499,8,64,1,65,1,65,1,65,1,65,1,65,3,65,1506,8,65,1,65,3,65,
		1509,8,65,1,65,1,65,1,65,1,65,3,65,1515,8,65,1,65,1,65,1,65,3,65,1520,
		8,65,3,65,1522,8,65,1,65,3,65,1525,8,65,1,65,1,65,1,65,1,65,3,65,1531,
		8,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1539,8,65,3,65,1541,8,65,1,65,
		3,65,1544,8,65,1,65,1,65,3,65,1548,8,65,1,65,3,65,1551,8,65,1,65,1,65,
		1,65,1,65,3,65,1557,8,65,1,65,3,65,1560,8,65,1,65,1,65,3,65,1564,8,65,
		1,65,3,65,1567,8,65,1,65,1,65,1,65,1,65,3,65,1573,8,65,1,65,3,65,1576,
		8,65,3,65,1578,8,65,1,66,1,66,3,66,1582,8,66,1,67,1,67,1,67,3,67,1587,
		8,67,1,68,1,68,1,68,1,68,1,69,1,69,3,69,1595,8,69,1,69,1,69,1,69,3,69,
		1600,8,69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,3,71,1609,8,71,1,71,5,71,
		1612,8,71,10,71,12,71,1615,9,71,1,72,1,72,3,72,1619,8,72,1,73,1,73,1,73,
		1,73,3,73,1625,8,73,1,73,1,73,3,73,1629,8,73,1,73,3,73,1632,8,73,1,73,
		1,73,3,73,1636,8,73,1,73,1,73,1,73,1,73,3,73,1642,8,73,1,73,1,73,1,73,
		1,73,1,73,1,73,3,73,1650,8,73,1,73,1,73,1,73,3,73,1655,8,73,3,73,1657,
		8,73,1,73,3,73,1660,8,73,1,73,5,73,1663,8,73,10,73,12,73,1666,9,73,1,74,
		1,74,3,74,1670,8,74,1,74,3,74,1673,8,74,1,74,1,74,1,74,3,74,1678,8,74,
		1,74,3,74,1681,8,74,1,74,3,74,1684,8,74,1,74,1,74,1,74,1,74,3,74,1690,
		8,74,1,74,1,74,1,74,1,74,3,74,1696,8,74,1,75,1,75,3,75,1700,8,75,1,75,
		1,75,1,75,3,75,1705,8,75,1,75,3,75,1708,8,75,1,75,1,75,1,75,3,75,1713,
		8,75,1,75,1,75,3,75,1717,8,75,1,75,1,75,3,75,1721,8,75,1,75,1,75,1,75,
		1,75,3,75,1727,8,75,1,75,1,75,1,75,1,75,3,75,1733,8,75,1,76,1,76,1,76,
		1,76,1,76,5,76,1740,8,76,10,76,12,76,1743,9,76,1,76,1,76,1,77,1,77,1,77,
		1,77,1,77,3,77,1752,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,
		1762,8,78,3,78,1764,8,78,3,78,1766,8,78,1,78,3,78,1769,8,78,1,78,3,78,
		1772,8,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1783,8,78,
		3,78,1785,8,78,3,78,1787,8,78,1,78,3,78,1790,8,78,1,79,3,79,1793,8,79,
		1,79,3,79,1796,8,79,1,79,3,79,1799,8,79,1,79,3,79,1802,8,79,1,79,3,79,
		1805,8,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1817,
		8,80,1,80,3,80,1820,8,80,1,80,3,80,1823,8,80,1,80,1,80,1,80,1,80,1,80,
		5,80,1830,8,80,10,80,12,80,1833,9,80,3,80,1835,8,80,1,80,3,80,1838,8,80,
		1,81,1,81,1,81,1,81,1,81,3,81,1845,8,81,1,81,3,81,1848,8,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1862,8,81,1,81,
		3,81,1865,8,81,1,81,1,81,1,81,1,81,1,81,3,81,1872,8,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1887,8,81,1,82,
		1,82,3,82,1891,8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
		4,83,1903,8,83,11,83,12,83,1904,1,83,1,83,3,83,1909,8,83,1,83,1,83,1,83,
		1,83,4,83,1915,8,83,11,83,12,83,1916,1,83,1,83,3,83,1921,8,83,1,83,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
		1,83,1,83,3,83,1941,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,5,83,1961,8,83,10,83,12,83,
		1964,9,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1974,8,84,1,85,
		1,85,1,86,1,86,1,86,3,86,1981,8,86,1,86,1,86,1,86,5,86,1986,8,86,10,86,
		12,86,1989,9,86,1,87,1,87,1,87,1,87,1,87,3,87,1996,8,87,1,87,1,87,1,87,
		1,87,1,87,1,88,1,88,3,88,2005,8,88,1,88,1,88,3,88,2009,8,88,1,88,1,88,
		1,88,1,88,1,88,1,88,1,88,1,88,3,88,2019,8,88,1,89,1,89,1,89,5,89,2024,
		8,89,10,89,12,89,2027,9,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
		5,90,2038,8,90,10,90,12,90,2041,9,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
		1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
		1,91,1,91,1,91,3,91,2067,8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,
		2076,8,91,1,91,1,91,1,91,1,91,3,91,2082,8,91,1,91,1,91,1,91,1,91,3,91,
		2088,8,91,1,91,1,91,1,91,1,91,3,91,2094,8,91,1,91,1,91,1,91,1,91,1,91,
		3,91,2101,8,91,1,92,1,92,1,92,1,92,1,92,1,92,3,92,2109,8,92,1,92,1,92,
		1,92,1,92,5,92,2115,8,92,10,92,12,92,2118,9,92,1,93,1,93,3,93,2122,8,93,
		1,93,1,93,3,93,2126,8,93,1,94,1,94,3,94,2130,8,94,1,94,3,94,2133,8,94,
		1,94,1,94,1,94,3,94,2138,8,94,1,94,1,94,3,94,2142,8,94,1,94,1,94,3,94,
		2146,8,94,1,94,1,94,1,94,1,94,1,94,5,94,2153,8,94,10,94,12,94,2156,9,94,
		3,94,2158,8,94,1,94,3,94,2161,8,94,1,94,1,94,3,94,2165,8,94,1,94,1,94,
		3,94,2169,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,95,2179,8,95,
		10,95,12,95,2182,9,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,
		2193,8,96,10,96,12,96,2196,9,96,1,96,1,96,3,96,2200,8,96,1,97,1,97,1,97,
		3,97,2205,8,97,1,97,1,97,3,97,2209,8,97,1,98,1,98,1,98,1,98,1,98,3,98,
		2216,8,98,1,99,1,99,1,99,1,99,1,99,5,99,2223,8,99,10,99,12,99,2226,9,99,
		1,99,1,99,1,99,1,99,3,99,2232,8,99,3,99,2234,8,99,1,100,1,100,1,100,1,
		100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,2248,8,101,1,
		101,1,101,1,101,1,101,1,101,1,101,3,101,2256,8,101,1,101,3,101,2259,8,
		101,3,101,2261,8,101,1,102,1,102,1,102,1,102,1,102,3,102,2268,8,102,1,
		103,1,103,3,103,2272,8,103,1,104,1,104,1,105,1,105,1,105,1,105,1,105,5,
		105,2281,8,105,10,105,12,105,2284,9,105,1,105,1,105,1,106,1,106,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
		5,106,2315,8,106,10,106,12,106,2318,9,106,1,106,1,106,1,106,1,106,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,2333,8,106,1,107,
		1,107,1,107,1,107,3,107,2339,8,107,1,108,1,108,1,108,5,108,2344,8,108,
		10,108,12,108,2347,9,108,1,109,1,109,1,109,3,109,2352,8,109,1,109,1,109,
		1,109,3,109,2357,8,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,2365,
		8,109,1,109,3,109,2368,8,109,3,109,2370,8,109,1,110,1,110,1,110,5,110,
		2375,8,110,10,110,12,110,2378,9,110,1,111,1,111,1,111,1,111,1,111,1,111,
		3,111,2386,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
		1,111,1,111,1,111,1,111,1,111,1,111,5,111,2403,8,111,10,111,12,111,2406,
		9,111,1,112,1,112,3,112,2410,8,112,1,112,3,112,2413,8,112,1,112,3,112,
		2416,8,112,1,112,1,112,3,112,2420,8,112,1,112,1,112,1,112,3,112,2425,8,
		112,3,112,2427,8,112,1,112,1,112,3,112,2431,8,112,1,112,1,112,3,112,2435,
		8,112,1,112,1,112,3,112,2439,8,112,1,112,1,112,1,112,1,112,1,112,3,112,
		2446,8,112,3,112,2448,8,112,3,112,2450,8,112,1,113,1,113,3,113,2454,8,
		113,1,113,1,113,1,113,3,113,2459,8,113,1,113,1,113,1,113,3,113,2464,8,
		113,1,114,1,114,1,115,1,115,1,116,3,116,2471,8,116,1,116,1,116,1,117,1,
		117,1,117,1,117,1,117,1,117,1,117,1,117,1,118,3,118,2484,8,118,1,118,1,
		118,3,118,2488,8,118,3,118,2490,8,118,1,118,3,118,2493,8,118,1,119,1,119,
		3,119,2497,8,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
		1,120,1,120,1,120,1,120,1,120,1,120,1,120,5,120,2515,8,120,10,120,12,120,
		2518,9,120,1,120,3,120,2521,8,120,1,120,1,120,3,120,2525,8,120,1,121,1,
		121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,3,122,2536,8,122,1,123,1,
		123,1,123,1,123,1,123,3,123,2543,8,123,1,123,1,123,1,123,1,123,1,123,1,
		123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,3,123,2566,8,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,2641,8,123,1,123,
		1,123,3,123,2645,8,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,3,123,2673,8,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,1,123,3,123,2707,8,123,1,123,1,123,3,123,2711,
		8,123,1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,1,125,1,126,
		3,126,2724,8,126,1,126,1,126,1,126,1,126,5,126,2730,8,126,10,126,12,126,
		2733,9,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,5,127,2742,8,127,
		10,127,12,127,2745,9,127,1,127,1,127,1,128,3,128,2750,8,128,1,128,1,128,
		1,128,1,128,1,128,5,128,2757,8,128,10,128,12,128,2760,9,128,1,128,1,128,
		1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,5,128,2774,
		8,128,10,128,12,128,2777,9,128,1,128,1,128,1,128,3,128,2782,8,128,1,128,
		1,128,1,128,1,128,1,128,1,128,3,128,2790,8,128,1,129,1,129,3,129,2794,
		8,129,1,130,1,130,1,130,1,130,5,130,2800,8,130,10,130,12,130,2803,9,130,
		1,130,1,130,1,131,1,131,3,131,2809,8,131,1,132,1,132,1,133,1,133,1,133,
		1,133,5,133,2817,8,133,10,133,12,133,2820,9,133,1,134,1,134,1,134,5,134,
		2825,8,134,10,134,12,134,2828,9,134,1,135,1,135,1,135,1,135,1,136,1,136,
		1,136,1,136,1,137,1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,138,
		1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,5,138,2857,8,138,
		10,138,12,138,2860,9,138,1,138,1,138,1,138,3,138,2865,8,138,1,139,1,139,
		1,139,3,139,2870,8,139,1,139,1,139,1,139,3,139,2875,8,139,1,139,1,139,
		1,139,1,139,3,139,2881,8,139,1,139,3,139,2884,8,139,1,139,1,139,3,139,
		2888,8,139,1,139,1,139,1,139,3,139,2893,8,139,1,139,1,139,1,139,1,139,
		1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,2908,8,139,
		1,140,1,140,1,141,1,141,1,141,1,141,1,141,3,141,2917,8,141,1,141,3,141,
		2920,8,141,1,141,3,141,2923,8,141,1,141,1,141,1,142,1,142,1,142,1,143,
		1,143,1,143,1,143,1,143,1,143,3,143,2936,8,143,1,144,1,144,3,144,2940,
		8,144,1,145,1,145,1,145,1,145,1,145,1,145,3,145,2948,8,145,1,146,1,146,
		1,146,1,146,3,146,2954,8,146,1,147,1,147,1,147,1,147,5,147,2960,8,147,
		10,147,12,147,2963,9,147,1,147,1,147,1,147,1,147,3,147,2969,8,147,1,147,
		1,147,1,147,1,147,3,147,2975,8,147,1,147,1,147,1,147,1,147,1,147,1,147,
		1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,2990,8,147,1,148,1,148,
		1,148,1,148,1,148,1,148,1,148,3,148,2999,8,148,1,148,1,148,1,149,1,149,
		3,149,3005,8,149,1,150,1,150,1,150,1,150,3,150,3011,8,150,1,150,3,150,
		3014,8,150,1,150,1,150,3,150,3018,8,150,1,150,1,150,1,150,5,150,3023,8,
		150,10,150,12,150,3026,9,150,1,151,1,151,1,151,1,151,1,151,3,151,3033,
		8,151,1,151,3,151,3036,8,151,1,151,1,151,1,151,1,151,3,151,3042,8,151,
		1,151,1,151,1,151,1,151,3,151,3048,8,151,3,151,3050,8,151,1,151,1,151,
		1,151,1,151,3,151,3056,8,151,1,151,3,151,3059,8,151,3,151,3061,8,151,1,
		151,1,151,1,151,1,151,3,151,3067,8,151,3,151,3069,8,151,1,151,1,151,1,
		152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,3083,8,
		152,1,152,1,152,1,152,1,152,1,152,3,152,3090,8,152,1,152,1,152,1,153,1,
		153,1,153,3,153,3097,8,153,1,153,1,153,1,153,1,153,1,153,3,153,3104,8,
		153,1,153,1,153,1,154,1,154,1,154,3,154,3111,8,154,1,154,1,154,1,155,1,
		155,1,155,3,155,3118,8,155,1,155,1,155,1,155,1,155,1,155,3,155,3125,8,
		155,1,155,1,155,1,156,1,156,3,156,3131,8,156,1,157,1,157,1,157,3,157,3136,
		8,157,1,157,1,157,1,158,1,158,1,158,5,158,3143,8,158,10,158,12,158,3146,
		9,158,1,159,1,159,3,159,3150,8,159,1,160,1,160,1,161,1,161,1,162,3,162,
		3157,8,162,1,162,1,162,1,163,1,163,1,163,1,163,1,163,3,163,3166,8,163,
		1,164,1,164,3,164,3170,8,164,1,165,1,165,1,165,3,165,3175,8,165,1,165,
		1,165,3,165,3179,8,165,1,165,1,165,3,165,3183,8,165,1,165,1,165,3,165,
		3187,8,165,1,166,1,166,1,167,1,167,1,167,3,167,3194,8,167,1,168,1,168,
		1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
		1,169,1,169,1,169,1,169,3,169,3214,8,169,1,170,1,170,1,171,1,171,3,171,
		3220,8,171,1,172,1,172,1,172,3,172,3225,8,172,1,172,3,172,3228,8,172,1,
		172,1,172,1,172,1,172,3,172,3234,8,172,1,172,3,172,3237,8,172,1,172,1,
		172,1,172,5,172,3242,8,172,10,172,12,172,3245,9,172,1,172,3,172,3248,8,
		172,3,172,3250,8,172,1,172,1,172,1,172,1,172,5,172,3256,8,172,10,172,12,
		172,3259,9,172,3,172,3261,8,172,1,172,1,172,3,172,3265,8,172,1,172,1,172,
		1,172,1,173,1,173,1,173,3,173,3273,8,173,1,173,3,173,3276,8,173,1,173,
		1,173,1,173,1,173,1,173,1,173,5,173,3284,8,173,10,173,12,173,3287,9,173,
		1,173,1,173,1,173,1,173,3,173,3293,8,173,1,173,1,173,1,173,3,173,3298,
		8,173,1,173,3,173,3301,8,173,1,174,1,174,1,174,1,174,1,174,1,174,5,174,
		3309,8,174,10,174,12,174,3312,9,174,3,174,3314,8,174,1,174,3,174,3317,
		8,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,3325,8,174,1,175,1,175,
		1,175,1,175,1,175,1,175,1,175,5,175,3334,8,175,10,175,12,175,3337,9,175,
		3,175,3339,8,175,1,175,3,175,3342,8,175,1,175,1,175,5,175,3346,8,175,10,
		175,12,175,3349,9,175,1,175,1,175,3,175,3353,8,175,1,175,1,175,3,175,3357,
		8,175,1,176,1,176,1,176,1,176,1,176,1,176,5,176,3365,8,176,10,176,12,176,
		3368,9,176,3,176,3370,8,176,1,176,3,176,3373,8,176,1,176,1,176,5,176,3377,
		8,176,10,176,12,176,3380,9,176,1,176,1,176,1,176,3,176,3385,8,176,1,176,
		1,176,1,177,1,177,1,177,1,177,3,177,3393,8,177,1,177,3,177,3396,8,177,
		1,177,1,177,3,177,3400,8,177,1,177,1,177,3,177,3404,8,177,1,177,3,177,
		3407,8,177,1,178,1,178,1,178,3,178,3412,8,178,1,179,1,179,1,179,1,179,
		1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,3,179,3426,8,179,1,180,
		1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,181,1,181,
		1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,182,1,182,
		3,182,3453,8,182,1,182,1,182,1,182,1,182,3,182,3459,8,182,1,182,3,182,
		3462,8,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,3471,8,182,
		1,182,1,182,1,182,1,182,3,182,3477,8,182,1,182,0,4,166,180,184,222,183,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
		134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
		170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
		206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
		242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,
		278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
		314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,
		350,352,354,356,358,360,362,364,0,63,1,0,432,433,2,0,432,432,435,435,2,
		0,255,255,404,404,2,0,432,433,435,435,2,0,109,109,128,128,2,0,8,8,52,52,
		2,0,129,129,374,374,3,0,266,266,377,377,421,421,3,0,170,170,213,213,260,
		260,2,0,115,115,117,117,3,0,251,251,289,289,321,321,2,0,282,282,309,309,
		3,0,264,264,337,337,339,339,1,0,360,361,3,0,325,325,368,368,386,386,3,
		0,204,204,261,261,278,278,2,0,278,278,385,385,3,0,78,78,224,224,385,385,
		3,0,109,109,230,230,406,406,2,0,321,321,380,380,2,0,190,190,311,311,1,
		0,343,344,2,0,170,170,194,194,1,0,176,177,4,0,225,225,345,345,381,381,
		435,435,2,0,279,279,378,378,4,0,263,263,270,270,303,303,391,391,3,0,341,
		341,360,360,379,379,2,0,202,202,365,365,2,0,299,299,404,404,1,0,464,465,
		1,0,461,463,2,0,464,465,467,469,3,0,3,3,6,6,166,166,2,0,3,3,54,54,2,0,
		240,240,370,370,2,0,372,372,374,374,2,0,106,106,274,274,2,0,125,125,287,
		287,3,0,104,104,234,234,287,287,3,0,104,104,287,287,312,312,2,0,84,84,
		373,373,2,0,38,38,126,126,2,0,111,111,432,433,3,0,78,78,99,99,150,150,
		4,0,104,104,287,287,312,312,366,366,2,0,433,433,435,435,3,0,258,258,357,
		357,375,375,3,0,275,275,306,306,334,334,2,0,304,304,307,307,6,0,220,220,
		314,314,320,320,393,394,397,397,418,419,1,0,238,239,2,0,356,356,374,374,
		3,0,78,78,115,115,360,360,2,0,25,25,108,108,1,0,437,438,2,0,433,433,437,
		437,52,0,73,73,106,106,113,113,192,192,202,202,210,210,213,213,220,221,
		225,227,231,232,234,234,236,239,243,243,255,255,257,258,260,260,263,263,
		266,266,268,270,274,280,282,285,287,287,290,290,292,292,295,299,301,316,
		320,320,324,324,326,326,329,330,332,332,334,335,338,345,347,347,349,350,
		352,354,356,358,360,360,362,362,365,367,369,369,371,379,381,382,385,385,
		387,387,389,394,397,397,401,404,409,409,411,415,417,425,434,434,1,0,443,
		450,5,0,281,281,300,300,318,318,400,400,463,463,1,0,135,136,2,0,343,344,
		358,358,2,0,314,314,433,433,4044,0,369,1,0,0,0,2,374,1,0,0,0,4,382,1,0,
		0,0,6,390,1,0,0,0,8,396,1,0,0,0,10,414,1,0,0,0,12,541,1,0,0,0,14,550,1,
		0,0,0,16,553,1,0,0,0,18,592,1,0,0,0,20,595,1,0,0,0,22,635,1,0,0,0,24,638,
		1,0,0,0,26,654,1,0,0,0,28,695,1,0,0,0,30,708,1,0,0,0,32,732,1,0,0,0,34,
		751,1,0,0,0,36,753,1,0,0,0,38,802,1,0,0,0,40,829,1,0,0,0,42,860,1,0,0,
		0,44,882,1,0,0,0,46,912,1,0,0,0,48,914,1,0,0,0,50,955,1,0,0,0,52,1000,
		1,0,0,0,54,1019,1,0,0,0,56,1021,1,0,0,0,58,1046,1,0,0,0,60,1048,1,0,0,
		0,62,1056,1,0,0,0,64,1058,1,0,0,0,66,1061,1,0,0,0,68,1064,1,0,0,0,70,1066,
		1,0,0,0,72,1068,1,0,0,0,74,1070,1,0,0,0,76,1099,1,0,0,0,78,1101,1,0,0,
		0,80,1104,1,0,0,0,82,1113,1,0,0,0,84,1121,1,0,0,0,86,1128,1,0,0,0,88,1151,
		1,0,0,0,90,1153,1,0,0,0,92,1164,1,0,0,0,94,1166,1,0,0,0,96,1180,1,0,0,
		0,98,1190,1,0,0,0,100,1200,1,0,0,0,102,1210,1,0,0,0,104,1227,1,0,0,0,106,
		1234,1,0,0,0,108,1244,1,0,0,0,110,1246,1,0,0,0,112,1253,1,0,0,0,114,1291,
		1,0,0,0,116,1319,1,0,0,0,118,1362,1,0,0,0,120,1366,1,0,0,0,122,1379,1,
		0,0,0,124,1429,1,0,0,0,126,1457,1,0,0,0,128,1498,1,0,0,0,130,1577,1,0,
		0,0,132,1579,1,0,0,0,134,1583,1,0,0,0,136,1588,1,0,0,0,138,1592,1,0,0,
		0,140,1601,1,0,0,0,142,1606,1,0,0,0,144,1618,1,0,0,0,146,1620,1,0,0,0,
		148,1669,1,0,0,0,150,1699,1,0,0,0,152,1734,1,0,0,0,154,1746,1,0,0,0,156,
		1753,1,0,0,0,158,1792,1,0,0,0,160,1809,1,0,0,0,162,1886,1,0,0,0,164,1890,
		1,0,0,0,166,1940,1,0,0,0,168,1973,1,0,0,0,170,1975,1,0,0,0,172,1977,1,
		0,0,0,174,1990,1,0,0,0,176,2018,1,0,0,0,178,2020,1,0,0,0,180,2028,1,0,
		0,0,182,2100,1,0,0,0,184,2108,1,0,0,0,186,2125,1,0,0,0,188,2127,1,0,0,
		0,190,2170,1,0,0,0,192,2199,1,0,0,0,194,2201,1,0,0,0,196,2210,1,0,0,0,
		198,2217,1,0,0,0,200,2235,1,0,0,0,202,2260,1,0,0,0,204,2262,1,0,0,0,206,
		2269,1,0,0,0,208,2273,1,0,0,0,210,2275,1,0,0,0,212,2332,1,0,0,0,214,2334,
		1,0,0,0,216,2340,1,0,0,0,218,2369,1,0,0,0,220,2371,1,0,0,0,222,2385,1,
		0,0,0,224,2449,1,0,0,0,226,2451,1,0,0,0,228,2465,1,0,0,0,230,2467,1,0,
		0,0,232,2470,1,0,0,0,234,2474,1,0,0,0,236,2489,1,0,0,0,238,2494,1,0,0,
		0,240,2524,1,0,0,0,242,2526,1,0,0,0,244,2535,1,0,0,0,246,2710,1,0,0,0,
		248,2712,1,0,0,0,250,2717,1,0,0,0,252,2723,1,0,0,0,254,2736,1,0,0,0,256,
		2749,1,0,0,0,258,2793,1,0,0,0,260,2795,1,0,0,0,262,2808,1,0,0,0,264,2810,
		1,0,0,0,266,2812,1,0,0,0,268,2821,1,0,0,0,270,2829,1,0,0,0,272,2833,1,
		0,0,0,274,2837,1,0,0,0,276,2864,1,0,0,0,278,2907,1,0,0,0,280,2909,1,0,
		0,0,282,2911,1,0,0,0,284,2926,1,0,0,0,286,2935,1,0,0,0,288,2939,1,0,0,
		0,290,2947,1,0,0,0,292,2953,1,0,0,0,294,2989,1,0,0,0,296,2991,1,0,0,0,
		298,3004,1,0,0,0,300,3006,1,0,0,0,302,3027,1,0,0,0,304,3089,1,0,0,0,306,
		3103,1,0,0,0,308,3110,1,0,0,0,310,3124,1,0,0,0,312,3130,1,0,0,0,314,3135,
		1,0,0,0,316,3139,1,0,0,0,318,3149,1,0,0,0,320,3151,1,0,0,0,322,3153,1,
		0,0,0,324,3156,1,0,0,0,326,3165,1,0,0,0,328,3169,1,0,0,0,330,3186,1,0,
		0,0,332,3188,1,0,0,0,334,3193,1,0,0,0,336,3195,1,0,0,0,338,3213,1,0,0,
		0,340,3215,1,0,0,0,342,3217,1,0,0,0,344,3227,1,0,0,0,346,3275,1,0,0,0,
		348,3302,1,0,0,0,350,3326,1,0,0,0,352,3358,1,0,0,0,354,3388,1,0,0,0,356,
		3411,1,0,0,0,358,3425,1,0,0,0,360,3427,1,0,0,0,362,3438,1,0,0,0,364,3476,
		1,0,0,0,366,368,3,2,1,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,
		0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,373,5,0,0,1,373,
		1,1,0,0,0,374,376,3,4,2,0,375,377,3,132,66,0,376,375,1,0,0,0,376,377,1,
		0,0,0,377,3,1,0,0,0,378,380,3,6,3,0,379,381,5,459,0,0,380,379,1,0,0,0,
		380,381,1,0,0,0,381,383,1,0,0,0,382,378,1,0,0,0,383,384,1,0,0,0,384,382,
		1,0,0,0,384,385,1,0,0,0,385,5,1,0,0,0,386,391,3,8,4,0,387,391,3,10,5,0,
		388,391,3,12,6,0,389,391,3,14,7,0,390,386,1,0,0,0,390,387,1,0,0,0,390,
		388,1,0,0,0,390,389,1,0,0,0,391,7,1,0,0,0,392,397,3,16,8,0,393,397,3,20,
		10,0,394,397,3,24,12,0,395,397,3,26,13,0,396,392,1,0,0,0,396,393,1,0,0,
		0,396,394,1,0,0,0,396,395,1,0,0,0,397,9,1,0,0,0,398,415,3,36,18,0,399,
		415,3,38,19,0,400,415,3,346,173,0,401,415,3,344,172,0,402,415,3,40,20,
		0,403,415,3,42,21,0,404,415,3,104,52,0,405,415,3,44,22,0,406,415,3,48,
		24,0,407,415,3,50,25,0,408,415,3,94,47,0,409,415,3,96,48,0,410,415,3,98,
		49,0,411,415,3,100,50,0,412,415,3,106,53,0,413,415,3,102,51,0,414,398,
		1,0,0,0,414,399,1,0,0,0,414,400,1,0,0,0,414,401,1,0,0,0,414,402,1,0,0,
		0,414,403,1,0,0,0,414,404,1,0,0,0,414,405,1,0,0,0,414,406,1,0,0,0,414,
		407,1,0,0,0,414,408,1,0,0,0,414,409,1,0,0,0,414,410,1,0,0,0,414,411,1,
		0,0,0,414,412,1,0,0,0,414,413,1,0,0,0,415,11,1,0,0,0,416,418,5,11,0,0,
		417,419,5,459,0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,
		422,3,4,2,0,421,420,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,425,5,
		60,0,0,424,426,5,459,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,542,1,0,0,
		0,427,429,5,13,0,0,428,430,5,459,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,
		542,1,0,0,0,431,433,5,35,0,0,432,434,5,459,0,0,433,432,1,0,0,0,433,434,
		1,0,0,0,434,542,1,0,0,0,435,436,5,80,0,0,436,438,3,334,167,0,437,439,5,
		459,0,0,438,437,1,0,0,0,438,439,1,0,0,0,439,542,1,0,0,0,440,441,3,334,
		167,0,441,443,5,460,0,0,442,444,5,459,0,0,443,442,1,0,0,0,443,444,1,0,
		0,0,444,542,1,0,0,0,445,446,5,88,0,0,446,447,3,180,90,0,447,450,3,6,3,
		0,448,449,5,59,0,0,449,451,3,6,3,0,450,448,1,0,0,0,450,451,1,0,0,0,451,
		453,1,0,0,0,452,454,5,459,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,542,
		1,0,0,0,455,457,5,146,0,0,456,458,3,166,83,0,457,456,1,0,0,0,457,458,1,
		0,0,0,458,460,1,0,0,0,459,461,5,459,0,0,460,459,1,0,0,0,460,461,1,0,0,
		0,461,542,1,0,0,0,462,468,5,402,0,0,463,464,7,0,0,0,464,465,5,458,0,0,
		465,466,7,1,0,0,466,467,5,458,0,0,467,469,7,0,0,0,468,463,1,0,0,0,468,
		469,1,0,0,0,469,471,1,0,0,0,470,472,5,459,0,0,471,470,1,0,0,0,471,472,
		1,0,0,0,472,542,1,0,0,0,473,474,5,11,0,0,474,476,5,409,0,0,475,477,5,459,
		0,0,476,475,1,0,0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,480,3,4,2,0,479,
		478,1,0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,482,5,60,0,0,482,484,5,
		409,0,0,483,485,5,459,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,
		0,0,486,487,5,11,0,0,487,489,5,227,0,0,488,490,5,459,0,0,489,488,1,0,0,
		0,489,490,1,0,0,0,490,492,1,0,0,0,491,493,3,4,2,0,492,491,1,0,0,0,492,
		493,1,0,0,0,493,494,1,0,0,0,494,495,5,60,0,0,495,497,5,227,0,0,496,498,
		5,459,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,542,1,0,0,0,499,500,5,195,
		0,0,500,501,7,2,0,0,501,503,3,166,83,0,502,504,5,459,0,0,503,502,1,0,0,
		0,503,504,1,0,0,0,504,542,1,0,0,0,505,506,5,198,0,0,506,516,3,180,90,0,
		507,517,3,6,3,0,508,510,5,13,0,0,509,511,5,459,0,0,510,509,1,0,0,0,510,
		511,1,0,0,0,511,517,1,0,0,0,512,514,5,35,0,0,513,515,5,459,0,0,514,513,
		1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,507,1,0,0,0,516,508,1,0,0,
		0,516,512,1,0,0,0,517,542,1,0,0,0,518,519,5,134,0,0,519,521,3,166,83,0,
		520,522,5,459,0,0,521,520,1,0,0,0,521,522,1,0,0,0,522,542,1,0,0,0,523,
		524,5,138,0,0,524,525,5,456,0,0,525,526,7,3,0,0,526,527,5,458,0,0,527,
		528,3,164,82,0,528,529,5,458,0,0,529,534,3,164,82,0,530,531,5,458,0,0,
		531,533,3,164,82,0,532,530,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,
		535,1,0,0,0,535,537,1,0,0,0,536,534,1,0,0,0,537,539,5,457,0,0,538,540,
		5,459,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,416,1,0,
		0,0,541,427,1,0,0,0,541,431,1,0,0,0,541,435,1,0,0,0,541,440,1,0,0,0,541,
		445,1,0,0,0,541,455,1,0,0,0,541,462,1,0,0,0,541,473,1,0,0,0,541,499,1,
		0,0,0,541,505,1,0,0,0,541,518,1,0,0,0,541,523,1,0,0,0,542,13,1,0,0,0,543,
		551,3,114,57,0,544,551,3,116,58,0,545,551,3,118,59,0,546,551,3,124,62,
		0,547,551,3,128,64,0,548,551,3,130,65,0,549,551,3,134,67,0,550,543,1,0,
		0,0,550,544,1,0,0,0,550,545,1,0,0,0,550,546,1,0,0,0,550,547,1,0,0,0,550,
		548,1,0,0,0,550,549,1,0,0,0,551,15,1,0,0,0,552,554,3,172,86,0,553,552,
		1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,557,5,50,0,0,556,558,3,196,
		98,0,557,556,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,561,5,77,0,0,
		560,559,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,564,3,18,9,0,563,565,
		3,254,127,0,564,563,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,568,3,
		30,15,0,567,566,1,0,0,0,567,568,1,0,0,0,568,571,1,0,0,0,569,570,5,77,0,
		0,570,572,3,220,110,0,571,569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,
		573,575,3,28,14,0,574,573,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,
		578,3,202,101,0,577,576,1,0,0,0,577,578,1,0,0,0,578,580,1,0,0,0,579,581,
		3,210,105,0,580,579,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,0,582,584,5,
		459,0,0,583,582,1,0,0,0,583,584,1,0,0,0,584,17,1,0,0,0,585,587,3,334,167,
		0,586,588,3,252,126,0,587,586,1,0,0,0,587,588,1,0,0,0,588,593,1,0,0,0,
		589,593,3,312,156,0,590,593,3,108,54,0,591,593,5,432,0,0,592,585,1,0,0,
		0,592,589,1,0,0,0,592,590,1,0,0,0,592,591,1,0,0,0,593,19,1,0,0,0,594,596,
		3,172,86,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,599,5,92,
		0,0,598,600,3,196,98,0,599,598,1,0,0,0,599,600,1,0,0,0,600,602,1,0,0,0,
		601,603,5,94,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,606,1,0,0,0,604,607,
		3,312,156,0,605,607,3,108,54,0,606,604,1,0,0,0,606,605,1,0,0,0,607,609,
		1,0,0,0,608,610,3,254,127,0,609,608,1,0,0,0,609,610,1,0,0,0,610,615,1,
		0,0,0,611,612,5,456,0,0,612,613,3,316,158,0,613,614,5,457,0,0,614,616,
		1,0,0,0,615,611,1,0,0,0,615,616,1,0,0,0,616,618,1,0,0,0,617,619,3,30,15,
		0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,622,3,22,11,0,621,
		623,3,202,101,0,622,621,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,626,
		3,210,105,0,625,624,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,629,5,
		459,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,21,1,0,0,0,630,636,3,266,133,
		0,631,636,3,244,122,0,632,636,3,118,59,0,633,634,5,49,0,0,634,636,5,191,
		0,0,635,630,1,0,0,0,635,631,1,0,0,0,635,632,1,0,0,0,635,633,1,0,0,0,636,
		23,1,0,0,0,637,639,3,172,86,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,
		1,0,0,0,640,642,3,184,92,0,641,643,3,198,99,0,642,641,1,0,0,0,642,643,
		1,0,0,0,643,645,1,0,0,0,644,646,3,202,101,0,645,644,1,0,0,0,645,646,1,
		0,0,0,646,648,1,0,0,0,647,649,3,210,105,0,648,647,1,0,0,0,648,649,1,0,
		0,0,649,651,1,0,0,0,650,652,5,459,0,0,651,650,1,0,0,0,651,652,1,0,0,0,
		652,25,1,0,0,0,653,655,3,172,86,0,654,653,1,0,0,0,654,655,1,0,0,0,655,
		656,1,0,0,0,656,658,5,187,0,0,657,659,3,196,98,0,658,657,1,0,0,0,658,659,
		1,0,0,0,659,662,1,0,0,0,660,663,3,312,156,0,661,663,3,108,54,0,662,660,
		1,0,0,0,662,661,1,0,0,0,663,665,1,0,0,0,664,666,3,252,126,0,665,664,1,
		0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,668,5,163,0,0,668,673,3,176,
		88,0,669,670,5,458,0,0,670,672,3,176,88,0,671,669,1,0,0,0,672,675,1,0,
		0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,676,
		678,3,30,15,0,677,676,1,0,0,0,677,678,1,0,0,0,678,681,1,0,0,0,679,680,
		5,77,0,0,680,682,3,220,110,0,681,679,1,0,0,0,681,682,1,0,0,0,682,684,1,
		0,0,0,683,685,3,28,14,0,684,683,1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,
		0,686,688,3,202,101,0,687,686,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,0,
		689,691,3,210,105,0,690,689,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,0,692,
		694,5,459,0,0,693,692,1,0,0,0,693,694,1,0,0,0,694,27,1,0,0,0,695,706,5,
		197,0,0,696,707,3,178,89,0,697,698,5,39,0,0,698,704,5,114,0,0,699,701,
		5,282,0,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,705,3,318,
		159,0,703,705,5,432,0,0,704,700,1,0,0,0,704,703,1,0,0,0,705,707,1,0,0,
		0,706,696,1,0,0,0,706,697,1,0,0,0,707,29,1,0,0,0,708,709,5,344,0,0,709,
		714,3,32,16,0,710,711,5,458,0,0,711,713,3,32,16,0,712,710,1,0,0,0,713,
		716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,728,1,0,0,0,716,714,1,
		0,0,0,717,720,5,94,0,0,718,721,5,432,0,0,719,721,3,306,153,0,720,718,1,
		0,0,0,720,719,1,0,0,0,721,726,1,0,0,0,722,723,5,456,0,0,723,724,3,316,
		158,0,724,725,5,457,0,0,725,727,1,0,0,0,726,722,1,0,0,0,726,727,1,0,0,
		0,727,729,1,0,0,0,728,717,1,0,0,0,728,729,1,0,0,0,729,31,1,0,0,0,730,733,
		3,34,17,0,731,733,3,166,83,0,732,730,1,0,0,0,732,731,1,0,0,0,733,738,1,
		0,0,0,734,736,5,7,0,0,735,734,1,0,0,0,735,736,1,0,0,0,736,737,1,0,0,0,
		737,739,3,262,131,0,738,735,1,0,0,0,738,739,1,0,0,0,739,33,1,0,0,0,740,
		744,5,257,0,0,741,744,5,297,0,0,742,744,3,306,153,0,743,740,1,0,0,0,743,
		741,1,0,0,0,743,742,1,0,0,0,744,745,1,0,0,0,745,748,5,451,0,0,746,749,
		5,461,0,0,747,749,3,334,167,0,748,746,1,0,0,0,748,747,1,0,0,0,749,752,
		1,0,0,0,750,752,5,426,0,0,751,743,1,0,0,0,751,750,1,0,0,0,752,35,1,0,0,
		0,753,754,5,37,0,0,754,755,5,45,0,0,755,759,3,334,167,0,756,757,5,32,0,
		0,757,758,5,439,0,0,758,760,7,4,0,0,759,756,1,0,0,0,759,760,1,0,0,0,760,
		773,1,0,0,0,761,763,5,117,0,0,762,764,5,133,0,0,763,762,1,0,0,0,763,764,
		1,0,0,0,764,765,1,0,0,0,765,770,3,298,149,0,766,767,5,458,0,0,767,769,
		3,298,149,0,768,766,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,
		0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,773,761,1,0,0,0,773,774,1,0,0,0,
		774,785,1,0,0,0,775,776,5,103,0,0,776,777,5,117,0,0,777,782,3,298,149,
		0,778,779,5,458,0,0,779,781,3,298,149,0,780,778,1,0,0,0,781,784,1,0,0,
		0,782,780,1,0,0,0,782,783,1,0,0,0,783,786,1,0,0,0,784,782,1,0,0,0,785,
		775,1,0,0,0,785,786,1,0,0,0,786,789,1,0,0,0,787,788,5,27,0,0,788,790,3,
		334,167,0,789,787,1,0,0,0,789,790,1,0,0,0,790,800,1,0,0,0,791,792,5,199,
		0,0,792,797,3,294,147,0,793,794,5,458,0,0,794,796,3,294,147,0,795,793,
		1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,801,1,0,0,
		0,799,797,1,0,0,0,800,791,1,0,0,0,800,801,1,0,0,0,801,37,1,0,0,0,802,804,
		5,37,0,0,803,805,5,185,0,0,804,803,1,0,0,0,804,805,1,0,0,0,805,807,1,0,
		0,0,806,808,3,322,161,0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,
		0,809,810,5,90,0,0,810,811,3,334,167,0,811,812,5,117,0,0,812,813,3,238,
		119,0,813,814,5,456,0,0,814,816,3,316,158,0,815,817,7,5,0,0,816,815,1,
		0,0,0,816,817,1,0,0,0,817,818,1,0,0,0,818,820,5,457,0,0,819,821,3,152,
		76,0,820,819,1,0,0,0,820,821,1,0,0,0,821,824,1,0,0,0,822,823,5,117,0,0,
		823,825,3,334,167,0,824,822,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,
		828,5,459,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,39,1,0,0,0,829,830,5,
		37,0,0,830,831,5,167,0,0,831,832,3,334,167,0,832,833,5,117,0,0,833,834,
		3,238,119,0,834,835,5,456,0,0,835,836,3,316,158,0,836,855,5,457,0,0,837,
		843,5,199,0,0,838,844,5,280,0,0,839,840,5,376,0,0,840,841,5,433,0,0,841,
		844,7,6,0,0,842,844,5,392,0,0,843,838,1,0,0,0,843,839,1,0,0,0,843,842,
		1,0,0,0,844,847,1,0,0,0,845,846,5,458,0,0,846,848,5,332,0,0,847,845,1,
		0,0,0,847,848,1,0,0,0,848,853,1,0,0,0,849,850,5,458,0,0,850,851,5,293,
		0,0,851,852,5,439,0,0,852,854,3,320,160,0,853,849,1,0,0,0,853,854,1,0,
		0,0,854,856,1,0,0,0,855,837,1,0,0,0,855,856,1,0,0,0,856,858,1,0,0,0,857,
		859,5,459,0,0,858,857,1,0,0,0,858,859,1,0,0,0,859,41,1,0,0,0,860,861,5,
		37,0,0,861,862,5,170,0,0,862,863,3,306,153,0,863,864,5,456,0,0,864,866,
		3,142,71,0,865,867,5,458,0,0,866,865,1,0,0,0,866,867,1,0,0,0,867,868,1,
		0,0,0,868,872,5,457,0,0,869,870,5,117,0,0,870,873,3,334,167,0,871,873,
		5,49,0,0,872,869,1,0,0,0,872,871,1,0,0,0,872,873,1,0,0,0,873,877,1,0,0,
		0,874,875,5,401,0,0,875,878,3,334,167,0,876,878,5,49,0,0,877,874,1,0,0,
		0,877,876,1,0,0,0,877,878,1,0,0,0,878,880,1,0,0,0,879,881,5,459,0,0,880,
		879,1,0,0,0,880,881,1,0,0,0,881,43,1,0,0,0,882,883,5,37,0,0,883,884,5,
		194,0,0,884,889,3,308,154,0,885,886,5,456,0,0,886,887,3,316,158,0,887,
		888,5,457,0,0,888,890,1,0,0,0,889,885,1,0,0,0,889,890,1,0,0,0,890,900,
		1,0,0,0,891,892,5,199,0,0,892,897,3,46,23,0,893,894,5,458,0,0,894,896,
		3,46,23,0,895,893,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,0,897,898,1,0,
		0,0,898,901,1,0,0,0,899,897,1,0,0,0,900,891,1,0,0,0,900,901,1,0,0,0,901,
		902,1,0,0,0,902,903,5,7,0,0,903,907,3,24,12,0,904,905,5,199,0,0,905,906,
		5,22,0,0,906,908,5,123,0,0,907,904,1,0,0,0,907,908,1,0,0,0,908,910,1,0,
		0,0,909,911,5,459,0,0,910,909,1,0,0,0,910,911,1,0,0,0,911,45,1,0,0,0,912,
		913,7,7,0,0,913,47,1,0,0,0,914,915,5,4,0,0,915,916,5,170,0,0,916,950,3,
		306,153,0,917,918,5,163,0,0,918,919,5,456,0,0,919,920,5,310,0,0,920,921,
		5,439,0,0,921,922,7,8,0,0,922,951,5,457,0,0,923,924,5,2,0,0,924,951,3,
		144,72,0,925,926,5,57,0,0,926,927,5,31,0,0,927,951,3,334,167,0,928,929,
		5,57,0,0,929,930,5,28,0,0,930,951,3,334,167,0,931,932,5,199,0,0,932,933,
		5,22,0,0,933,934,5,2,0,0,934,935,5,31,0,0,935,936,3,334,167,0,936,937,
		5,74,0,0,937,938,5,97,0,0,938,939,5,456,0,0,939,940,3,316,158,0,940,941,
		5,457,0,0,941,942,5,142,0,0,942,943,3,306,153,0,943,944,5,456,0,0,944,
		945,3,316,158,0,945,946,5,457,0,0,946,951,1,0,0,0,947,948,5,22,0,0,948,
		949,5,31,0,0,949,951,3,334,167,0,950,917,1,0,0,0,950,923,1,0,0,0,950,925,
		1,0,0,0,950,928,1,0,0,0,950,931,1,0,0,0,950,947,1,0,0,0,951,953,1,0,0,
		0,952,954,5,459,0,0,953,952,1,0,0,0,953,954,1,0,0,0,954,49,1,0,0,0,955,
		956,5,4,0,0,956,959,5,45,0,0,957,960,3,334,167,0,958,960,5,39,0,0,959,
		957,1,0,0,0,959,958,1,0,0,0,960,973,1,0,0,0,961,962,5,324,0,0,962,963,
		5,326,0,0,963,964,5,439,0,0,964,974,3,334,167,0,965,966,5,27,0,0,966,974,
		3,334,167,0,967,968,5,163,0,0,968,971,3,52,26,0,969,970,5,199,0,0,970,
		972,3,92,46,0,971,969,1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,961,
		1,0,0,0,973,965,1,0,0,0,973,967,1,0,0,0,974,976,1,0,0,0,975,977,5,459,
		0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,51,1,0,0,0,978,1001,3,54,27,0,
		979,1001,3,56,28,0,980,1001,3,60,30,0,981,1001,3,62,31,0,982,1001,3,64,
		32,0,983,1001,3,66,33,0,984,1001,3,68,34,0,985,1001,3,70,35,0,986,1001,
		3,72,36,0,987,1001,3,74,37,0,988,1001,3,76,38,0,989,990,5,273,0,0,990,
		1001,3,296,148,0,991,1001,5,1,0,0,992,1001,3,78,39,0,993,1001,3,80,40,
		0,994,1001,3,82,41,0,995,1001,3,84,42,0,996,1001,3,86,43,0,997,1001,3,
		88,44,0,998,1001,3,90,45,0,999,1001,3,92,46,0,1000,978,1,0,0,0,1000,979,
		1,0,0,0,1000,980,1,0,0,0,1000,981,1,0,0,0,1000,982,1,0,0,0,1000,983,1,
		0,0,0,1000,984,1,0,0,0,1000,985,1,0,0,0,1000,986,1,0,0,0,1000,987,1,0,
		0,0,1000,988,1,0,0,0,1000,989,1,0,0,0,1000,991,1,0,0,0,1000,992,1,0,0,
		0,1000,993,1,0,0,0,1000,994,1,0,0,0,1000,995,1,0,0,0,1000,996,1,0,0,0,
		1000,997,1,0,0,0,1000,998,1,0,0,0,1000,999,1,0,0,0,1001,53,1,0,0,0,1002,
		1003,5,215,0,0,1003,1020,3,320,160,0,1004,1005,5,216,0,0,1005,1020,5,115,
		0,0,1006,1011,5,117,0,0,1007,1008,5,293,0,0,1008,1009,5,439,0,0,1009,1012,
		5,117,0,0,1010,1012,5,115,0,0,1011,1007,1,0,0,0,1011,1010,1,0,0,0,1012,
		1020,1,0,0,0,1013,1014,5,217,0,0,1014,1020,3,320,160,0,1015,1016,5,218,
		0,0,1016,1020,3,320,160,0,1017,1018,5,219,0,0,1018,1020,7,9,0,0,1019,1002,
		1,0,0,0,1019,1004,1,0,0,0,1019,1006,1,0,0,0,1019,1013,1,0,0,0,1019,1015,
		1,0,0,0,1019,1017,1,0,0,0,1020,55,1,0,0,0,1021,1022,5,229,0,0,1022,1038,
		5,439,0,0,1023,1039,5,115,0,0,1024,1035,5,117,0,0,1025,1030,3,58,29,0,
		1026,1027,5,458,0,0,1027,1029,3,58,29,0,1028,1026,1,0,0,0,1029,1032,1,
		0,0,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,1034,1,0,0,0,1032,1030,
		1,0,0,0,1033,1025,1,0,0,0,1034,1037,1,0,0,0,1035,1033,1,0,0,0,1035,1036,
		1,0,0,0,1036,1039,1,0,0,0,1037,1035,1,0,0,0,1038,1023,1,0,0,0,1038,1024,
		1,0,0,0,1039,57,1,0,0,0,1040,1041,5,214,0,0,1041,1042,5,439,0,0,1042,1047,
		3,320,160,0,1043,1044,5,228,0,0,1044,1045,5,439,0,0,1045,1047,7,10,0,0,
		1046,1040,1,0,0,0,1046,1043,1,0,0,0,1047,59,1,0,0,0,1048,1049,5,32,0,0,
		1049,1050,5,439,0,0,1050,1051,7,4,0,0,1051,61,1,0,0,0,1052,1053,5,241,
		0,0,1053,1057,3,320,160,0,1054,1055,5,242,0,0,1055,1057,7,11,0,0,1056,
		1052,1,0,0,0,1056,1054,1,0,0,0,1057,63,1,0,0,0,1058,1059,5,250,0,0,1059,
		1060,3,320,160,0,1060,65,1,0,0,0,1061,1062,5,266,0,0,1062,1063,3,320,160,
		0,1063,67,1,0,0,0,1064,1065,7,12,0,0,1065,69,1,0,0,0,1066,1067,7,13,0,
		0,1067,71,1,0,0,0,1068,1069,7,14,0,0,1069,73,1,0,0,0,1070,1071,5,256,0,
		0,1071,1072,5,439,0,0,1072,1073,7,15,0,0,1073,75,1,0,0,0,1074,1075,5,252,
		0,0,1075,1100,3,320,160,0,1076,1077,5,408,0,0,1077,1100,3,320,160,0,1078,
		1079,5,254,0,0,1079,1082,5,439,0,0,1080,1083,3,334,167,0,1081,1083,5,435,
		0,0,1082,1080,1,0,0,0,1082,1081,1,0,0,0,1083,1100,1,0,0,0,1084,1085,5,
		253,0,0,1085,1088,5,439,0,0,1086,1089,3,334,167,0,1087,1089,5,435,0,0,
		1088,1086,1,0,0,0,1088,1087,1,0,0,0,1089,1100,1,0,0,0,1090,1091,5,327,
		0,0,1091,1092,5,439,0,0,1092,1100,7,9,0,0,1093,1094,5,407,0,0,1094,1095,
		5,439,0,0,1095,1100,7,9,0,0,1096,1097,5,410,0,0,1097,1098,5,439,0,0,1098,
		1100,5,433,0,0,1099,1074,1,0,0,0,1099,1076,1,0,0,0,1099,1078,1,0,0,0,1099,
		1084,1,0,0,0,1099,1090,1,0,0,0,1099,1093,1,0,0,0,1099,1096,1,0,0,0,1100,
		77,1,0,0,0,1101,1102,5,323,0,0,1102,1103,7,9,0,0,1103,79,1,0,0,0,1104,
		1105,5,347,0,0,1105,1106,7,16,0,0,1106,81,1,0,0,0,1107,1108,5,363,0,0,
		1108,1114,7,17,0,0,1109,1110,5,406,0,0,1110,1114,3,320,160,0,1111,1112,
		5,346,0,0,1112,1114,7,18,0,0,1113,1107,1,0,0,0,1113,1109,1,0,0,0,1113,
		1111,1,0,0,0,1114,83,1,0,0,0,1115,1122,5,265,0,0,1116,1122,5,262,0,0,1117,
		1122,5,328,0,0,1118,1122,5,267,0,0,1119,1120,5,288,0,0,1120,1122,3,320,
		160,0,1121,1115,1,0,0,0,1121,1116,1,0,0,0,1121,1117,1,0,0,0,1121,1118,
		1,0,0,0,1121,1119,1,0,0,0,1122,85,1,0,0,0,1123,1124,5,205,0,0,1124,1129,
		3,320,160,0,1125,1126,5,359,0,0,1126,1129,7,9,0,0,1127,1129,7,9,0,0,1128,
		1123,1,0,0,0,1128,1125,1,0,0,0,1128,1127,1,0,0,0,1129,87,1,0,0,0,1130,
		1131,5,207,0,0,1131,1152,3,320,160,0,1132,1133,5,206,0,0,1133,1152,3,320,
		160,0,1134,1135,5,208,0,0,1135,1152,3,320,160,0,1136,1137,5,209,0,0,1137,
		1152,3,320,160,0,1138,1139,5,211,0,0,1139,1152,3,320,160,0,1140,1141,5,
		233,0,0,1141,1142,5,439,0,0,1142,1152,5,433,0,0,1143,1144,5,235,0,0,1144,
		1152,3,320,160,0,1145,1146,5,336,0,0,1146,1152,3,320,160,0,1147,1148,5,
		355,0,0,1148,1152,3,320,160,0,1149,1150,5,364,0,0,1150,1152,3,320,160,
		0,1151,1130,1,0,0,0,1151,1132,1,0,0,0,1151,1134,1,0,0,0,1151,1136,1,0,
		0,0,1151,1138,1,0,0,0,1151,1140,1,0,0,0,1151,1143,1,0,0,0,1151,1145,1,
		0,0,0,1151,1147,1,0,0,0,1151,1149,1,0,0,0,1152,89,1,0,0,0,1153,1154,5,
		399,0,0,1154,1155,5,439,0,0,1155,1156,5,433,0,0,1156,1157,7,19,0,0,1157,
		91,1,0,0,0,1158,1159,5,151,0,0,1159,1160,5,203,0,0,1160,1165,5,433,0,0,
		1161,1162,5,151,0,0,1162,1165,5,291,0,0,1163,1165,5,333,0,0,1164,1158,
		1,0,0,0,1164,1161,1,0,0,0,1164,1163,1,0,0,0,1165,93,1,0,0,0,1166,1167,
		5,57,0,0,1167,1170,5,90,0,0,1168,1169,5,88,0,0,1169,1171,5,65,0,0,1170,
		1168,1,0,0,0,1170,1171,1,0,0,0,1171,1172,1,0,0,0,1172,1175,3,334,167,0,
		1173,1174,5,117,0,0,1174,1176,3,306,153,0,1175,1173,1,0,0,0,1175,1176,
		1,0,0,0,1176,1178,1,0,0,0,1177,1179,5,459,0,0,1178,1177,1,0,0,0,1178,1179,
		1,0,0,0,1179,95,1,0,0,0,1180,1181,5,57,0,0,1181,1184,5,136,0,0,1182,1183,
		5,88,0,0,1183,1185,5,65,0,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,1186,
		1,0,0,0,1186,1188,3,310,155,0,1187,1189,5,459,0,0,1188,1187,1,0,0,0,1188,
		1189,1,0,0,0,1189,97,1,0,0,0,1190,1191,5,57,0,0,1191,1195,5,167,0,0,1192,
		1193,3,306,153,0,1193,1194,5,451,0,0,1194,1196,1,0,0,0,1195,1192,1,0,0,
		0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,1198,3,334,167,0,1198,1199,
		5,459,0,0,1199,99,1,0,0,0,1200,1201,5,57,0,0,1201,1204,5,170,0,0,1202,
		1203,5,88,0,0,1203,1205,5,65,0,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,
		1206,1,0,0,0,1206,1208,3,306,153,0,1207,1209,5,459,0,0,1208,1207,1,0,0,
		0,1208,1209,1,0,0,0,1209,101,1,0,0,0,1210,1211,5,57,0,0,1211,1214,5,194,
		0,0,1212,1213,5,88,0,0,1213,1215,5,65,0,0,1214,1212,1,0,0,0,1214,1215,
		1,0,0,0,1215,1216,1,0,0,0,1216,1221,3,308,154,0,1217,1218,5,458,0,0,1218,
		1220,3,308,154,0,1219,1217,1,0,0,0,1220,1223,1,0,0,0,1221,1219,1,0,0,0,
		1221,1222,1,0,0,0,1222,1225,1,0,0,0,1223,1221,1,0,0,0,1224,1226,5,459,
		0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,103,1,0,0,0,1227,1228,5,37,
		0,0,1228,1229,5,411,0,0,1229,1230,3,308,154,0,1230,1231,5,77,0,0,1231,
		1232,3,364,182,0,1232,1233,3,328,164,0,1233,105,1,0,0,0,1234,1235,5,57,
		0,0,1235,1238,5,411,0,0,1236,1237,5,88,0,0,1237,1239,5,65,0,0,1238,1236,
		1,0,0,0,1238,1239,1,0,0,0,1239,1240,1,0,0,0,1240,1241,3,308,154,0,1241,
		107,1,0,0,0,1242,1245,3,110,55,0,1243,1245,3,112,56,0,1244,1242,1,0,0,
		0,1244,1243,1,0,0,0,1245,109,1,0,0,0,1246,1247,5,120,0,0,1247,1248,5,456,
		0,0,1248,1249,3,334,167,0,1249,1250,5,458,0,0,1250,1251,5,435,0,0,1251,
		1252,5,457,0,0,1252,111,1,0,0,0,1253,1254,5,119,0,0,1254,1255,5,456,0,
		0,1255,1256,5,435,0,0,1256,1257,5,458,0,0,1257,1258,5,435,0,0,1258,1259,
		5,457,0,0,1259,1261,5,451,0,0,1260,1262,3,334,167,0,1261,1260,1,0,0,0,
		1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1265,5,451,0,0,1264,1266,3,334,
		167,0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,1266,1267,1,0,0,0,1267,1268,
		5,451,0,0,1268,1269,3,334,167,0,1269,113,1,0,0,0,1270,1271,5,48,0,0,1271,
		1273,5,432,0,0,1272,1274,5,7,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,
		1275,1,0,0,0,1275,1277,3,140,70,0,1276,1278,5,459,0,0,1277,1276,1,0,0,
		0,1277,1278,1,0,0,0,1278,1292,1,0,0,0,1279,1280,5,48,0,0,1280,1285,3,138,
		69,0,1281,1282,5,458,0,0,1282,1284,3,138,69,0,1283,1281,1,0,0,0,1284,1287,
		1,0,0,0,1285,1283,1,0,0,0,1285,1286,1,0,0,0,1286,1289,1,0,0,0,1287,1285,
		1,0,0,0,1288,1290,5,459,0,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,1292,
		1,0,0,0,1291,1270,1,0,0,0,1291,1279,1,0,0,0,1292,115,1,0,0,0,1293,1295,
		5,24,0,0,1294,1296,5,282,0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,
		1297,1,0,0,0,1297,1299,3,318,159,0,1298,1300,5,459,0,0,1299,1298,1,0,0,
		0,1299,1300,1,0,0,0,1300,1320,1,0,0,0,1301,1303,5,47,0,0,1302,1304,5,282,
		0,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1305,1,0,0,0,1305,1307,3,
		318,159,0,1306,1308,5,459,0,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,
		1320,1,0,0,0,1309,1320,3,156,78,0,1310,1320,3,160,80,0,1311,1313,5,118,
		0,0,1312,1314,5,282,0,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1315,
		1,0,0,0,1315,1317,3,318,159,0,1316,1318,5,459,0,0,1317,1316,1,0,0,0,1317,
		1318,1,0,0,0,1318,1320,1,0,0,0,1319,1293,1,0,0,0,1319,1301,1,0,0,0,1319,
		1309,1,0,0,0,1319,1310,1,0,0,0,1319,1311,1,0,0,0,1320,117,1,0,0,0,1321,
		1324,5,64,0,0,1322,1323,5,432,0,0,1323,1325,5,439,0,0,1324,1322,1,0,0,
		0,1324,1325,1,0,0,0,1325,1326,1,0,0,0,1326,1335,3,310,155,0,1327,1332,
		3,120,60,0,1328,1329,5,458,0,0,1329,1331,3,120,60,0,1330,1328,1,0,0,0,
		1331,1334,1,0,0,0,1332,1330,1,0,0,0,1332,1333,1,0,0,0,1333,1336,1,0,0,
		0,1334,1332,1,0,0,0,1335,1327,1,0,0,0,1335,1336,1,0,0,0,1336,1338,1,0,
		0,0,1337,1339,5,459,0,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,1363,
		1,0,0,0,1340,1341,5,64,0,0,1341,1342,5,456,0,0,1342,1347,3,122,61,0,1343,
		1344,5,464,0,0,1344,1346,3,122,61,0,1345,1343,1,0,0,0,1346,1349,1,0,0,
		0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,1350,1,0,0,0,1349,1347,1,0,
		0,0,1350,1357,5,457,0,0,1351,1353,5,7,0,0,1352,1351,1,0,0,0,1352,1353,
		1,0,0,0,1353,1354,1,0,0,0,1354,1355,7,20,0,0,1355,1356,5,439,0,0,1356,
		1358,5,435,0,0,1357,1352,1,0,0,0,1357,1358,1,0,0,0,1358,1360,1,0,0,0,1359,
		1361,5,459,0,0,1360,1359,1,0,0,0,1360,1361,1,0,0,0,1361,1363,1,0,0,0,1362,
		1321,1,0,0,0,1362,1340,1,0,0,0,1363,119,1,0,0,0,1364,1365,5,432,0,0,1365,
		1367,5,439,0,0,1366,1364,1,0,0,0,1366,1367,1,0,0,0,1367,1377,1,0,0,0,1368,
		1371,3,164,82,0,1369,1371,3,334,167,0,1370,1368,1,0,0,0,1370,1369,1,0,
		0,0,1371,1373,1,0,0,0,1372,1374,7,21,0,0,1373,1372,1,0,0,0,1373,1374,1,
		0,0,0,1374,1378,1,0,0,0,1375,1378,5,49,0,0,1376,1378,5,111,0,0,1377,1370,
		1,0,0,0,1377,1375,1,0,0,0,1377,1376,1,0,0,0,1378,121,1,0,0,0,1379,1380,
		7,1,0,0,1380,123,1,0,0,0,1381,1383,3,136,68,0,1382,1384,5,459,0,0,1383,
		1382,1,0,0,0,1383,1384,1,0,0,0,1384,1430,1,0,0,0,1385,1397,5,81,0,0,1386,
		1388,5,3,0,0,1387,1389,5,354,0,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,
		1398,1,0,0,0,1390,1395,3,126,63,0,1391,1392,5,456,0,0,1392,1393,3,316,
		158,0,1393,1394,5,457,0,0,1394,1396,1,0,0,0,1395,1391,1,0,0,0,1395,1396,
		1,0,0,0,1396,1398,1,0,0,0,1397,1386,1,0,0,0,1397,1390,1,0,0,0,1398,1401,
		1,0,0,0,1399,1400,5,117,0,0,1400,1402,3,306,153,0,1401,1399,1,0,0,0,1401,
		1402,1,0,0,0,1402,1403,1,0,0,0,1403,1404,5,174,0,0,1404,1408,3,334,167,
		0,1405,1406,5,199,0,0,1406,1407,5,81,0,0,1407,1409,5,123,0,0,1408,1405,
		1,0,0,0,1408,1409,1,0,0,0,1409,1412,1,0,0,0,1410,1411,5,7,0,0,1411,1413,
		3,334,167,0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1415,1,0,0,0,1414,
		1416,5,459,0,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,1430,1,0,0,0,1417,
		1424,5,148,0,0,1418,1419,5,456,0,0,1419,1420,5,199,0,0,1420,1421,5,237,
		0,0,1421,1422,5,439,0,0,1422,1423,5,432,0,0,1423,1425,5,457,0,0,1424,1418,
		1,0,0,0,1424,1425,1,0,0,0,1425,1427,1,0,0,0,1426,1428,5,459,0,0,1427,1426,
		1,0,0,0,1427,1428,1,0,0,0,1428,1430,1,0,0,0,1429,1381,1,0,0,0,1429,1385,
		1,0,0,0,1429,1417,1,0,0,0,1430,125,1,0,0,0,1431,1458,5,64,0,0,1432,1433,
		5,194,0,0,1433,1458,3,334,167,0,1434,1435,5,398,0,0,1435,1458,3,334,167,
		0,1436,1438,5,236,0,0,1437,1439,3,334,167,0,1438,1437,1,0,0,0,1438,1439,
		1,0,0,0,1439,1458,1,0,0,0,1440,1441,5,37,0,0,1441,1458,7,22,0,0,1442,1458,
		5,384,0,0,1443,1458,5,292,0,0,1444,1458,5,158,0,0,1445,1458,5,142,0,0,
		1446,1458,5,92,0,0,1447,1455,5,4,0,0,1448,1450,5,6,0,0,1449,1448,1,0,0,
		0,1449,1450,1,0,0,0,1450,1453,1,0,0,0,1451,1454,3,334,167,0,1452,1454,
		5,45,0,0,1453,1451,1,0,0,0,1453,1452,1,0,0,0,1454,1456,1,0,0,0,1455,1449,
		1,0,0,0,1455,1456,1,0,0,0,1456,1458,1,0,0,0,1457,1431,1,0,0,0,1457,1432,
		1,0,0,0,1457,1434,1,0,0,0,1457,1436,1,0,0,0,1457,1440,1,0,0,0,1457,1442,
		1,0,0,0,1457,1443,1,0,0,0,1457,1444,1,0,0,0,1457,1445,1,0,0,0,1457,1446,
		1,0,0,0,1457,1447,1,0,0,0,1458,127,1,0,0,0,1459,1460,5,163,0,0,1460,1463,
		5,432,0,0,1461,1462,5,451,0,0,1462,1464,3,334,167,0,1463,1461,1,0,0,0,
		1463,1464,1,0,0,0,1464,1465,1,0,0,0,1465,1466,5,439,0,0,1466,1468,3,166,
		83,0,1467,1469,5,459,0,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1499,
		1,0,0,0,1470,1471,5,163,0,0,1471,1472,5,432,0,0,1472,1473,3,340,170,0,
		1473,1475,3,166,83,0,1474,1476,5,459,0,0,1475,1474,1,0,0,0,1475,1476,1,
		0,0,0,1476,1499,1,0,0,0,1477,1478,5,163,0,0,1478,1479,5,432,0,0,1479,1480,
		5,439,0,0,1480,1481,5,44,0,0,1481,1492,3,158,79,0,1482,1490,5,72,0,0,1483,
		1484,5,139,0,0,1484,1491,5,340,0,0,1485,1488,5,187,0,0,1486,1487,5,114,
		0,0,1487,1489,3,316,158,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,1491,
		1,0,0,0,1490,1483,1,0,0,0,1490,1485,1,0,0,0,1491,1493,1,0,0,0,1492,1482,
		1,0,0,0,1492,1493,1,0,0,0,1493,1495,1,0,0,0,1494,1496,5,459,0,0,1495,1494,
		1,0,0,0,1495,1496,1,0,0,0,1496,1499,1,0,0,0,1497,1499,3,162,81,0,1498,
		1459,1,0,0,0,1498,1470,1,0,0,0,1498,1477,1,0,0,0,1498,1497,1,0,0,0,1499,
		129,1,0,0,0,1500,1501,5,11,0,0,1501,1502,5,55,0,0,1502,1505,7,23,0,0,1503,
		1506,3,334,167,0,1504,1506,5,432,0,0,1505,1503,1,0,0,0,1505,1504,1,0,0,
		0,1505,1506,1,0,0,0,1506,1508,1,0,0,0,1507,1509,5,459,0,0,1508,1507,1,
		0,0,0,1508,1509,1,0,0,0,1509,1578,1,0,0,0,1510,1511,5,11,0,0,1511,1521,
		7,23,0,0,1512,1515,3,334,167,0,1513,1515,5,432,0,0,1514,1512,1,0,0,0,1514,
		1513,1,0,0,0,1515,1519,1,0,0,0,1516,1517,5,199,0,0,1517,1518,5,313,0,0,
		1518,1520,5,435,0,0,1519,1516,1,0,0,0,1519,1520,1,0,0,0,1520,1522,1,0,
		0,0,1521,1514,1,0,0,0,1521,1522,1,0,0,0,1522,1524,1,0,0,0,1523,1525,5,
		459,0,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,1525,1578,1,0,0,0,1526,1527,
		5,29,0,0,1527,1540,7,23,0,0,1528,1531,3,334,167,0,1529,1531,5,432,0,0,
		1530,1528,1,0,0,0,1530,1529,1,0,0,0,1531,1538,1,0,0,0,1532,1533,5,199,
		0,0,1533,1534,5,456,0,0,1534,1535,5,256,0,0,1535,1536,5,439,0,0,1536,1537,
		7,9,0,0,1537,1539,5,457,0,0,1538,1532,1,0,0,0,1538,1539,1,0,0,0,1539,1541,
		1,0,0,0,1540,1530,1,0,0,0,1540,1541,1,0,0,0,1541,1543,1,0,0,0,1542,1544,
		5,459,0,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,1578,1,0,0,0,1545,1547,
		5,29,0,0,1546,1548,5,422,0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,
		1550,1,0,0,0,1549,1551,5,459,0,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,
		1578,1,0,0,0,1552,1553,5,151,0,0,1553,1556,7,23,0,0,1554,1557,3,334,167,
		0,1555,1557,5,432,0,0,1556,1554,1,0,0,0,1556,1555,1,0,0,0,1556,1557,1,
		0,0,0,1557,1559,1,0,0,0,1558,1560,5,459,0,0,1559,1558,1,0,0,0,1559,1560,
		1,0,0,0,1560,1578,1,0,0,0,1561,1563,5,151,0,0,1562,1564,5,422,0,0,1563,
		1562,1,0,0,0,1563,1564,1,0,0,0,1564,1566,1,0,0,0,1565,1567,5,459,0,0,1566,
		1565,1,0,0,0,1566,1567,1,0,0,0,1567,1578,1,0,0,0,1568,1569,5,155,0,0,1569,
		1572,7,23,0,0,1570,1573,3,334,167,0,1571,1573,5,432,0,0,1572,1570,1,0,
		0,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1575,1,0,0,0,1574,1576,5,
		459,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1578,1,0,0,0,1577,1500,
		1,0,0,0,1577,1510,1,0,0,0,1577,1526,1,0,0,0,1577,1545,1,0,0,0,1577,1552,
		1,0,0,0,1577,1561,1,0,0,0,1577,1568,1,0,0,0,1578,131,1,0,0,0,1579,1581,
		5,283,0,0,1580,1582,5,433,0,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,
		133,1,0,0,0,1583,1584,5,189,0,0,1584,1586,3,334,167,0,1585,1587,5,459,
		0,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,135,1,0,0,0,1588,1589,5,64,
		0,0,1589,1590,5,7,0,0,1590,1591,7,24,0,0,1591,137,1,0,0,0,1592,1594,5,
		432,0,0,1593,1595,5,7,0,0,1594,1593,1,0,0,0,1594,1595,1,0,0,0,1595,1596,
		1,0,0,0,1596,1599,3,364,182,0,1597,1598,5,439,0,0,1598,1600,3,166,83,0,
		1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,139,1,0,0,0,1601,1602,5,170,0,
		0,1602,1603,5,456,0,0,1603,1604,3,142,71,0,1604,1605,5,457,0,0,1605,141,
		1,0,0,0,1606,1613,3,144,72,0,1607,1609,5,458,0,0,1608,1607,1,0,0,0,1608,
		1609,1,0,0,0,1609,1610,1,0,0,0,1610,1612,3,144,72,0,1611,1608,1,0,0,0,
		1612,1615,1,0,0,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,143,1,0,0,0,
		1615,1613,1,0,0,0,1616,1619,3,146,73,0,1617,1619,3,150,75,0,1618,1616,
		1,0,0,0,1618,1617,1,0,0,0,1619,145,1,0,0,0,1620,1624,3,334,167,0,1621,
		1625,3,364,182,0,1622,1623,5,7,0,0,1623,1625,3,166,83,0,1624,1621,1,0,
		0,0,1624,1622,1,0,0,0,1625,1628,1,0,0,0,1626,1627,5,27,0,0,1627,1629,3,
		334,167,0,1628,1626,1,0,0,0,1628,1629,1,0,0,0,1629,1631,1,0,0,0,1630,1632,
		3,324,162,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1656,1,0,0,0,1633,
		1634,5,31,0,0,1634,1636,3,334,167,0,1635,1633,1,0,0,0,1635,1636,1,0,0,
		0,1636,1637,1,0,0,0,1637,1638,5,49,0,0,1638,1641,3,168,84,0,1639,1640,
		5,199,0,0,1640,1642,5,191,0,0,1641,1639,1,0,0,0,1641,1642,1,0,0,0,1642,
		1657,1,0,0,0,1643,1649,5,84,0,0,1644,1645,5,456,0,0,1645,1646,5,433,0,
		0,1646,1647,5,458,0,0,1647,1648,5,433,0,0,1648,1650,5,457,0,0,1649,1644,
		1,0,0,0,1649,1650,1,0,0,0,1650,1654,1,0,0,0,1651,1652,5,110,0,0,1652,1653,
		5,72,0,0,1653,1655,5,143,0,0,1654,1651,1,0,0,0,1654,1655,1,0,0,0,1655,
		1657,1,0,0,0,1656,1635,1,0,0,0,1656,1643,1,0,0,0,1656,1657,1,0,0,0,1657,
		1659,1,0,0,0,1658,1660,5,153,0,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,
		1664,1,0,0,0,1661,1663,3,148,74,0,1662,1661,1,0,0,0,1663,1666,1,0,0,0,
		1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,147,1,0,0,0,1666,1664,1,0,0,0,
		1667,1668,5,31,0,0,1668,1670,3,334,167,0,1669,1667,1,0,0,0,1669,1670,1,
		0,0,0,1670,1672,1,0,0,0,1671,1673,3,324,162,0,1672,1671,1,0,0,0,1672,1673,
		1,0,0,0,1673,1695,1,0,0,0,1674,1675,5,133,0,0,1675,1678,5,97,0,0,1676,
		1678,5,185,0,0,1677,1674,1,0,0,0,1677,1676,1,0,0,0,1678,1680,1,0,0,0,1679,
		1681,3,322,161,0,1680,1679,1,0,0,0,1680,1681,1,0,0,0,1681,1683,1,0,0,0,
		1682,1684,3,152,76,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1696,1,0,
		0,0,1685,1689,5,22,0,0,1686,1687,5,110,0,0,1687,1688,5,72,0,0,1688,1690,
		5,143,0,0,1689,1686,1,0,0,0,1689,1690,1,0,0,0,1690,1691,1,0,0,0,1691,1692,
		5,456,0,0,1692,1693,3,180,90,0,1693,1694,5,457,0,0,1694,1696,1,0,0,0,1695,
		1677,1,0,0,0,1695,1685,1,0,0,0,1696,149,1,0,0,0,1697,1698,5,31,0,0,1698,
		1700,3,334,167,0,1699,1697,1,0,0,0,1699,1700,1,0,0,0,1700,1732,1,0,0,0,
		1701,1702,5,133,0,0,1702,1705,5,97,0,0,1703,1705,5,185,0,0,1704,1701,1,
		0,0,0,1704,1703,1,0,0,0,1705,1707,1,0,0,0,1706,1708,3,322,161,0,1707,1706,
		1,0,0,0,1707,1708,1,0,0,0,1708,1709,1,0,0,0,1709,1710,5,456,0,0,1710,1712,
		3,316,158,0,1711,1713,7,5,0,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,
		1714,1,0,0,0,1714,1716,5,457,0,0,1715,1717,3,152,76,0,1716,1715,1,0,0,
		0,1716,1717,1,0,0,0,1717,1720,1,0,0,0,1718,1719,5,117,0,0,1719,1721,3,
		334,167,0,1720,1718,1,0,0,0,1720,1721,1,0,0,0,1721,1733,1,0,0,0,1722,1726,
		5,22,0,0,1723,1724,5,110,0,0,1724,1725,5,72,0,0,1725,1727,5,143,0,0,1726,
		1723,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1729,5,456,0,0,1729,
		1730,3,180,90,0,1730,1731,5,457,0,0,1731,1733,1,0,0,0,1732,1704,1,0,0,
		0,1732,1722,1,0,0,0,1733,151,1,0,0,0,1734,1735,5,199,0,0,1735,1736,5,456,
		0,0,1736,1741,3,154,77,0,1737,1738,5,458,0,0,1738,1740,3,154,77,0,1739,
		1737,1,0,0,0,1740,1743,1,0,0,0,1741,1739,1,0,0,0,1741,1742,1,0,0,0,1742,
		1744,1,0,0,0,1743,1741,1,0,0,0,1744,1745,5,457,0,0,1745,153,1,0,0,0,1746,
		1747,3,336,168,0,1747,1751,5,439,0,0,1748,1752,3,336,168,0,1749,1752,3,
		320,160,0,1750,1752,5,433,0,0,1751,1748,1,0,0,0,1751,1749,1,0,0,0,1751,
		1750,1,0,0,0,1752,155,1,0,0,0,1753,1754,5,48,0,0,1754,1786,3,318,159,0,
		1755,1765,5,44,0,0,1756,1763,3,158,79,0,1757,1758,5,72,0,0,1758,1761,5,
		187,0,0,1759,1760,5,114,0,0,1760,1762,3,316,158,0,1761,1759,1,0,0,0,1761,
		1762,1,0,0,0,1762,1764,1,0,0,0,1763,1757,1,0,0,0,1763,1764,1,0,0,0,1764,
		1766,1,0,0,0,1765,1756,1,0,0,0,1765,1766,1,0,0,0,1766,1787,1,0,0,0,1767,
		1769,5,296,0,0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,1771,1,0,0,0,1770,
		1772,5,378,0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,
		1774,5,44,0,0,1774,1775,5,72,0,0,1775,1784,3,24,12,0,1776,1782,5,72,0,
		0,1777,1778,5,139,0,0,1778,1783,5,340,0,0,1779,1783,5,187,0,0,1780,1781,
		5,114,0,0,1781,1783,3,316,158,0,1782,1777,1,0,0,0,1782,1779,1,0,0,0,1782,
		1780,1,0,0,0,1783,1785,1,0,0,0,1784,1776,1,0,0,0,1784,1785,1,0,0,0,1785,
		1787,1,0,0,0,1786,1755,1,0,0,0,1786,1768,1,0,0,0,1787,1789,1,0,0,0,1788,
		1790,5,459,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,157,1,0,0,0,1791,
		1793,7,11,0,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1795,1,0,0,0,1794,
		1796,7,25,0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1798,1,0,0,0,1797,
		1799,7,26,0,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,1801,1,0,0,0,1800,
		1802,7,27,0,0,1801,1800,1,0,0,0,1801,1802,1,0,0,0,1802,1804,1,0,0,0,1803,
		1805,5,412,0,0,1804,1803,1,0,0,0,1804,1805,1,0,0,0,1805,1806,1,0,0,0,1806,
		1807,5,72,0,0,1807,1808,3,24,12,0,1808,159,1,0,0,0,1809,1819,5,68,0,0,
		1810,1817,5,106,0,0,1811,1817,5,353,0,0,1812,1817,5,274,0,0,1813,1817,
		5,305,0,0,1814,1815,7,28,0,0,1815,1817,3,166,83,0,1816,1810,1,0,0,0,1816,
		1811,1,0,0,0,1816,1812,1,0,0,0,1816,1813,1,0,0,0,1816,1814,1,0,0,0,1816,
		1817,1,0,0,0,1817,1818,1,0,0,0,1818,1820,5,77,0,0,1819,1816,1,0,0,0,1819,
		1820,1,0,0,0,1820,1822,1,0,0,0,1821,1823,5,282,0,0,1822,1821,1,0,0,0,1822,
		1823,1,0,0,0,1823,1824,1,0,0,0,1824,1834,3,318,159,0,1825,1826,5,94,0,
		0,1826,1831,5,432,0,0,1827,1828,5,458,0,0,1828,1830,5,432,0,0,1829,1827,
		1,0,0,0,1830,1833,1,0,0,0,1831,1829,1,0,0,0,1831,1832,1,0,0,0,1832,1835,
		1,0,0,0,1833,1831,1,0,0,0,1834,1825,1,0,0,0,1834,1835,1,0,0,0,1835,1837,
		1,0,0,0,1836,1838,5,459,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,161,
		1,0,0,0,1839,1840,5,163,0,0,1840,1844,3,334,167,0,1841,1845,3,334,167,
		0,1842,1845,3,164,82,0,1843,1845,3,320,160,0,1844,1841,1,0,0,0,1844,1842,
		1,0,0,0,1844,1843,1,0,0,0,1845,1847,1,0,0,0,1846,1848,5,459,0,0,1847,1846,
		1,0,0,0,1847,1848,1,0,0,0,1848,1887,1,0,0,0,1849,1850,5,163,0,0,1850,1851,
		5,177,0,0,1851,1852,5,298,0,0,1852,1861,5,308,0,0,1853,1854,5,139,0,0,
		1854,1862,5,414,0,0,1855,1856,5,139,0,0,1856,1862,5,232,0,0,1857,1858,
		5,367,0,0,1858,1862,5,139,0,0,1859,1862,5,389,0,0,1860,1862,5,382,0,0,
		1861,1853,1,0,0,0,1861,1855,1,0,0,0,1861,1857,1,0,0,0,1861,1859,1,0,0,
		0,1861,1860,1,0,0,0,1862,1864,1,0,0,0,1863,1865,5,459,0,0,1864,1863,1,
		0,0,0,1864,1865,1,0,0,0,1865,1887,1,0,0,0,1866,1867,5,163,0,0,1867,1868,
		5,86,0,0,1868,1869,3,306,153,0,1869,1871,3,320,160,0,1870,1872,5,459,0,
		0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,1887,1,0,0,0,1873,1874,5,163,
		0,0,1874,1875,5,206,0,0,1875,1887,3,320,160,0,1876,1877,5,163,0,0,1877,
		1878,5,355,0,0,1878,1887,3,320,160,0,1879,1880,5,163,0,0,1880,1881,5,208,
		0,0,1881,1887,3,320,160,0,1882,1883,5,163,0,0,1883,1884,5,167,0,0,1884,
		1885,7,29,0,0,1885,1887,3,320,160,0,1886,1839,1,0,0,0,1886,1849,1,0,0,
		0,1886,1866,1,0,0,0,1886,1873,1,0,0,0,1886,1876,1,0,0,0,1886,1879,1,0,
		0,0,1886,1882,1,0,0,0,1887,163,1,0,0,0,1888,1891,3,330,165,0,1889,1891,
		5,432,0,0,1890,1888,1,0,0,0,1890,1889,1,0,0,0,1891,165,1,0,0,0,1892,1893,
		6,83,-1,0,1893,1941,5,49,0,0,1894,1941,5,432,0,0,1895,1941,5,111,0,0,1896,
		1941,3,330,165,0,1897,1941,3,246,123,0,1898,1941,3,324,162,0,1899,1900,
		5,19,0,0,1900,1902,3,166,83,0,1901,1903,3,248,124,0,1902,1901,1,0,0,0,
		1903,1904,1,0,0,0,1904,1902,1,0,0,0,1904,1905,1,0,0,0,1905,1908,1,0,0,
		0,1906,1907,5,59,0,0,1907,1909,3,166,83,0,1908,1906,1,0,0,0,1908,1909,
		1,0,0,0,1909,1910,1,0,0,0,1910,1911,5,60,0,0,1911,1941,1,0,0,0,1912,1914,
		5,19,0,0,1913,1915,3,250,125,0,1914,1913,1,0,0,0,1915,1916,1,0,0,0,1916,
		1914,1,0,0,0,1916,1917,1,0,0,0,1917,1920,1,0,0,0,1918,1919,5,59,0,0,1919,
		1921,3,166,83,0,1920,1918,1,0,0,0,1920,1921,1,0,0,0,1921,1922,1,0,0,0,
		1922,1923,5,60,0,0,1923,1941,1,0,0,0,1924,1941,3,314,157,0,1925,1926,5,
		456,0,0,1926,1927,3,166,83,0,1927,1928,5,457,0,0,1928,1941,1,0,0,0,1929,
		1930,5,456,0,0,1930,1931,3,170,85,0,1931,1932,5,457,0,0,1932,1941,1,0,
		0,0,1933,1934,5,466,0,0,1934,1941,3,166,83,8,1935,1936,7,30,0,0,1936,1941,
		3,166,83,6,1937,1941,3,282,141,0,1938,1941,3,360,180,0,1939,1941,3,362,
		181,0,1940,1892,1,0,0,0,1940,1894,1,0,0,0,1940,1895,1,0,0,0,1940,1896,
		1,0,0,0,1940,1897,1,0,0,0,1940,1898,1,0,0,0,1940,1899,1,0,0,0,1940,1912,
		1,0,0,0,1940,1924,1,0,0,0,1940,1925,1,0,0,0,1940,1929,1,0,0,0,1940,1933,
		1,0,0,0,1940,1935,1,0,0,0,1940,1937,1,0,0,0,1940,1938,1,0,0,0,1940,1939,
		1,0,0,0,1941,1962,1,0,0,0,1942,1943,10,14,0,0,1943,1944,5,212,0,0,1944,
		1945,5,404,0,0,1945,1946,5,425,0,0,1946,1961,3,166,83,15,1947,1948,10,
		7,0,0,1948,1949,7,31,0,0,1949,1961,3,166,83,8,1950,1951,10,5,0,0,1951,
		1952,7,32,0,0,1952,1961,3,166,83,6,1953,1954,10,4,0,0,1954,1955,3,338,
		169,0,1955,1956,3,166,83,5,1956,1961,1,0,0,0,1957,1958,10,16,0,0,1958,
		1959,5,27,0,0,1959,1961,3,334,167,0,1960,1942,1,0,0,0,1960,1947,1,0,0,
		0,1960,1950,1,0,0,0,1960,1953,1,0,0,0,1960,1957,1,0,0,0,1961,1964,1,0,
		0,0,1962,1960,1,0,0,0,1962,1963,1,0,0,0,1963,167,1,0,0,0,1964,1962,1,0,
		0,0,1965,1974,5,111,0,0,1966,1974,3,330,165,0,1967,1974,3,246,123,0,1968,
		1974,5,432,0,0,1969,1970,5,456,0,0,1970,1971,3,168,84,0,1971,1972,5,457,
		0,0,1972,1974,1,0,0,0,1973,1965,1,0,0,0,1973,1966,1,0,0,0,1973,1967,1,
		0,0,0,1973,1968,1,0,0,0,1973,1969,1,0,0,0,1974,169,1,0,0,0,1975,1976,3,
		24,12,0,1976,171,1,0,0,0,1977,1980,5,199,0,0,1978,1979,5,424,0,0,1979,
		1981,5,458,0,0,1980,1978,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,
		1987,3,174,87,0,1983,1984,5,458,0,0,1984,1986,3,174,87,0,1985,1983,1,0,
		0,0,1986,1989,1,0,0,0,1987,1985,1,0,0,0,1987,1988,1,0,0,0,1988,173,1,0,
		0,0,1989,1987,1,0,0,0,1990,1995,3,334,167,0,1991,1992,5,456,0,0,1992,1993,
		3,316,158,0,1993,1994,5,457,0,0,1994,1996,1,0,0,0,1995,1991,1,0,0,0,1995,
		1996,1,0,0,0,1996,1997,1,0,0,0,1997,1998,5,7,0,0,1998,1999,5,456,0,0,1999,
		2000,3,24,12,0,2000,2001,5,457,0,0,2001,175,1,0,0,0,2002,2005,3,314,157,
		0,2003,2005,5,432,0,0,2004,2002,1,0,0,0,2004,2003,1,0,0,0,2005,2008,1,
		0,0,0,2006,2009,5,439,0,0,2007,2009,3,340,170,0,2008,2006,1,0,0,0,2008,
		2007,1,0,0,0,2009,2010,1,0,0,0,2010,2019,3,166,83,0,2011,2012,3,334,167,
		0,2012,2013,5,451,0,0,2013,2014,3,334,167,0,2014,2015,5,456,0,0,2015,2016,
		3,268,134,0,2016,2017,5,457,0,0,2017,2019,1,0,0,0,2018,2004,1,0,0,0,2018,
		2011,1,0,0,0,2019,177,1,0,0,0,2020,2025,3,180,90,0,2021,2022,5,458,0,0,
		2022,2024,3,180,90,0,2023,2021,1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,
		0,0,2025,2026,1,0,0,0,2026,179,1,0,0,0,2027,2025,1,0,0,0,2028,2029,6,90,
		-1,0,2029,2030,3,182,91,0,2030,2039,1,0,0,0,2031,2032,10,3,0,0,2032,2033,
		5,5,0,0,2033,2038,3,180,90,4,2034,2035,10,2,0,0,2035,2036,5,124,0,0,2036,
		2038,3,180,90,3,2037,2031,1,0,0,0,2037,2034,1,0,0,0,2038,2041,1,0,0,0,
		2039,2037,1,0,0,0,2039,2040,1,0,0,0,2040,181,1,0,0,0,2041,2039,1,0,0,0,
		2042,2043,5,110,0,0,2043,2101,3,182,91,0,2044,2045,5,65,0,0,2045,2046,
		5,456,0,0,2046,2047,3,170,85,0,2047,2048,5,457,0,0,2048,2101,1,0,0,0,2049,
		2050,3,166,83,0,2050,2051,3,338,169,0,2051,2052,3,324,162,0,2052,2101,
		1,0,0,0,2053,2054,3,166,83,0,2054,2055,3,338,169,0,2055,2056,3,166,83,
		0,2056,2101,1,0,0,0,2057,2058,3,166,83,0,2058,2059,3,338,169,0,2059,2060,
		7,33,0,0,2060,2061,5,456,0,0,2061,2062,3,170,85,0,2062,2063,5,457,0,0,
		2063,2101,1,0,0,0,2064,2066,3,166,83,0,2065,2067,5,110,0,0,2066,2065,1,
		0,0,0,2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2069,5,12,0,0,2069,2070,
		3,166,83,0,2070,2071,5,5,0,0,2071,2072,3,166,83,0,2072,2101,1,0,0,0,2073,
		2075,3,166,83,0,2074,2076,5,110,0,0,2075,2074,1,0,0,0,2075,2076,1,0,0,
		0,2076,2077,1,0,0,0,2077,2078,5,89,0,0,2078,2081,5,456,0,0,2079,2082,3,
		170,85,0,2080,2082,3,268,134,0,2081,2079,1,0,0,0,2081,2080,1,0,0,0,2082,
		2083,1,0,0,0,2083,2084,5,457,0,0,2084,2101,1,0,0,0,2085,2087,3,166,83,
		0,2086,2088,5,110,0,0,2087,2086,1,0,0,0,2087,2088,1,0,0,0,2088,2089,1,
		0,0,0,2089,2090,5,100,0,0,2090,2093,3,166,83,0,2091,2092,5,62,0,0,2092,
		2094,3,166,83,0,2093,2091,1,0,0,0,2093,2094,1,0,0,0,2094,2101,1,0,0,0,
		2095,2096,5,456,0,0,2096,2097,3,180,90,0,2097,2098,5,457,0,0,2098,2101,
		1,0,0,0,2099,2101,5,433,0,0,2100,2042,1,0,0,0,2100,2044,1,0,0,0,2100,2049,
		1,0,0,0,2100,2053,1,0,0,0,2100,2057,1,0,0,0,2100,2064,1,0,0,0,2100,2073,
		1,0,0,0,2100,2085,1,0,0,0,2100,2095,1,0,0,0,2100,2099,1,0,0,0,2101,183,
		1,0,0,0,2102,2103,6,92,-1,0,2103,2104,5,456,0,0,2104,2105,3,184,92,0,2105,
		2106,5,457,0,0,2106,2109,1,0,0,0,2107,2109,3,188,94,0,2108,2102,1,0,0,
		0,2108,2107,1,0,0,0,2109,2116,1,0,0,0,2110,2111,10,2,0,0,2111,2112,3,186,
		93,0,2112,2113,3,184,92,3,2113,2115,1,0,0,0,2114,2110,1,0,0,0,2115,2118,
		1,0,0,0,2116,2114,1,0,0,0,2116,2117,1,0,0,0,2117,185,1,0,0,0,2118,2116,
		1,0,0,0,2119,2121,5,184,0,0,2120,2122,5,3,0,0,2121,2120,1,0,0,0,2121,2122,
		1,0,0,0,2122,2126,1,0,0,0,2123,2126,5,63,0,0,2124,2126,5,93,0,0,2125,2119,
		1,0,0,0,2125,2123,1,0,0,0,2125,2124,1,0,0,0,2126,187,1,0,0,0,2127,2129,
		5,158,0,0,2128,2130,7,34,0,0,2129,2128,1,0,0,0,2129,2130,1,0,0,0,2130,
		2132,1,0,0,0,2131,2133,3,194,97,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,
		2133,2134,1,0,0,0,2134,2137,3,216,108,0,2135,2136,5,94,0,0,2136,2138,3,
		306,153,0,2137,2135,1,0,0,0,2137,2138,1,0,0,0,2138,2141,1,0,0,0,2139,2140,
		5,77,0,0,2140,2142,3,220,110,0,2141,2139,1,0,0,0,2141,2142,1,0,0,0,2142,
		2145,1,0,0,0,2143,2144,5,197,0,0,2144,2146,3,180,90,0,2145,2143,1,0,0,
		0,2145,2146,1,0,0,0,2146,2157,1,0,0,0,2147,2148,5,82,0,0,2148,2149,5,16,
		0,0,2149,2154,3,208,104,0,2150,2151,5,458,0,0,2151,2153,3,208,104,0,2152,
		2150,1,0,0,0,2153,2156,1,0,0,0,2154,2152,1,0,0,0,2154,2155,1,0,0,0,2155,
		2158,1,0,0,0,2156,2154,1,0,0,0,2157,2147,1,0,0,0,2157,2158,1,0,0,0,2158,
		2160,1,0,0,0,2159,2161,3,190,95,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,
		2161,2164,1,0,0,0,2162,2163,5,199,0,0,2163,2165,7,35,0,0,2164,2162,1,0,
		0,0,2164,2165,1,0,0,0,2165,2168,1,0,0,0,2166,2167,5,83,0,0,2167,2169,3,
		180,90,0,2168,2166,1,0,0,0,2168,2169,1,0,0,0,2169,189,1,0,0,0,2170,2171,
		5,82,0,0,2171,2172,5,16,0,0,2172,2173,5,284,0,0,2173,2174,5,383,0,0,2174,
		2175,5,456,0,0,2175,2180,3,192,96,0,2176,2177,5,458,0,0,2177,2179,3,192,
		96,0,2178,2176,1,0,0,0,2179,2182,1,0,0,0,2180,2178,1,0,0,0,2180,2181,1,
		0,0,0,2181,2183,1,0,0,0,2182,2180,1,0,0,0,2183,2184,5,457,0,0,2184,191,
		1,0,0,0,2185,2186,5,456,0,0,2186,2200,5,457,0,0,2187,2200,3,208,104,0,
		2188,2189,5,456,0,0,2189,2194,3,208,104,0,2190,2191,5,458,0,0,2191,2193,
		3,208,104,0,2192,2190,1,0,0,0,2193,2196,1,0,0,0,2194,2192,1,0,0,0,2194,
		2195,1,0,0,0,2195,2197,1,0,0,0,2196,2194,1,0,0,0,2197,2198,5,457,0,0,2198,
		2200,1,0,0,0,2199,2185,1,0,0,0,2199,2187,1,0,0,0,2199,2188,1,0,0,0,2200,
		193,1,0,0,0,2201,2202,5,175,0,0,2202,2204,3,166,83,0,2203,2205,5,129,0,
		0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2208,1,0,0,0,2206,2207,5,199,
		0,0,2207,2209,5,403,0,0,2208,2206,1,0,0,0,2208,2209,1,0,0,0,2209,195,1,
		0,0,0,2210,2211,5,175,0,0,2211,2212,5,456,0,0,2212,2213,3,166,83,0,2213,
		2215,5,457,0,0,2214,2216,5,129,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,
		2216,197,1,0,0,0,2217,2218,5,125,0,0,2218,2219,5,16,0,0,2219,2224,3,206,
		103,0,2220,2221,5,458,0,0,2221,2223,3,206,103,0,2222,2220,1,0,0,0,2223,
		2226,1,0,0,0,2224,2222,1,0,0,0,2224,2225,1,0,0,0,2225,2233,1,0,0,0,2226,
		2224,1,0,0,0,2227,2228,5,338,0,0,2228,2229,3,166,83,0,2229,2231,7,36,0,
		0,2230,2232,3,200,100,0,2231,2230,1,0,0,0,2231,2232,1,0,0,0,2232,2234,
		1,0,0,0,2233,2227,1,0,0,0,2233,2234,1,0,0,0,2234,199,1,0,0,0,2235,2236,
		5,68,0,0,2236,2237,7,37,0,0,2237,2238,3,166,83,0,2238,2239,7,36,0,0,2239,
		2240,5,340,0,0,2240,201,1,0,0,0,2241,2242,5,72,0,0,2242,2261,5,14,0,0,
		2243,2244,5,72,0,0,2244,2245,5,423,0,0,2245,2247,5,213,0,0,2246,2248,3,
		204,102,0,2247,2246,1,0,0,0,2247,2248,1,0,0,0,2248,2261,1,0,0,0,2249,2250,
		5,72,0,0,2250,2251,5,423,0,0,2251,2255,5,350,0,0,2252,2253,5,456,0,0,2253,
		2254,5,435,0,0,2254,2256,5,457,0,0,2255,2252,1,0,0,0,2255,2256,1,0,0,0,
		2256,2258,1,0,0,0,2257,2259,3,204,102,0,2258,2257,1,0,0,0,2258,2259,1,
		0,0,0,2259,2261,1,0,0,0,2260,2241,1,0,0,0,2260,2243,1,0,0,0,2260,2249,
		1,0,0,0,2261,203,1,0,0,0,2262,2267,5,458,0,0,2263,2264,5,436,0,0,2264,
		2268,5,221,0,0,2265,2268,5,411,0,0,2266,2268,5,371,0,0,2267,2263,1,0,0,
		0,2267,2265,1,0,0,0,2267,2266,1,0,0,0,2268,205,1,0,0,0,2269,2271,3,166,
		83,0,2270,2272,7,5,0,0,2271,2270,1,0,0,0,2271,2272,1,0,0,0,2272,207,1,
		0,0,0,2273,2274,3,166,83,0,2274,209,1,0,0,0,2275,2276,5,123,0,0,2276,2277,
		5,456,0,0,2277,2282,3,212,106,0,2278,2279,5,458,0,0,2279,2281,3,212,106,
		0,2280,2278,1,0,0,0,2281,2284,1,0,0,0,2282,2280,1,0,0,0,2282,2283,1,0,
		0,0,2283,2285,1,0,0,0,2284,2282,1,0,0,0,2285,2286,5,457,0,0,2286,211,1,
		0,0,0,2287,2288,5,269,0,0,2288,2333,5,433,0,0,2289,2290,7,38,0,0,2290,
		2333,5,82,0,0,2291,2292,7,39,0,0,2292,2333,5,184,0,0,2293,2294,7,40,0,
		0,2294,2333,5,96,0,0,2295,2296,5,268,0,0,2296,2333,5,420,0,0,2297,2298,
		5,277,0,0,2298,2333,5,125,0,0,2299,2333,5,290,0,0,2300,2301,5,301,0,0,
		2301,2333,5,131,0,0,2302,2303,5,302,0,0,2303,2333,5,131,0,0,2304,2305,
		5,315,0,0,2305,2333,5,433,0,0,2306,2307,5,316,0,0,2307,2333,5,433,0,0,
		2308,2309,5,342,0,0,2309,2310,5,72,0,0,2310,2311,5,456,0,0,2311,2316,3,
		214,107,0,2312,2313,5,458,0,0,2313,2315,3,214,107,0,2314,2312,1,0,0,0,
		2315,2318,1,0,0,0,2316,2314,1,0,0,0,2316,2317,1,0,0,0,2317,2319,1,0,0,
		0,2318,2316,1,0,0,0,2319,2320,5,457,0,0,2320,2333,1,0,0,0,2321,2322,5,
		342,0,0,2322,2323,5,72,0,0,2323,2333,5,415,0,0,2324,2325,5,347,0,0,2325,
		2333,7,16,0,0,2326,2333,5,362,0,0,2327,2328,5,369,0,0,2328,2333,5,131,
		0,0,2329,2330,5,189,0,0,2330,2331,5,131,0,0,2331,2333,5,435,0,0,2332,2287,
		1,0,0,0,2332,2289,1,0,0,0,2332,2291,1,0,0,0,2332,2293,1,0,0,0,2332,2295,
		1,0,0,0,2332,2297,1,0,0,0,2332,2299,1,0,0,0,2332,2300,1,0,0,0,2332,2302,
		1,0,0,0,2332,2304,1,0,0,0,2332,2306,1,0,0,0,2332,2308,1,0,0,0,2332,2321,
		1,0,0,0,2332,2324,1,0,0,0,2332,2326,1,0,0,0,2332,2327,1,0,0,0,2332,2329,
		1,0,0,0,2333,213,1,0,0,0,2334,2338,5,432,0,0,2335,2339,5,415,0,0,2336,
		2337,5,439,0,0,2337,2339,3,330,165,0,2338,2335,1,0,0,0,2338,2336,1,0,0,
		0,2339,215,1,0,0,0,2340,2345,3,218,109,0,2341,2342,5,458,0,0,2342,2344,
		3,218,109,0,2343,2341,1,0,0,0,2344,2347,1,0,0,0,2345,2343,1,0,0,0,2345,
		2346,1,0,0,0,2346,217,1,0,0,0,2347,2345,1,0,0,0,2348,2349,3,306,153,0,
		2349,2350,5,451,0,0,2350,2352,1,0,0,0,2351,2348,1,0,0,0,2351,2352,1,0,
		0,0,2352,2356,1,0,0,0,2353,2357,3,264,132,0,2354,2355,5,455,0,0,2355,2357,
		7,41,0,0,2356,2353,1,0,0,0,2356,2354,1,0,0,0,2357,2370,1,0,0,0,2358,2359,
		3,262,131,0,2359,2360,5,439,0,0,2360,2361,3,166,83,0,2361,2370,1,0,0,0,
		2362,2367,3,166,83,0,2363,2365,5,7,0,0,2364,2363,1,0,0,0,2364,2365,1,0,
		0,0,2365,2366,1,0,0,0,2366,2368,3,262,131,0,2367,2364,1,0,0,0,2367,2368,
		1,0,0,0,2368,2370,1,0,0,0,2369,2351,1,0,0,0,2369,2358,1,0,0,0,2369,2362,
		1,0,0,0,2370,219,1,0,0,0,2371,2376,3,222,111,0,2372,2373,5,458,0,0,2373,
		2375,3,222,111,0,2374,2372,1,0,0,0,2375,2378,1,0,0,0,2376,2374,1,0,0,0,
		2376,2377,1,0,0,0,2377,221,1,0,0,0,2378,2376,1,0,0,0,2379,2380,6,111,-1,
		0,2380,2381,5,456,0,0,2381,2382,3,222,111,0,2382,2383,5,457,0,0,2383,2386,
		1,0,0,0,2384,2386,3,224,112,0,2385,2379,1,0,0,0,2385,2384,1,0,0,0,2386,
		2404,1,0,0,0,2387,2388,10,3,0,0,2388,2389,5,38,0,0,2389,2390,5,96,0,0,
		2390,2403,3,222,111,4,2391,2392,10,2,0,0,2392,2393,7,42,0,0,2393,2394,
		5,210,0,0,2394,2403,3,222,111,3,2395,2396,10,4,0,0,2396,2397,3,236,118,
		0,2397,2398,5,96,0,0,2398,2399,3,222,111,0,2399,2400,5,117,0,0,2400,2401,
		3,180,90,0,2401,2403,1,0,0,0,2402,2387,1,0,0,0,2402,2391,1,0,0,0,2402,
		2395,1,0,0,0,2403,2406,1,0,0,0,2404,2402,1,0,0,0,2404,2405,1,0,0,0,2405,
		223,1,0,0,0,2406,2404,1,0,0,0,2407,2409,3,306,153,0,2408,2410,3,226,113,
		0,2409,2408,1,0,0,0,2409,2410,1,0,0,0,2410,2412,1,0,0,0,2411,2413,3,232,
		116,0,2412,2411,1,0,0,0,2412,2413,1,0,0,0,2413,2415,1,0,0,0,2414,2416,
		3,252,126,0,2415,2414,1,0,0,0,2415,2416,1,0,0,0,2416,2450,1,0,0,0,2417,
		2419,3,240,120,0,2418,2420,3,232,116,0,2419,2418,1,0,0,0,2419,2420,1,0,
		0,0,2420,2450,1,0,0,0,2421,2426,3,244,122,0,2422,2424,3,232,116,0,2423,
		2425,3,260,130,0,2424,2423,1,0,0,0,2424,2425,1,0,0,0,2425,2427,1,0,0,0,
		2426,2422,1,0,0,0,2426,2427,1,0,0,0,2427,2450,1,0,0,0,2428,2430,3,234,
		117,0,2429,2431,3,232,116,0,2430,2429,1,0,0,0,2430,2431,1,0,0,0,2431,2450,
		1,0,0,0,2432,2434,3,246,123,0,2433,2435,3,232,116,0,2434,2433,1,0,0,0,
		2434,2435,1,0,0,0,2435,2450,1,0,0,0,2436,2438,5,432,0,0,2437,2439,3,232,
		116,0,2438,2437,1,0,0,0,2438,2439,1,0,0,0,2439,2450,1,0,0,0,2440,2441,
		5,432,0,0,2441,2442,5,451,0,0,2442,2447,3,246,123,0,2443,2445,3,232,116,
		0,2444,2446,3,260,130,0,2445,2444,1,0,0,0,2445,2446,1,0,0,0,2446,2448,
		1,0,0,0,2447,2443,1,0,0,0,2447,2448,1,0,0,0,2448,2450,1,0,0,0,2449,2407,
		1,0,0,0,2449,2417,1,0,0,0,2449,2421,1,0,0,0,2449,2428,1,0,0,0,2449,2432,
		1,0,0,0,2449,2436,1,0,0,0,2449,2440,1,0,0,0,2450,225,1,0,0,0,2451,2453,
		5,171,0,0,2452,2454,5,168,0,0,2453,2452,1,0,0,0,2453,2454,1,0,0,0,2454,
		2455,1,0,0,0,2455,2456,5,456,0,0,2456,2458,3,228,114,0,2457,2459,7,6,0,
		0,2458,2457,1,0,0,0,2458,2459,1,0,0,0,2459,2460,1,0,0,0,2460,2463,5,457,
		0,0,2461,2462,5,367,0,0,2462,2464,3,230,115,0,2463,2461,1,0,0,0,2463,2464,
		1,0,0,0,2464,227,1,0,0,0,2465,2466,5,433,0,0,2466,229,1,0,0,0,2467,2468,
		5,433,0,0,2468,231,1,0,0,0,2469,2471,5,7,0,0,2470,2469,1,0,0,0,2470,2471,
		1,0,0,0,2471,2472,1,0,0,0,2472,2473,3,334,167,0,2473,233,1,0,0,0,2474,
		2475,5,20,0,0,2475,2476,5,456,0,0,2476,2477,5,21,0,0,2477,2478,3,306,153,
		0,2478,2479,5,458,0,0,2479,2480,7,43,0,0,2480,2481,5,457,0,0,2481,235,
		1,0,0,0,2482,2484,5,91,0,0,2483,2482,1,0,0,0,2483,2484,1,0,0,0,2484,2490,
		1,0,0,0,2485,2487,7,44,0,0,2486,2488,5,126,0,0,2487,2486,1,0,0,0,2487,
		2488,1,0,0,0,2488,2490,1,0,0,0,2489,2483,1,0,0,0,2489,2485,1,0,0,0,2490,
		2492,1,0,0,0,2491,2493,7,45,0,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,
		237,1,0,0,0,2494,2496,3,306,153,0,2495,2497,3,252,126,0,2496,2495,1,0,
		0,0,2496,2497,1,0,0,0,2497,239,1,0,0,0,2498,2499,5,121,0,0,2499,2500,5,
		456,0,0,2500,2501,5,435,0,0,2501,2502,5,458,0,0,2502,2503,5,435,0,0,2503,
		2504,5,458,0,0,2504,2505,5,435,0,0,2505,2525,5,457,0,0,2506,2507,5,121,
		0,0,2507,2508,5,456,0,0,2508,2509,5,15,0,0,2509,2510,5,435,0,0,2510,2520,
		5,458,0,0,2511,2516,3,242,121,0,2512,2513,5,458,0,0,2513,2515,3,242,121,
		0,2514,2512,1,0,0,0,2515,2518,1,0,0,0,2516,2514,1,0,0,0,2516,2517,1,0,
		0,0,2517,2521,1,0,0,0,2518,2516,1,0,0,0,2519,2521,3,334,167,0,2520,2511,
		1,0,0,0,2520,2519,1,0,0,0,2521,2522,1,0,0,0,2522,2523,5,457,0,0,2523,2525,
		1,0,0,0,2524,2498,1,0,0,0,2524,2506,1,0,0,0,2525,241,1,0,0,0,2526,2527,
		3,334,167,0,2527,2528,5,439,0,0,2528,2529,7,46,0,0,2529,243,1,0,0,0,2530,
		2536,3,170,85,0,2531,2532,5,456,0,0,2532,2533,3,170,85,0,2533,2534,5,457,
		0,0,2534,2536,1,0,0,0,2535,2530,1,0,0,0,2535,2531,1,0,0,0,2536,245,1,0,
		0,0,2537,2711,3,276,138,0,2538,2711,3,278,139,0,2539,2540,3,326,163,0,
		2540,2542,5,456,0,0,2541,2543,3,268,134,0,2542,2541,1,0,0,0,2542,2543,
		1,0,0,0,2543,2544,1,0,0,0,2544,2545,5,457,0,0,2545,2711,1,0,0,0,2546,2711,
		3,274,137,0,2547,2548,5,223,0,0,2548,2549,5,456,0,0,2549,2550,5,461,0,
		0,2550,2711,5,457,0,0,2551,2552,5,226,0,0,2552,2553,5,456,0,0,2553,2554,
		3,166,83,0,2554,2555,5,7,0,0,2555,2556,3,364,182,0,2556,2557,5,457,0,0,
		2557,2711,1,0,0,0,2558,2559,5,36,0,0,2559,2560,5,456,0,0,2560,2561,3,364,
		182,0,2561,2562,5,458,0,0,2562,2565,3,166,83,0,2563,2564,5,458,0,0,2564,
		2566,3,166,83,0,2565,2563,1,0,0,0,2565,2566,1,0,0,0,2566,2567,1,0,0,0,
		2567,2568,5,457,0,0,2568,2711,1,0,0,0,2569,2570,5,230,0,0,2570,2571,5,
		456,0,0,2571,2572,5,461,0,0,2572,2711,5,457,0,0,2573,2574,5,26,0,0,2574,
		2575,5,456,0,0,2575,2576,3,268,134,0,2576,2577,5,457,0,0,2577,2711,1,0,
		0,0,2578,2711,5,42,0,0,2579,2711,5,43,0,0,2580,2581,5,244,0,0,2581,2582,
		5,456,0,0,2582,2583,5,434,0,0,2583,2584,5,458,0,0,2584,2585,3,166,83,0,
		2585,2586,5,458,0,0,2586,2587,3,166,83,0,2587,2588,5,457,0,0,2588,2711,
		1,0,0,0,2589,2590,5,245,0,0,2590,2591,5,456,0,0,2591,2592,5,434,0,0,2592,
		2593,5,458,0,0,2593,2594,3,166,83,0,2594,2595,5,458,0,0,2595,2596,3,166,
		83,0,2596,2597,5,457,0,0,2597,2711,1,0,0,0,2598,2599,5,246,0,0,2599,2600,
		5,456,0,0,2600,2601,5,434,0,0,2601,2602,5,458,0,0,2602,2603,3,166,83,0,
		2603,2604,5,457,0,0,2604,2711,1,0,0,0,2605,2606,5,247,0,0,2606,2607,5,
		456,0,0,2607,2608,5,434,0,0,2608,2609,5,458,0,0,2609,2610,3,166,83,0,2610,
		2611,5,457,0,0,2611,2711,1,0,0,0,2612,2613,5,249,0,0,2613,2614,5,456,0,
		0,2614,2615,3,166,83,0,2615,2616,5,458,0,0,2616,2617,3,166,83,0,2617,2618,
		5,458,0,0,2618,2619,3,166,83,0,2619,2620,5,458,0,0,2620,2621,3,166,83,
		0,2621,2622,5,458,0,0,2622,2623,3,166,83,0,2623,2624,5,458,0,0,2624,2625,
		3,166,83,0,2625,2626,5,458,0,0,2626,2627,3,166,83,0,2627,2628,5,458,0,
		0,2628,2629,3,166,83,0,2629,2630,5,458,0,0,2630,2631,3,166,83,0,2631,2632,
		5,458,0,0,2632,2633,3,166,83,0,2633,2634,5,457,0,0,2634,2711,1,0,0,0,2635,
		2636,5,84,0,0,2636,2637,5,456,0,0,2637,2640,3,364,182,0,2638,2639,5,458,
		0,0,2639,2641,5,433,0,0,2640,2638,1,0,0,0,2640,2641,1,0,0,0,2641,2644,
		1,0,0,0,2642,2643,5,458,0,0,2643,2645,5,433,0,0,2644,2642,1,0,0,0,2644,
		2645,1,0,0,0,2645,2646,1,0,0,0,2646,2647,5,457,0,0,2647,2711,1,0,0,0,2648,
		2649,5,87,0,0,2649,2650,5,456,0,0,2650,2651,3,180,90,0,2651,2652,5,458,
		0,0,2652,2653,3,166,83,0,2653,2654,5,458,0,0,2654,2655,3,166,83,0,2655,
		2656,5,457,0,0,2656,2711,1,0,0,0,2657,2711,5,322,0,0,2658,2659,5,112,0,
		0,2659,2660,5,456,0,0,2660,2661,3,166,83,0,2661,2662,5,458,0,0,2662,2663,
		3,166,83,0,2663,2664,5,457,0,0,2664,2711,1,0,0,0,2665,2666,5,348,0,0,2666,
		2667,5,456,0,0,2667,2668,3,166,83,0,2668,2669,5,7,0,0,2669,2672,3,364,
		182,0,2670,2671,5,417,0,0,2671,2673,3,166,83,0,2672,2670,1,0,0,0,2672,
		2673,1,0,0,0,2673,2674,1,0,0,0,2674,2675,5,457,0,0,2675,2711,1,0,0,0,2676,
		2711,5,162,0,0,2677,2678,5,396,0,0,2678,2679,5,456,0,0,2679,2680,3,166,
		83,0,2680,2681,5,458,0,0,2681,2682,3,166,83,0,2682,2683,5,457,0,0,2683,
		2711,1,0,0,0,2684,2711,5,169,0,0,2685,2686,5,181,0,0,2686,2687,5,456,0,
		0,2687,2688,3,364,182,0,2688,2689,5,458,0,0,2689,2690,3,166,83,0,2690,
		2691,5,457,0,0,2691,2711,1,0,0,0,2692,2693,5,180,0,0,2693,2694,5,456,0,
		0,2694,2695,3,166,83,0,2695,2696,5,7,0,0,2696,2697,3,364,182,0,2697,2698,
		5,457,0,0,2698,2711,1,0,0,0,2699,2700,5,182,0,0,2700,2701,5,456,0,0,2701,
		2702,3,166,83,0,2702,2703,5,7,0,0,2703,2706,3,364,182,0,2704,2705,5,417,
		0,0,2705,2707,3,166,83,0,2706,2704,1,0,0,0,2706,2707,1,0,0,0,2707,2708,
		1,0,0,0,2708,2709,5,457,0,0,2709,2711,1,0,0,0,2710,2537,1,0,0,0,2710,2538,
		1,0,0,0,2710,2539,1,0,0,0,2710,2546,1,0,0,0,2710,2547,1,0,0,0,2710,2551,
		1,0,0,0,2710,2558,1,0,0,0,2710,2569,1,0,0,0,2710,2573,1,0,0,0,2710,2578,
		1,0,0,0,2710,2579,1,0,0,0,2710,2580,1,0,0,0,2710,2589,1,0,0,0,2710,2598,
		1,0,0,0,2710,2605,1,0,0,0,2710,2612,1,0,0,0,2710,2635,1,0,0,0,2710,2648,
		1,0,0,0,2710,2657,1,0,0,0,2710,2658,1,0,0,0,2710,2665,1,0,0,0,2710,2676,
		1,0,0,0,2710,2677,1,0,0,0,2710,2684,1,0,0,0,2710,2685,1,0,0,0,2710,2692,
		1,0,0,0,2710,2699,1,0,0,0,2711,247,1,0,0,0,2712,2713,5,196,0,0,2713,2714,
		3,166,83,0,2714,2715,5,173,0,0,2715,2716,3,166,83,0,2716,249,1,0,0,0,2717,
		2718,5,196,0,0,2718,2719,3,180,90,0,2719,2720,5,173,0,0,2720,2721,3,166,
		83,0,2721,251,1,0,0,0,2722,2724,5,199,0,0,2723,2722,1,0,0,0,2723,2724,
		1,0,0,0,2724,2725,1,0,0,0,2725,2726,5,456,0,0,2726,2731,3,256,128,0,2727,
		2728,5,458,0,0,2728,2730,3,256,128,0,2729,2727,1,0,0,0,2730,2733,1,0,0,
		0,2731,2729,1,0,0,0,2731,2732,1,0,0,0,2732,2734,1,0,0,0,2733,2731,1,0,
		0,0,2734,2735,5,457,0,0,2735,253,1,0,0,0,2736,2737,5,199,0,0,2737,2738,
		5,456,0,0,2738,2743,3,256,128,0,2739,2740,5,458,0,0,2740,2742,3,256,128,
		0,2741,2739,1,0,0,0,2742,2745,1,0,0,0,2743,2741,1,0,0,0,2743,2744,1,0,
		0,0,2744,2746,1,0,0,0,2745,2743,1,0,0,0,2746,2747,5,457,0,0,2747,255,1,
		0,0,0,2748,2750,5,330,0,0,2749,2748,1,0,0,0,2749,2750,1,0,0,0,2750,2789,
		1,0,0,0,2751,2752,5,90,0,0,2752,2753,5,456,0,0,2753,2758,3,258,129,0,2754,
		2755,5,458,0,0,2755,2757,3,258,129,0,2756,2754,1,0,0,0,2757,2760,1,0,0,
		0,2758,2756,1,0,0,0,2758,2759,1,0,0,0,2759,2761,1,0,0,0,2760,2758,1,0,
		0,0,2761,2762,5,457,0,0,2762,2790,1,0,0,0,2763,2764,5,90,0,0,2764,2765,
		5,439,0,0,2765,2790,3,258,129,0,2766,2781,5,73,0,0,2767,2768,5,456,0,0,
		2768,2769,3,258,129,0,2769,2770,5,456,0,0,2770,2775,5,434,0,0,2771,2772,
		5,458,0,0,2772,2774,5,434,0,0,2773,2771,1,0,0,0,2774,2777,1,0,0,0,2775,
		2773,1,0,0,0,2775,2776,1,0,0,0,2776,2778,1,0,0,0,2777,2775,1,0,0,0,2778,
		2779,5,457,0,0,2779,2780,5,457,0,0,2780,2782,1,0,0,0,2781,2767,1,0,0,0,
		2781,2782,1,0,0,0,2782,2790,1,0,0,0,2783,2790,5,382,0,0,2784,2790,5,389,
		0,0,2785,2786,5,390,0,0,2786,2787,5,439,0,0,2787,2790,5,433,0,0,2788,2790,
		5,434,0,0,2789,2751,1,0,0,0,2789,2763,1,0,0,0,2789,2766,1,0,0,0,2789,2783,
		1,0,0,0,2789,2784,1,0,0,0,2789,2785,1,0,0,0,2789,2788,1,0,0,0,2789,2790,
		1,0,0,0,2790,257,1,0,0,0,2791,2794,3,334,167,0,2792,2794,5,433,0,0,2793,
		2791,1,0,0,0,2793,2792,1,0,0,0,2794,259,1,0,0,0,2795,2796,5,456,0,0,2796,
		2801,3,262,131,0,2797,2798,5,458,0,0,2798,2800,3,262,131,0,2799,2797,1,
		0,0,0,2800,2803,1,0,0,0,2801,2799,1,0,0,0,2801,2802,1,0,0,0,2802,2804,
		1,0,0,0,2803,2801,1,0,0,0,2804,2805,5,457,0,0,2805,261,1,0,0,0,2806,2809,
		3,334,167,0,2807,2809,5,435,0,0,2808,2806,1,0,0,0,2808,2807,1,0,0,0,2809,
		263,1,0,0,0,2810,2811,5,461,0,0,2811,265,1,0,0,0,2812,2813,5,191,0,0,2813,
		2818,3,270,135,0,2814,2815,5,458,0,0,2815,2817,3,270,135,0,2816,2814,1,
		0,0,0,2817,2820,1,0,0,0,2818,2816,1,0,0,0,2818,2819,1,0,0,0,2819,267,1,
		0,0,0,2820,2818,1,0,0,0,2821,2826,3,166,83,0,2822,2823,5,458,0,0,2823,
		2825,3,166,83,0,2824,2822,1,0,0,0,2825,2828,1,0,0,0,2826,2824,1,0,0,0,
		2826,2827,1,0,0,0,2827,269,1,0,0,0,2828,2826,1,0,0,0,2829,2830,5,456,0,
		0,2830,2831,3,268,134,0,2831,2832,5,457,0,0,2832,271,1,0,0,0,2833,2834,
		5,106,0,0,2834,2835,5,192,0,0,2835,2836,5,72,0,0,2836,273,1,0,0,0,2837,
		2838,3,272,136,0,2838,2839,3,310,155,0,2839,2840,3,282,141,0,2840,275,
		1,0,0,0,2841,2842,7,47,0,0,2842,2843,5,456,0,0,2843,2844,5,457,0,0,2844,
		2865,3,282,141,0,2845,2846,7,48,0,0,2846,2847,5,456,0,0,2847,2848,3,166,
		83,0,2848,2849,5,457,0,0,2849,2850,3,282,141,0,2850,2865,1,0,0,0,2851,
		2852,7,49,0,0,2852,2853,5,456,0,0,2853,2858,3,166,83,0,2854,2855,5,458,
		0,0,2855,2857,3,166,83,0,2856,2854,1,0,0,0,2857,2860,1,0,0,0,2858,2856,
		1,0,0,0,2858,2859,1,0,0,0,2859,2861,1,0,0,0,2860,2858,1,0,0,0,2861,2862,
		5,457,0,0,2862,2863,3,282,141,0,2863,2865,1,0,0,0,2864,2841,1,0,0,0,2864,
		2845,1,0,0,0,2864,2851,1,0,0,0,2865,277,1,0,0,0,2866,2867,7,50,0,0,2867,
		2869,5,456,0,0,2868,2870,3,280,140,0,2869,2868,1,0,0,0,2869,2870,1,0,0,
		0,2870,2871,1,0,0,0,2871,2872,3,166,83,0,2872,2874,5,457,0,0,2873,2875,
		3,282,141,0,2874,2873,1,0,0,0,2874,2875,1,0,0,0,2875,2908,1,0,0,0,2876,
		2877,7,51,0,0,2877,2883,5,456,0,0,2878,2884,5,461,0,0,2879,2881,3,280,
		140,0,2880,2879,1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,0,0,0,2882,2884,
		3,166,83,0,2883,2878,1,0,0,0,2883,2880,1,0,0,0,2884,2885,1,0,0,0,2885,
		2887,5,457,0,0,2886,2888,3,282,141,0,2887,2886,1,0,0,0,2887,2888,1,0,0,
		0,2888,2908,1,0,0,0,2889,2890,5,231,0,0,2890,2892,5,456,0,0,2891,2893,
		3,280,140,0,2892,2891,1,0,0,0,2892,2893,1,0,0,0,2893,2894,1,0,0,0,2894,
		2895,3,166,83,0,2895,2896,5,457,0,0,2896,2908,1,0,0,0,2897,2898,5,284,
		0,0,2898,2899,5,456,0,0,2899,2900,3,166,83,0,2900,2901,5,457,0,0,2901,
		2908,1,0,0,0,2902,2903,5,285,0,0,2903,2904,5,456,0,0,2904,2905,3,268,134,
		0,2905,2906,5,457,0,0,2906,2908,1,0,0,0,2907,2866,1,0,0,0,2907,2876,1,
		0,0,0,2907,2889,1,0,0,0,2907,2897,1,0,0,0,2907,2902,1,0,0,0,2908,279,1,
		0,0,0,2909,2910,7,34,0,0,2910,281,1,0,0,0,2911,2912,5,127,0,0,2912,2916,
		5,456,0,0,2913,2914,5,349,0,0,2914,2915,5,16,0,0,2915,2917,3,268,134,0,
		2916,2913,1,0,0,0,2916,2917,1,0,0,0,2917,2919,1,0,0,0,2918,2920,3,198,
		99,0,2919,2918,1,0,0,0,2919,2920,1,0,0,0,2920,2922,1,0,0,0,2921,2923,3,
		284,142,0,2922,2921,1,0,0,0,2922,2923,1,0,0,0,2923,2924,1,0,0,0,2924,2925,
		5,457,0,0,2925,283,1,0,0,0,2926,2927,7,52,0,0,2927,2928,3,286,143,0,2928,
		285,1,0,0,0,2929,2936,3,290,145,0,2930,2931,5,12,0,0,2931,2932,3,288,144,
		0,2932,2933,5,5,0,0,2933,2934,3,288,144,0,2934,2936,1,0,0,0,2935,2929,
		1,0,0,0,2935,2930,1,0,0,0,2936,287,1,0,0,0,2937,2940,3,290,145,0,2938,
		2940,3,292,146,0,2939,2937,1,0,0,0,2939,2938,1,0,0,0,2940,289,1,0,0,0,
		2941,2942,5,413,0,0,2942,2948,5,352,0,0,2943,2944,5,433,0,0,2944,2948,
		5,352,0,0,2945,2946,5,39,0,0,2946,2948,5,372,0,0,2947,2941,1,0,0,0,2947,
		2943,1,0,0,0,2947,2945,1,0,0,0,2948,291,1,0,0,0,2949,2950,5,413,0,0,2950,
		2954,5,276,0,0,2951,2952,5,433,0,0,2952,2954,5,276,0,0,2953,2949,1,0,0,
		0,2953,2951,1,0,0,0,2954,293,1,0,0,0,2955,2956,5,273,0,0,2956,2961,3,296,
		148,0,2957,2958,5,458,0,0,2958,2960,3,296,148,0,2959,2957,1,0,0,0,2960,
		2963,1,0,0,0,2961,2959,1,0,0,0,2961,2962,1,0,0,0,2962,2990,1,0,0,0,2963,
		2961,1,0,0,0,2964,2965,5,254,0,0,2965,2968,5,439,0,0,2966,2969,3,334,167,
		0,2967,2969,5,435,0,0,2968,2966,1,0,0,0,2968,2967,1,0,0,0,2969,2990,1,
		0,0,0,2970,2971,5,253,0,0,2971,2974,5,439,0,0,2972,2975,3,334,167,0,2973,
		2975,5,435,0,0,2974,2972,1,0,0,0,2974,2973,1,0,0,0,2975,2990,1,0,0,0,2976,
		2977,5,327,0,0,2977,2978,5,439,0,0,2978,2990,7,9,0,0,2979,2980,5,407,0,
		0,2980,2981,5,439,0,0,2981,2990,7,9,0,0,2982,2983,5,410,0,0,2983,2984,
		5,439,0,0,2984,2990,5,433,0,0,2985,2986,5,252,0,0,2986,2990,7,9,0,0,2987,
		2988,5,408,0,0,2988,2990,7,9,0,0,2989,2955,1,0,0,0,2989,2964,1,0,0,0,2989,
		2970,1,0,0,0,2989,2976,1,0,0,0,2989,2979,1,0,0,0,2989,2982,1,0,0,0,2989,
		2985,1,0,0,0,2989,2987,1,0,0,0,2990,295,1,0,0,0,2991,2998,5,456,0,0,2992,
		2993,5,331,0,0,2993,2994,5,439,0,0,2994,2999,7,53,0,0,2995,2996,5,259,
		0,0,2996,2997,5,439,0,0,2997,2999,5,435,0,0,2998,2992,1,0,0,0,2998,2995,
		1,0,0,0,2999,3000,1,0,0,0,3000,3001,5,457,0,0,3001,297,1,0,0,0,3002,3005,
		3,300,150,0,3003,3005,3,302,151,0,3004,3002,1,0,0,0,3004,3003,1,0,0,0,
		3005,299,1,0,0,0,3006,3007,5,271,0,0,3007,3010,3,334,167,0,3008,3009,5,
		33,0,0,3009,3011,5,273,0,0,3010,3008,1,0,0,0,3010,3011,1,0,0,0,3011,3013,
		1,0,0,0,3012,3014,5,49,0,0,3013,3012,1,0,0,0,3013,3014,1,0,0,0,3014,3017,
		1,0,0,0,3015,3016,5,33,0,0,3016,3018,5,319,0,0,3017,3015,1,0,0,0,3017,
		3018,1,0,0,0,3018,3019,1,0,0,0,3019,3024,3,302,151,0,3020,3021,5,458,0,
		0,3021,3023,3,302,151,0,3022,3020,1,0,0,0,3023,3026,1,0,0,0,3024,3022,
		1,0,0,0,3024,3025,1,0,0,0,3025,301,1,0,0,0,3026,3024,1,0,0,0,3027,3028,
		5,456,0,0,3028,3029,5,326,0,0,3029,3032,5,439,0,0,3030,3033,3,334,167,
		0,3031,3033,5,435,0,0,3032,3030,1,0,0,0,3032,3031,1,0,0,0,3033,3035,1,
		0,0,0,3034,3036,5,458,0,0,3035,3034,1,0,0,0,3035,3036,1,0,0,0,3036,3037,
		1,0,0,0,3037,3038,5,70,0,0,3038,3039,5,439,0,0,3039,3041,5,435,0,0,3040,
		3042,5,458,0,0,3041,3040,1,0,0,0,3041,3042,1,0,0,0,3042,3049,1,0,0,0,3043,
		3044,5,387,0,0,3044,3045,5,439,0,0,3045,3047,3,342,171,0,3046,3048,5,458,
		0,0,3047,3046,1,0,0,0,3047,3048,1,0,0,0,3048,3050,1,0,0,0,3049,3043,1,
		0,0,0,3049,3050,1,0,0,0,3050,3060,1,0,0,0,3051,3052,5,317,0,0,3052,3055,
		5,439,0,0,3053,3056,3,342,171,0,3054,3056,5,416,0,0,3055,3053,1,0,0,0,
		3055,3054,1,0,0,0,3056,3058,1,0,0,0,3057,3059,5,458,0,0,3058,3057,1,0,
		0,0,3058,3059,1,0,0,0,3059,3061,1,0,0,0,3060,3051,1,0,0,0,3060,3061,1,
		0,0,0,3061,3068,1,0,0,0,3062,3063,5,272,0,0,3063,3064,5,439,0,0,3064,3066,
		3,342,171,0,3065,3067,5,458,0,0,3066,3065,1,0,0,0,3066,3067,1,0,0,0,3067,
		3069,1,0,0,0,3068,3062,1,0,0,0,3068,3069,1,0,0,0,3069,3070,1,0,0,0,3070,
		3071,5,457,0,0,3071,303,1,0,0,0,3072,3073,3,334,167,0,3073,3074,5,451,
		0,0,3074,3075,3,334,167,0,3075,3076,5,451,0,0,3076,3077,3,334,167,0,3077,
		3078,5,451,0,0,3078,3090,1,0,0,0,3079,3080,3,334,167,0,3080,3082,5,451,
		0,0,3081,3083,3,334,167,0,3082,3081,1,0,0,0,3082,3083,1,0,0,0,3083,3084,
		1,0,0,0,3084,3085,5,451,0,0,3085,3090,1,0,0,0,3086,3087,3,334,167,0,3087,
		3088,5,451,0,0,3088,3090,1,0,0,0,3089,3072,1,0,0,0,3089,3079,1,0,0,0,3089,
		3086,1,0,0,0,3089,3090,1,0,0,0,3090,3091,1,0,0,0,3091,3092,3,334,167,0,
		3092,305,1,0,0,0,3093,3094,3,334,167,0,3094,3096,5,451,0,0,3095,3097,3,
		334,167,0,3096,3095,1,0,0,0,3096,3097,1,0,0,0,3097,3098,1,0,0,0,3098,3099,
		5,451,0,0,3099,3104,1,0,0,0,3100,3101,3,334,167,0,3101,3102,5,451,0,0,
		3102,3104,1,0,0,0,3103,3093,1,0,0,0,3103,3100,1,0,0,0,3103,3104,1,0,0,
		0,3104,3105,1,0,0,0,3105,3106,3,334,167,0,3106,307,1,0,0,0,3107,3108,3,
		334,167,0,3108,3109,5,451,0,0,3109,3111,1,0,0,0,3110,3107,1,0,0,0,3110,
		3111,1,0,0,0,3111,3112,1,0,0,0,3112,3113,3,334,167,0,3113,309,1,0,0,0,
		3114,3115,3,334,167,0,3115,3117,5,451,0,0,3116,3118,3,334,167,0,3117,3116,
		1,0,0,0,3117,3118,1,0,0,0,3118,3119,1,0,0,0,3119,3120,5,451,0,0,3120,3125,
		1,0,0,0,3121,3122,3,334,167,0,3122,3123,5,451,0,0,3123,3125,1,0,0,0,3124,
		3114,1,0,0,0,3124,3121,1,0,0,0,3124,3125,1,0,0,0,3125,3126,1,0,0,0,3126,
		3127,3,334,167,0,3127,311,1,0,0,0,3128,3131,3,304,152,0,3129,3131,5,432,
		0,0,3130,3128,1,0,0,0,3130,3129,1,0,0,0,3131,313,1,0,0,0,3132,3133,3,306,
		153,0,3133,3134,5,451,0,0,3134,3136,1,0,0,0,3135,3132,1,0,0,0,3135,3136,
		1,0,0,0,3136,3137,1,0,0,0,3137,3138,3,334,167,0,3138,315,1,0,0,0,3139,
		3144,3,334,167,0,3140,3141,5,458,0,0,3141,3143,3,334,167,0,3142,3140,1,
		0,0,0,3143,3146,1,0,0,0,3144,3142,1,0,0,0,3144,3145,1,0,0,0,3145,317,1,
		0,0,0,3146,3144,1,0,0,0,3147,3150,3,334,167,0,3148,3150,5,432,0,0,3149,
		3147,1,0,0,0,3149,3148,1,0,0,0,3150,319,1,0,0,0,3151,3152,7,9,0,0,3152,
		321,1,0,0,0,3153,3154,7,54,0,0,3154,323,1,0,0,0,3155,3157,5,110,0,0,3156,
		3155,1,0,0,0,3156,3157,1,0,0,0,3157,3158,1,0,0,0,3158,3159,5,111,0,0,3159,
		325,1,0,0,0,3160,3166,3,310,155,0,3161,3166,5,150,0,0,3162,3166,5,99,0,
		0,3163,3166,5,223,0,0,3164,3166,5,230,0,0,3165,3160,1,0,0,0,3165,3161,
		1,0,0,0,3165,3162,1,0,0,0,3165,3163,1,0,0,0,3165,3164,1,0,0,0,3166,327,
		1,0,0,0,3167,3170,5,111,0,0,3168,3170,3,330,165,0,3169,3167,1,0,0,0,3169,
		3168,1,0,0,0,3170,329,1,0,0,0,3171,3187,5,435,0,0,3172,3187,5,436,0,0,
		3173,3175,3,332,166,0,3174,3173,1,0,0,0,3174,3175,1,0,0,0,3175,3176,1,
		0,0,0,3176,3187,5,433,0,0,3177,3179,3,332,166,0,3178,3177,1,0,0,0,3178,
		3179,1,0,0,0,3179,3180,1,0,0,0,3180,3187,7,55,0,0,3181,3183,3,332,166,
		0,3182,3181,1,0,0,0,3182,3183,1,0,0,0,3183,3184,1,0,0,0,3184,3185,5,455,
		0,0,3185,3187,7,56,0,0,3186,3171,1,0,0,0,3186,3172,1,0,0,0,3186,3174,1,
		0,0,0,3186,3178,1,0,0,0,3186,3182,1,0,0,0,3187,331,1,0,0,0,3188,3189,7,
		30,0,0,3189,333,1,0,0,0,3190,3194,3,336,168,0,3191,3194,5,430,0,0,3192,
		3194,5,431,0,0,3193,3190,1,0,0,0,3193,3191,1,0,0,0,3193,3192,1,0,0,0,3194,
		335,1,0,0,0,3195,3196,7,57,0,0,3196,337,1,0,0,0,3197,3214,5,439,0,0,3198,
		3214,5,440,0,0,3199,3214,5,441,0,0,3200,3201,5,441,0,0,3201,3214,5,439,
		0,0,3202,3203,5,440,0,0,3203,3214,5,439,0,0,3204,3205,5,441,0,0,3205,3214,
		5,440,0,0,3206,3207,5,442,0,0,3207,3214,5,439,0,0,3208,3209,5,442,0,0,
		3209,3214,5,440,0,0,3210,3211,5,442,0,0,3211,3214,5,441,0,0,3212,3214,
		5,95,0,0,3213,3197,1,0,0,0,3213,3198,1,0,0,0,3213,3199,1,0,0,0,3213,3200,
		1,0,0,0,3213,3202,1,0,0,0,3213,3204,1,0,0,0,3213,3206,1,0,0,0,3213,3208,
		1,0,0,0,3213,3210,1,0,0,0,3213,3212,1,0,0,0,3214,339,1,0,0,0,3215,3216,
		7,58,0,0,3216,341,1,0,0,0,3217,3219,5,433,0,0,3218,3220,7,59,0,0,3219,
		3218,1,0,0,0,3219,3220,1,0,0,0,3220,343,1,0,0,0,3221,3224,5,37,0,0,3222,
		3223,5,124,0,0,3223,3225,5,4,0,0,3224,3222,1,0,0,0,3224,3225,1,0,0,0,3225,
		3228,1,0,0,0,3226,3228,5,4,0,0,3227,3221,1,0,0,0,3227,3226,1,0,0,0,3228,
		3229,1,0,0,0,3229,3230,7,60,0,0,3230,3233,3,310,155,0,3231,3232,5,459,
		0,0,3232,3234,5,433,0,0,3233,3231,1,0,0,0,3233,3234,1,0,0,0,3234,3249,
		1,0,0,0,3235,3237,5,456,0,0,3236,3235,1,0,0,0,3236,3237,1,0,0,0,3237,3238,
		1,0,0,0,3238,3243,3,354,177,0,3239,3240,5,458,0,0,3240,3242,3,354,177,
		0,3241,3239,1,0,0,0,3242,3245,1,0,0,0,3243,3241,1,0,0,0,3243,3244,1,0,
		0,0,3244,3247,1,0,0,0,3245,3243,1,0,0,0,3246,3248,5,457,0,0,3247,3246,
		1,0,0,0,3247,3248,1,0,0,0,3248,3250,1,0,0,0,3249,3236,1,0,0,0,3249,3250,
		1,0,0,0,3250,3260,1,0,0,0,3251,3252,5,199,0,0,3252,3257,3,356,178,0,3253,
		3254,5,458,0,0,3254,3256,3,356,178,0,3255,3253,1,0,0,0,3256,3259,1,0,0,
		0,3257,3255,1,0,0,0,3257,3258,1,0,0,0,3258,3261,1,0,0,0,3259,3257,1,0,
		0,0,3260,3251,1,0,0,0,3260,3261,1,0,0,0,3261,3264,1,0,0,0,3262,3263,5,
		72,0,0,3263,3265,5,143,0,0,3264,3262,1,0,0,0,3264,3265,1,0,0,0,3265,3266,
		1,0,0,0,3266,3267,5,7,0,0,3267,3268,3,4,2,0,3268,345,1,0,0,0,3269,3272,
		5,37,0,0,3270,3271,5,124,0,0,3271,3273,5,4,0,0,3272,3270,1,0,0,0,3272,
		3273,1,0,0,0,3273,3276,1,0,0,0,3274,3276,5,4,0,0,3275,3269,1,0,0,0,3275,
		3274,1,0,0,0,3276,3277,1,0,0,0,3277,3278,5,79,0,0,3278,3292,3,310,155,
		0,3279,3280,5,456,0,0,3280,3285,3,354,177,0,3281,3282,5,458,0,0,3282,3284,
		3,354,177,0,3283,3281,1,0,0,0,3284,3287,1,0,0,0,3285,3283,1,0,0,0,3285,
		3286,1,0,0,0,3286,3288,1,0,0,0,3287,3285,1,0,0,0,3288,3289,5,457,0,0,3289,
		3293,1,0,0,0,3290,3291,5,456,0,0,3291,3293,5,457,0,0,3292,3279,1,0,0,0,
		3292,3290,1,0,0,0,3293,3297,1,0,0,0,3294,3298,3,348,174,0,3295,3298,3,
		350,175,0,3296,3298,3,352,176,0,3297,3294,1,0,0,0,3297,3295,1,0,0,0,3297,
		3296,1,0,0,0,3298,3300,1,0,0,0,3299,3301,5,459,0,0,3300,3299,1,0,0,0,3300,
		3301,1,0,0,0,3301,347,1,0,0,0,3302,3303,5,147,0,0,3303,3313,5,170,0,0,
		3304,3305,5,199,0,0,3305,3310,3,358,179,0,3306,3307,5,458,0,0,3307,3309,
		3,358,179,0,3308,3306,1,0,0,0,3309,3312,1,0,0,0,3310,3308,1,0,0,0,3310,
		3311,1,0,0,0,3311,3314,1,0,0,0,3312,3310,1,0,0,0,3313,3304,1,0,0,0,3313,
		3314,1,0,0,0,3314,3316,1,0,0,0,3315,3317,5,7,0,0,3316,3315,1,0,0,0,3316,
		3317,1,0,0,0,3317,3318,1,0,0,0,3318,3324,5,146,0,0,3319,3320,5,456,0,0,
		3320,3321,3,24,12,0,3321,3322,5,457,0,0,3322,3325,1,0,0,0,3323,3325,3,
		24,12,0,3324,3319,1,0,0,0,3324,3323,1,0,0,0,3325,349,1,0,0,0,3326,3327,
		5,147,0,0,3327,3328,5,432,0,0,3328,3338,3,140,70,0,3329,3330,5,199,0,0,
		3330,3335,3,358,179,0,3331,3332,5,458,0,0,3332,3334,3,358,179,0,3333,3331,
		1,0,0,0,3334,3337,1,0,0,0,3335,3333,1,0,0,0,3335,3336,1,0,0,0,3336,3339,
		1,0,0,0,3337,3335,1,0,0,0,3338,3329,1,0,0,0,3338,3339,1,0,0,0,3339,3341,
		1,0,0,0,3340,3342,5,7,0,0,3341,3340,1,0,0,0,3341,3342,1,0,0,0,3342,3343,
		1,0,0,0,3343,3347,5,11,0,0,3344,3346,3,6,3,0,3345,3344,1,0,0,0,3346,3349,
		1,0,0,0,3347,3345,1,0,0,0,3347,3348,1,0,0,0,3348,3350,1,0,0,0,3349,3347,
		1,0,0,0,3350,3352,5,146,0,0,3351,3353,5,459,0,0,3352,3351,1,0,0,0,3352,
		3353,1,0,0,0,3353,3354,1,0,0,0,3354,3356,5,60,0,0,3355,3357,5,459,0,0,
		3356,3355,1,0,0,0,3356,3357,1,0,0,0,3357,351,1,0,0,0,3358,3359,5,147,0,
		0,3359,3369,3,364,182,0,3360,3361,5,199,0,0,3361,3366,3,358,179,0,3362,
		3363,5,458,0,0,3363,3365,3,358,179,0,3364,3362,1,0,0,0,3365,3368,1,0,0,
		0,3366,3364,1,0,0,0,3366,3367,1,0,0,0,3367,3370,1,0,0,0,3368,3366,1,0,
		0,0,3369,3360,1,0,0,0,3369,3370,1,0,0,0,3370,3372,1,0,0,0,3371,3373,5,
		7,0,0,3372,3371,1,0,0,0,3372,3373,1,0,0,0,3373,3374,1,0,0,0,3374,3378,
		5,11,0,0,3375,3377,3,6,3,0,3376,3375,1,0,0,0,3377,3380,1,0,0,0,3378,3376,
		1,0,0,0,3378,3379,1,0,0,0,3379,3381,1,0,0,0,3380,3378,1,0,0,0,3381,3382,
		5,146,0,0,3382,3384,3,166,83,0,3383,3385,5,459,0,0,3384,3383,1,0,0,0,3384,
		3385,1,0,0,0,3385,3386,1,0,0,0,3386,3387,5,60,0,0,3387,353,1,0,0,0,3388,
		3392,5,432,0,0,3389,3390,3,334,167,0,3390,3391,5,451,0,0,3391,3393,1,0,
		0,0,3392,3389,1,0,0,0,3392,3393,1,0,0,0,3393,3395,1,0,0,0,3394,3396,5,
		7,0,0,3395,3394,1,0,0,0,3395,3396,1,0,0,0,3396,3397,1,0,0,0,3397,3399,
		3,364,182,0,3398,3400,5,193,0,0,3399,3398,1,0,0,0,3399,3400,1,0,0,0,3400,
		3403,1,0,0,0,3401,3402,5,439,0,0,3402,3404,3,328,164,0,3403,3401,1,0,0,
		0,3403,3404,1,0,0,0,3404,3406,1,0,0,0,3405,3407,7,61,0,0,3406,3405,1,0,
		0,0,3406,3407,1,0,0,0,3407,355,1,0,0,0,3408,3412,5,266,0,0,3409,3412,5,
		362,0,0,3410,3412,3,136,68,0,3411,3408,1,0,0,0,3411,3409,1,0,0,0,3411,
		3410,1,0,0,0,3412,357,1,0,0,0,3413,3426,5,266,0,0,3414,3426,5,377,0,0,
		3415,3416,5,147,0,0,3416,3417,5,111,0,0,3417,3418,5,117,0,0,3418,3419,
		5,111,0,0,3419,3426,5,294,0,0,3420,3421,5,17,0,0,3421,3422,5,117,0,0,3422,
		3423,5,111,0,0,3423,3426,5,294,0,0,3424,3426,3,136,68,0,3425,3413,1,0,
		0,0,3425,3414,1,0,0,0,3425,3415,1,0,0,0,3425,3420,1,0,0,0,3425,3424,1,
		0,0,0,3426,359,1,0,0,0,3427,3428,5,351,0,0,3428,3429,5,456,0,0,3429,3430,
		3,166,83,0,3430,3431,5,457,0,0,3431,3432,5,200,0,0,3432,3433,5,82,0,0,
		3433,3434,5,456,0,0,3434,3435,3,198,99,0,3435,3436,5,457,0,0,3436,3437,
		3,282,141,0,3437,361,1,0,0,0,3438,3439,5,395,0,0,3439,3440,5,456,0,0,3440,
		3441,3,166,83,0,3441,3442,5,458,0,0,3442,3443,3,166,83,0,3443,3444,5,457,
		0,0,3444,3445,5,200,0,0,3445,3446,5,82,0,0,3446,3447,5,456,0,0,3447,3448,
		3,198,99,0,3448,3449,5,457,0,0,3449,363,1,0,0,0,3450,3452,3,334,167,0,
		3451,3453,5,84,0,0,3452,3451,1,0,0,0,3452,3453,1,0,0,0,3453,3461,1,0,0,
		0,3454,3455,5,456,0,0,3455,3458,7,62,0,0,3456,3457,5,458,0,0,3457,3459,
		5,433,0,0,3458,3456,1,0,0,0,3458,3459,1,0,0,0,3459,3460,1,0,0,0,3460,3462,
		5,457,0,0,3461,3454,1,0,0,0,3461,3462,1,0,0,0,3462,3477,1,0,0,0,3463,3477,
		5,243,0,0,3464,3465,5,248,0,0,3465,3466,5,456,0,0,3466,3467,5,433,0,0,
		3467,3477,5,457,0,0,3468,3470,5,56,0,0,3469,3471,5,132,0,0,3470,3469,1,
		0,0,0,3470,3471,1,0,0,0,3471,3477,1,0,0,0,3472,3477,5,295,0,0,3473,3477,
		5,405,0,0,3474,3477,5,388,0,0,3475,3477,5,222,0,0,3476,3450,1,0,0,0,3476,
		3463,1,0,0,0,3476,3464,1,0,0,0,3476,3468,1,0,0,0,3476,3472,1,0,0,0,3476,
		3473,1,0,0,0,3476,3474,1,0,0,0,3476,3475,1,0,0,0,3477,365,1,0,0,0,493,
		369,376,380,384,390,396,414,418,421,425,429,433,438,443,450,453,457,460,
		468,471,476,479,484,489,492,497,503,510,514,516,521,534,539,541,550,553,
		557,560,564,567,571,574,577,580,583,587,592,595,599,602,606,609,615,618,
		622,625,628,635,638,642,645,648,651,654,658,662,665,673,677,681,684,687,
		690,693,700,704,706,714,720,726,728,732,735,738,743,748,751,759,763,770,
		773,782,785,789,797,800,804,807,816,820,824,827,843,847,853,855,858,866,
		872,877,880,889,897,900,907,910,950,953,959,971,973,976,1000,1011,1019,
		1030,1035,1038,1046,1056,1082,1088,1099,1113,1121,1128,1151,1164,1170,
		1175,1178,1184,1188,1195,1204,1208,1214,1221,1225,1238,1244,1261,1265,
		1273,1277,1285,1289,1291,1295,1299,1303,1307,1313,1317,1319,1324,1332,
		1335,1338,1347,1352,1357,1360,1362,1366,1370,1373,1377,1383,1388,1395,
		1397,1401,1408,1412,1415,1424,1427,1429,1438,1449,1453,1455,1457,1463,
		1468,1475,1488,1490,1492,1495,1498,1505,1508,1514,1519,1521,1524,1530,
		1538,1540,1543,1547,1550,1556,1559,1563,1566,1572,1575,1577,1581,1586,
		1594,1599,1608,1613,1618,1624,1628,1631,1635,1641,1649,1654,1656,1659,
		1664,1669,1672,1677,1680,1683,1689,1695,1699,1704,1707,1712,1716,1720,
		1726,1732,1741,1751,1761,1763,1765,1768,1771,1782,1784,1786,1789,1792,
		1795,1798,1801,1804,1816,1819,1822,1831,1834,1837,1844,1847,1861,1864,
		1871,1886,1890,1904,1908,1916,1920,1940,1960,1962,1973,1980,1987,1995,
		2004,2008,2018,2025,2037,2039,2066,2075,2081,2087,2093,2100,2108,2116,
		2121,2125,2129,2132,2137,2141,2145,2154,2157,2160,2164,2168,2180,2194,
		2199,2204,2208,2215,2224,2231,2233,2247,2255,2258,2260,2267,2271,2282,
		2316,2332,2338,2345,2351,2356,2364,2367,2369,2376,2385,2402,2404,2409,
		2412,2415,2419,2424,2426,2430,2434,2438,2445,2447,2449,2453,2458,2463,
		2470,2483,2487,2489,2492,2496,2516,2520,2524,2535,2542,2565,2640,2644,
		2672,2706,2710,2723,2731,2743,2749,2758,2775,2781,2789,2793,2801,2808,
		2818,2826,2858,2864,2869,2874,2880,2883,2887,2892,2907,2916,2919,2922,
		2935,2939,2947,2953,2961,2968,2974,2989,2998,3004,3010,3013,3017,3024,
		3032,3035,3041,3047,3049,3055,3058,3060,3066,3068,3082,3089,3096,3103,
		3110,3117,3124,3130,3135,3144,3149,3156,3165,3169,3174,3178,3182,3186,
		3193,3213,3219,3224,3227,3233,3236,3243,3247,3249,3257,3260,3264,3272,
		3275,3285,3292,3297,3300,3310,3313,3316,3324,3335,3338,3341,3347,3352,
		3356,3366,3369,3372,3378,3384,3392,3395,3399,3403,3406,3411,3425,3452,
		3458,3461,3470,3476
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

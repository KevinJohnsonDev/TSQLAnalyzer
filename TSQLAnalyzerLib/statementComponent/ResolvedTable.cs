namespace TSQLAnalyzerLib.statementComponent {
    public class ResolvedTable : ITokenText
    {
        public string TokenText { get; init; }
        public int Start { get; init; }
        public int End { get; init; }
        public string TableName { get; init; }
        public string Database { get; init; }
        public string Schema { get; init; }

        private Index? _clusteredIndex;
        public Index? ClusteredIndex { get { return _clusteredIndex; } }

        public IList<Index> Indexes { get; init; }

        public IList<ResolvedColumn> Columns { get; init; }

        public ResolvedTable(BaseToken token, string database, string schema, string tableName, IList<ResolvedColumn> columns)
        {
            TokenText = token.TokenText;
            Start = token.Start;
            End = token.End;
            Database = database;
            Schema = schema;
            TableName = tableName;
            Columns = columns;
            Indexes = new List<Index>();
            foreach (var col in Columns) { col.Table = this; }
        }
        public ResolvedTable(BaseToken token, string database, string schema, string tableName)
        {
            TokenText = token.TokenText;
            Start = token.Start;
            End = token.End;
            Database = database;
            Schema = schema;
            TableName = tableName;
            Columns = new List<ResolvedColumn>();
            Indexes = new List<Index>();
            foreach (var col in Columns) { col.Table = this; }
        }

        public void Add(Index index) => Indexes.Add(index);
        public void Add(ResolvedColumn col)
        {
            Columns.Add(col);
            col.Table = this;
        }
        public void Alter(ResolvedColumn col)
        {

            for (int i = 0; i < Columns.Count; i += 1)
            {
                if (col.ColumnName == Columns[i].ColumnName)
                {
                    Columns[i] = col;
                    col.Table = this;
                }
            }
        }

        public void SetPrimaryKey(ResolvedColumn col, string? constraintName = "[AutoGenerated]")
        {
            if (string.IsNullOrWhiteSpace(constraintName)) constraintName = "[AutoGenerated]";

            var idx = new Index(constraintName, "", true, true, true);
            idx.Columns.Add(col);
            _clusteredIndex = idx;
            Indexes.Add(idx);
        }

        public void Drop(string col)
        {
            int i;
            for (i = 0; i < Columns.Count; i += 1)
            {
                if (col == Columns[i].ColumnName) { break; }
            }
            if (i > 0) { Columns.Remove(Columns[i]); }
        }

        public static ResolvedTable FromDatabase(string database, string schema, string tableName)
        {
            return new ResolvedTable(BaseToken.OnlineToken, database, schema, tableName);
        }

        public bool IsFromOnline()
        {
            return TokenText == BaseToken.OnlineToken.TokenText &&
                    Start == BaseToken.OnlineToken.Start &&
                    End == BaseToken.OnlineToken.End;
        }
        public override string ToString() => $"{TokenText}:{Start}-{End}\n\tDatabase:{Database}\n\tSchema:{Schema}\n\tTableName:{TableName}\n\t";

    }
}
